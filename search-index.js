var N = null;var searchIndex = {};
searchIndex["antidote"]={"doc":"Mutex and RwLock types that do not poison themselves.","items":[[3,"WaitTimeoutResult","antidote","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Mutex","","Like `std::sync::Mutex` except that it does not poison itself.",N,N],[3,"MutexGuard","","Like `std::sync::MutexGuard`.",N,N],[3,"Condvar","","Like `std::sync::Condvar`.",N,N],[3,"TryLockError","","Like `std::sync::TryLockError`.",N,N],[3,"RwLock","","Like `std::sync::RwLock` except that it does not poison itself.",N,N],[3,"RwLockReadGuard","","Like `std::sync::RwLockReadGuard`.",N,N],[3,"RwLockWriteGuard","","Like `std::sync::RwLockWriteGuard`.",N,N],[6,"TryLockResult","","Like `std::sync::TryLockResult`.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Like `std::sync::Mutex::new`.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Like `std::sync::Mutex::into_inner`.",0,[[["self"]],["t"]]],[11,"lock","","Like `std::sync::Mutex::lock`.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Like `std::sync::Mutex::try_lock`.",0,[[["self"]],["trylockresult",["mutexguard"]]]],[11,"get_mut","","Like `std::sync::Mutex::get_mut`.",0,[[["self"]],["t"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"new","","Like `std::sync::Condvar::new`.",2,[[],["condvar"]]],[11,"wait","","Like `std::sync::Condvar::wait`.",2,[[["self"],["mutexguard"]],["mutexguard"]]],[11,"wait_timeout","","Like `std::sync::Condvar::wait_timeout`.",2,N],[11,"notify_one","","Like `std::sync::Condvar::notify_one`.",2,[[["self"]]]],[11,"notify_all","","Like `std::sync::Condvar::notify_all`.",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Like `std::sync::RwLock::new`.",4,[[["t"]],["rwlock"]]],[11,"into_inner","","Like `std::sync::RwLock::into_inner`.",4,[[["self"]],["t"]]],[11,"read","","Like `std::sync::RwLock::read`.",4,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Like `std::sync::RwLock::try_read`.",4,[[["self"]],["trylockresult",["rwlockreadguard"]]]],[11,"write","","Like `std::sync::RwLock::write`.",4,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Like `std::sync::RwLock::try_write`.",4,[[["self"]],["trylockresult",["rwlockwriteguard"]]]],[11,"get_mut","","Like `std::sync::RwLock::get_mut`.",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref","","",6,[[["self"]],["t"]]],[11,"deref_mut","","",6,[[["self"]],["t"]]],[11,"timed_out","","Returns whether the wait was known to have timed out.",7,[[["self"]],["bool"]]],[11,"clone","","",7,[[["self"]],["waittimeoutresult"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",7,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",7,[[["self"],["waittimeoutresult"]],["bool"]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Condvar"],[3,"TryLockError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"]]};
searchIndex["backtrace"]={"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",N,N],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",N,N],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",N,N],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",N,N],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",N,N],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",N,N],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",N,[[["f"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",N,N],[11,"ip","","Returns the current instruction pointer of this frame.",0,N],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"name","","Returns the name of this function.",1,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",1,[[["self"]],["option"]]],[11,"filename","","Returns the file name where this function was defined.",1,[[["self"]],["option",["path"]]]],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,[[["self"]],["option",["u32"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,N],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,[[["self"]],["option",["str"]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["backtrace"]]],[11,"clone","","",4,[[["self"]],["backtraceframe"]]],[11,"clone","","",5,[[["self"]],["backtracesymbol"]]],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",3,N],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,[[["self"]]]],[11,"from","","",3,[[["vec",["backtraceframe"]]],["self"]]],[11,"into","","",3,[[["self"]],["vec",["backtraceframe"]]]],[11,"ip","","Same as `Frame::ip`",4,N],[11,"symbol_address","","Same as `Frame::symbol_address`",4,N],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,N],[11,"name","","Same as `Symbol::name`",5,[[["self"]],["option",["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",5,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",5,[[["self"]],["option",["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",5,[[["self"]],["option",["u32"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["backtrace"]]]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"]={"doc":"","items":[[4,"backtrace_state","backtrace_sys","",N,N],[5,"backtrace_create_state","","",N,N],[5,"backtrace_syminfo","","",N,N],[5,"backtrace_pcinfo","","",N,N],[6,"backtrace_syminfo_callback","","",N,N],[6,"backtrace_full_callback","","",N,N],[6,"backtrace_error_callback","","",N,N]],"paths":[]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",N,N],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",N,N],[17,"FLAG_A","","",N,N],[17,"FLAG_B","","",N,N],[17,"FLAG_C","","",N,N],[17,"FLAG_ABC","","",N,N],[11,"eq","","",0,[[["self"],["flags"]],["bool"]]],[11,"ne","","",0,[[["self"],["flags"]],["bool"]]],[11,"clone","","",0,[[["self"]],["flags"]]],[11,"partial_cmp","","",0,[[["self"],["flags"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["flags"]],["bool"]]],[11,"le","","",0,[[["self"],["flags"]],["bool"]]],[11,"gt","","",0,[[["self"],["flags"]],["bool"]]],[11,"ge","","",0,[[["self"],["flags"]],["bool"]]],[11,"cmp","","",0,[[["self"],["flags"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"empty","","Returns an empty set of flags.",0,[[],["flags"]]],[11,"all","","Returns the set containing all flags.",0,[[],["flags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",0,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,[[["u32"]],["option",["flags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,[[["u32"]],["flags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",0,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,[[["self"],["flags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,[[["self"],["flags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"remove","","Removes the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"toggle","","Toggles the specified flags in-place.",0,[[["self"],["flags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,[[["self"],["flags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"bitor_assign","","Adds the set of flags.",0,[[["self"],["flags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,[[["self"],["flags"]],["flags"]]],[11,"bitxor_assign","","Toggles the set of flags.",0,[[["self"],["flags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",0,[[["self"],["flags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",0,[[["self"],["flags"]],["flags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",0,[[["self"],["flags"]]]],[11,"not","","Returns the complement of this set of flags.",0,[[["self"]],["flags"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"from_iter","","",0,[[["t"]],["flags"]]],[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",0,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,N],[4,"BigEndian","","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[3,"Bytes","","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",N,N],[0,"buf","","Utilities for working with buffers.",N,N],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",N,N],[3,"Iter","","Iterator over the bytes contained by the buffer.",N,N],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",N,N],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",N,N],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",N,N],[11,"from_buf","bytes","",1,[[["t"]],["self"]]],[11,"from_buf","","",2,[[["t"]],["self"]]],[11,"fmt","bytes::buf","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,[[["t"],["u"]],["chain"]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,N],[11,"remaining","","",3,[[["self"]],["usize"]]],[11,"bytes","","",3,N],[11,"advance","","",3,[[["self"],["usize"]]]],[11,"bytes_vec","","",3,N],[11,"remaining_mut","","",3,[[["self"]],["usize"]]],[11,"bytes_mut","","",3,N],[11,"advance_mut","","",3,[[["self"],["usize"]]]],[11,"bytes_vec_mut","","",3,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"next","","",4,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",4,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,[[["self"]],["b"]]],[11,"read","","",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"limit","","Returns the maximum number of bytes that can be read.",6,[[["self"]],["usize"]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,[[["self"],["usize"]]]],[11,"remaining","","",6,[[["self"]],["usize"]]],[11,"bytes","","",6,N],[11,"advance","","",6,[[["self"],["usize"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,[[["self"]],["b"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"FromBuf","","Conversion from a [`Buf`]",N,N],[10,"from_buf","","Creates a value from a buffer.",10,[[["t"]],["self"]]],[8,"IntoBuf","","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",1,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",1,N],[11,"split_off","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",1,[[["self"]]]],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",1,N],[11,"into_buf","","",1,N],[11,"clone","","",1,[[["self"]],["bytes"]]],[11,"as_ref","","",1,N],[11,"deref","","",1,N],[11,"from","","",1,[[["bytesmut"]],["bytes"]]],[11,"from","","",1,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",1,[[["string"]],["bytes"]]],[11,"from","","",1,N],[11,"from","","",1,[[["str"]],["bytes"]]],[11,"from_iter","","",2,[[["t"]],["self"]]],[11,"from_iter","","",1,[[["t"]],["self"]]],[11,"eq","","",1,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["bytes"]],["ordering"]]],[11,"default","","",1,[[],["bytes"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"borrow","","",1,N],[11,"into_iter","","",1,N],[11,"extend","","",1,[[["self"],["t"]]]],[11,"extend","","",1,[[["self"],["t"]]]],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,[[["usize"]],["bytesmut"]]],[11,"new","","Creates a new `BytesMut` with default capacity.",2,[[],["bytesmut"]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,[[["self"]],["usize"]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,[[["self"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,[[["self"]],["bytesmut"]]],[11,"split_to","","Splits the buffer into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",2,[[["self"]]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",2,[[["self"],["usize"],["u8"]]]],[11,"set_len","","Sets the length of the buffer.",2,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,[[["self"],["usize"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",2,N],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,[[["self"],["bytesmut"]]]],[11,"remaining_mut","","",2,[[["self"]],["usize"]]],[11,"advance_mut","","",2,[[["self"],["usize"]]]],[11,"bytes_mut","","",2,N],[11,"put_slice","","",2,N],[11,"put_u8","","",2,[[["self"],["u8"]]]],[11,"put_i8","","",2,[[["self"],["i8"]]]],[11,"into_buf","","",2,N],[11,"as_ref","","",2,N],[11,"deref","","",2,N],[11,"as_mut","","",2,N],[11,"deref_mut","","",2,N],[11,"from","","",2,[[["vec",["u8"]]],["bytesmut"]]],[11,"from","","",2,[[["string"]],["bytesmut"]]],[11,"from","","",2,N],[11,"from","","",2,[[["str"]],["bytesmut"]]],[11,"from","","",2,[[["bytes"]],["bytesmut"]]],[11,"eq","","",2,[[["self"],["bytesmut"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["bytesmut"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["bytesmut"]],["ordering"]]],[11,"default","","",2,[[],["bytesmut"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"borrow","","",2,N],[11,"borrow_mut","","",2,N],[11,"write_str","","",2,[[["self"],["str"]],["result"]]],[11,"write_fmt","","",2,[[["self"],["arguments"]],["result"]]],[11,"clone","","",2,[[["self"]],["bytesmut"]]],[11,"into_iter","","",2,N],[11,"extend","","",2,[[["self"],["t"]]]],[11,"extend","","",2,[[["self"],["t"]]]],[11,"eq","","",2,N],[11,"partial_cmp","","",2,N],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,N],[11,"partial_cmp","","",1,N],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",2,[[["self"],["bytes"]],["bool"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","bytes","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"IntoBuf","bytes","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"clone","","",12,[[["self"]],["bigendian"]]],[11,"clone","","",13,[[["self"]],["littleendian"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",12,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"cmp","","",12,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["littleendian"]],["ordering"]]],[11,"default","","",12,[[],["bigendian"]]],[11,"default","","",13,[[],["littleendian"]]],[11,"hash","","",13,N],[11,"hash","","",12,N],[11,"read_u16","","",12,N],[11,"read_u32","","",12,N],[11,"read_u64","","",12,N],[11,"read_uint","","",12,N],[11,"write_u16","","",12,N],[11,"write_u32","","",12,N],[11,"write_u64","","",12,N],[11,"write_uint","","",12,N],[11,"read_u16_into","","",12,N],[11,"read_u32_into","","",12,N],[11,"read_u64_into","","",12,N],[11,"write_u16_into","","",12,N],[11,"write_u32_into","","",12,N],[11,"write_u64_into","","",12,N],[11,"from_slice_u16","","",12,N],[11,"from_slice_u32","","",12,N],[11,"from_slice_u64","","",12,N],[11,"from_slice_f32","","",12,N],[11,"from_slice_f64","","",12,N],[11,"read_u16","","",13,N],[11,"read_u32","","",13,N],[11,"read_u64","","",13,N],[11,"read_uint","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_uint","","",13,N],[11,"read_u16_into","","",13,N],[11,"read_u32_into","","",13,N],[11,"read_u64_into","","",13,N],[11,"write_u16_into","","",13,N],[11,"write_u32_into","","",13,N],[11,"write_u64_into","","",13,N],[11,"from_slice_u16","","",13,N],[11,"from_slice_u32","","",13,N],[11,"from_slice_u64","","",13,N],[11,"from_slice_f32","","",13,N],[11,"from_slice_f64","","",13,N],[11,"eq","","",13,[[["self"],["littleendian"]],["bool"]]],[11,"eq","","",12,[[["self"],["bigendian"]],["bool"]]],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["chrono"]={"doc":"Chrono: Date and Time for Rust","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"Date","","ISO 8601 calendar date with time zone.",N,N],[3,"DateTime","","ISO 8601 combined date and time with time zone.",N,N],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",N,N],[4,"SecondsFormat","","Specific formatting options for seconds. This may be extended in the future, so exhaustive matching in external code is not recommended.",N,N],[13,"Secs","","Format whole seconds only, with no decimal point nor subseconds.",0,N],[13,"Millis","","Use fixed 3 subsecond digits. This corresponds to Fixed::Nanosecond3.",0,N],[13,"Micros","","Use fixed 6 subsecond digits. This corresponds to Fixed::Nanosecond6.",0,N],[13,"Nanos","","Use fixed 9 subsecond digits. This corresponds to Fixed::Nanosecond9.",0,N],[13,"AutoSi","","Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available non-zero sub-second digits.  This corresponds to Fixed::Nanosecond.",0,N],[4,"Weekday","","The day of week.",N,N],[13,"Mon","","Monday.",1,N],[13,"Tue","","Tuesday.",1,N],[13,"Wed","","Wednesday.",1,N],[13,"Thu","","Thursday.",1,N],[13,"Fri","","Friday.",1,N],[13,"Sat","","Saturday.",1,N],[13,"Sun","","Sunday.",1,N],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",N,N],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",N,N],[3,"Utc","chrono::offset","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",N,N],[3,"FixedOffset","","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",N,N],[3,"Local","","The local timescale. This is implemented via the standard `time` crate.",N,N],[4,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types.",N,N],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",2,N],[13,"Single","","Given local time representation has a single unique result.",2,N],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",2,N],[11,"clone","","",3,[[["self"]],["utc"]]],[11,"eq","","",3,[[["self"],["utc"]],["bool"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",3,[[],["date",["utc"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,[[],["datetime",["utc"]]]],[11,"from_offset","","",3,[[["utc"]],["utc"]]],[11,"offset_from_local_date","","",3,[[["self"],["naivedate"]],["localresult",["utc"]]]],[11,"offset_from_local_datetime","","",3,[[["self"],["naivedatetime"]],["localresult",["utc"]]]],[11,"offset_from_utc_date","","",3,[[["self"],["naivedate"]],["utc"]]],[11,"offset_from_utc_datetime","","",3,[[["self"],["naivedatetime"]],["utc"]]],[11,"fix","","",3,[[["self"]],["fixedoffset"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"ne","","",4,[[["self"],["fixedoffset"]],["bool"]]],[11,"hash","","",4,N],[11,"clone","","",4,[[["self"]],["fixedoffset"]]],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["fixedoffset"]]],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",4,[[["i32"]],["option",["fixedoffset"]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",4,[[["self"]],["i32"]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",4,[[["self"]],["i32"]]],[11,"from_offset","","",4,[[["fixedoffset"]],["fixedoffset"]]],[11,"offset_from_local_date","","",4,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",4,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",4,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",4,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"fix","","",4,[[["self"]],["fixedoffset"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"add","chrono","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"sub","","",5,[[["self"],["fixedoffset"]],["datetime"]]],[11,"clone","chrono::offset","",6,[[["self"]],["local"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"today","","Returns a `Date` which corresponds to the current date.",6,[[],["date",["local"]]]],[11,"now","","Returns a `DateTime` which corresponds to the current date.",6,[[],["datetime",["local"]]]],[11,"from_offset","","",6,[[["fixedoffset"]],["local"]]],[11,"offset_from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["fixedoffset"]]]],[11,"offset_from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["fixedoffset"]]]],[11,"offset_from_utc_date","","",6,[[["self"],["naivedate"]],["fixedoffset"]]],[11,"offset_from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["fixedoffset"]]],[11,"from_local_date","","",6,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","",6,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[11,"from_utc_date","","",6,[[["self"],["naivedate"]],["date",["local"]]]],[11,"from_utc_datetime","","",6,[[["self"],["naivedatetime"]],["datetime",["local"]]]],[8,"Offset","","The offset from the local time to UTC.",N,N],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",7,[[["self"]],["fixedoffset"]]],[8,"TimeZone","","The time zone.",N,N],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",8,N],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["date"]]],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"],["u32"]],["localresult",["date"]]]],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["date"]]],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,[[["self"],["i32"],["u32"]],["localresult",["date"]]]],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["date"]]],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",8,[[["self"],["i32"],["u32"],["weekday"]],["localresult",["date"]]]],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["datetime"]]],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",8,[[["self"],["i64"],["u32"]],["localresult",["datetime"]]]],[11,"timestamp_millis","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["datetime"]]],[11,"timestamp_millis_opt","","Makes a new `DateTime` from the number of non-leap milliseconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",8,[[["self"],["i64"]],["localresult",["datetime"]]]],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",8,[[["self"],["str"],["str"]],["parseresult",["datetime"]]]],[10,"from_offset","","Reconstructs the time zone from the offset.",8,N],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",8,[[["self"],["naivedate"]],["localresult"]]],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult"]]],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",8,[[["self"],["naivedate"]],["localresult",["date"]]]],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",8,[[["self"],["naivedatetime"]],["localresult",["datetime"]]]],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",8,N],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",8,N],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedate"]],["date"]]],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",8,[[["self"],["naivedatetime"]],["datetime"]]],[11,"clone","","",2,[[["self"]],["localresult"]]],[11,"eq","","",2,[[["self"],["localresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["localresult"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,[[["self"]],["option"]]],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,[[["self"]],["option"]]],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",2,[[["self"],["f"]],["localresult"]]],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",2,[[["self"],["naivetime"]],["localresult",["datetime"]]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",2,[[["self"],["u32"],["u32"],["u32"],["u32"]],["localresult",["datetime"]]]],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,[[["self"]],["t"]]],[0,"naive","chrono","Date and time types which do not concern about the timezones.",N,N],[3,"NaiveDate","chrono::naive","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",N,N],[3,"IsoWeek","","ISO 8601 week.",N,N],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",N,N],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",N,N],[11,"eq","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ne","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"hash","","",9,N],[11,"partial_cmp","","",9,[[["self"],["naivedate"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"le","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"gt","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"ge","","",9,[[["self"],["naivedate"]],["bool"]]],[11,"cmp","","",9,[[["self"],["naivedate"]],["ordering"]]],[11,"clone","","",9,[[["self"]],["naivedate"]]],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["naivedate"]]],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",9,[[["i32"],["u32"],["u32"]],["option",["naivedate"]]]],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["naivedate"]]],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",9,[[["i32"],["u32"]],["option",["naivedate"]]]],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["naivedate"]]],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",9,[[["i32"],["u32"],["weekday"]],["option",["naivedate"]]]],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["naivedate"]]],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",9,[[["i32"]],["option",["naivedate"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",9,[[["str"],["str"]],["parseresult",["naivedate"]]]],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",9,[[["self"],["naivetime"]],["naivedatetime"]]],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",9,[[["self"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["naivedatetime"]]],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",9,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["naivedatetime"]]]],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["naivedate"]]],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["naivedate"]]],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",9,[[["self"]],["option",["naivedate"]]]],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",9,[[["self"],["oldduration"]],["option",["naivedate"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",9,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",9,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",9,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",9,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",9,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",9,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",9,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",9,[[["self"]],["weekday"]]],[11,"iso_week","","",9,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",9,[[["self"],["i32"]],["option",["naivedate"]]]],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",9,[[["self"],["u32"]],["option",["naivedate"]]]],[11,"add","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"add_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["oldduration"]],["naivedate"]]],[11,"sub_assign","","",9,[[["self"],["oldduration"]]]],[11,"sub","","",9,[[["self"],["naivedate"]],["oldduration"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",9,[[["str"]],["parseresult",["naivedate"]]]],[11,"eq","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ne","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["isoweek"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"le","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"gt","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"ge","","",10,[[["self"],["isoweek"]],["bool"]]],[11,"cmp","","",10,[[["self"],["isoweek"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["isoweek"]]],[11,"year","","Returns the year number for this ISO week.",10,[[["self"]],["i32"]]],[11,"week","","Returns the ISO week number starting from 1.",10,[[["self"]],["u32"]]],[11,"week0","","Returns the ISO week number starting from 0.",10,[[["self"]],["u32"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ne","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["naivetime"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"le","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"gt","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"ge","","",11,[[["self"],["naivetime"]],["bool"]]],[11,"cmp","","",11,[[["self"],["naivetime"]],["ordering"]]],[11,"clone","","",11,[[["self"]],["naivetime"]]],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",11,[[["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["naivetime"]]],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",11,[[["u32"],["u32"],["u32"],["u32"]],["option",["naivetime"]]]],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["naivetime"]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",11,[[["u32"],["u32"]],["option",["naivetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",11,[[["str"],["str"]],["parseresult",["naivetime"]]]],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",11,N],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",11,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"hour","","Returns the hour number from 0 to 23.",11,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",11,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",11,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",11,[[["self"],["u32"]],["option",["naivetime"]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",11,[[["self"]],["u32"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"add","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"add_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["oldduration"]],["naivetime"]]],[11,"sub_assign","","",11,[[["self"],["oldduration"]]]],[11,"sub","","",11,[[["self"],["naivetime"]],["oldduration"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",11,[[["str"]],["parseresult",["naivetime"]]]],[11,"eq","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ne","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["naivedatetime"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"le","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"gt","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"ge","","",12,[[["self"],["naivedatetime"]],["bool"]]],[11,"cmp","","",12,[[["self"],["naivedatetime"]],["ordering"]]],[11,"clone","","",12,[[["self"]],["naivedatetime"]]],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",12,[[["naivedate"],["naivetime"]],["naivedatetime"]]],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["naivedatetime"]]],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",12,[[["i64"],["u32"]],["option",["naivedatetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",12,[[["str"],["str"]],["parseresult",["naivedatetime"]]]],[11,"date","","Retrieves a date component.",12,[[["self"]],["naivedate"]]],[11,"time","","Retrieves a time component.",12,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap milliseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap nanoseconds since midnight on January 1, 1970.",12,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",12,[[["self"]],["u32"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",12,[[["self"],["oldduration"]],["option",["naivedatetime"]]]],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",12,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",12,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","Returns the year number in the calendar date.",12,[[["self"]],["i32"]]],[11,"month","","Returns the month number starting from 1.",12,[[["self"]],["u32"]]],[11,"month0","","Returns the month number starting from 0.",12,[[["self"]],["u32"]]],[11,"day","","Returns the day of month starting from 1.",12,[[["self"]],["u32"]]],[11,"day0","","Returns the day of month starting from 0.",12,[[["self"]],["u32"]]],[11,"ordinal","","Returns the day of year starting from 1.",12,[[["self"]],["u32"]]],[11,"ordinal0","","Returns the day of year starting from 0.",12,[[["self"]],["u32"]]],[11,"weekday","","Returns the day of week.",12,[[["self"]],["weekday"]]],[11,"iso_week","","",12,[[["self"]],["isoweek"]]],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",12,[[["self"],["i32"]],["option",["naivedatetime"]]]],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hour","","Returns the hour number from 0 to 23.",12,[[["self"]],["u32"]]],[11,"minute","","Returns the minute number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"second","","Returns the second number from 0 to 59.",12,[[["self"]],["u32"]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",12,[[["self"]],["u32"]]],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",12,[[["self"],["u32"]],["option",["naivedatetime"]]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"add","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"add_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["oldduration"]],["naivedatetime"]]],[11,"sub_assign","","",12,[[["self"],["oldduration"]]]],[11,"sub","","",12,[[["self"],["naivedatetime"]],["oldduration"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",12,[[["str"]],["parseresult",["naivedatetime"]]]],[17,"MIN_DATE","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",N,N],[17,"MAX_DATE","","The maximum possible `NaiveDate` (December 31, 262143 CE).",N,N],[11,"clone","chrono","",13,[[["self"]],["date"]]],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",13,N],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",13,[[["self"],["naivetime"]],["option",["datetime"]]]],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["datetime"]]],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",13,[[["self"],["u32"],["u32"],["u32"],["u32"]],["option",["datetime"]]]],[11,"succ","","Makes a new `Date` for the next date.",13,[[["self"]],["date"]]],[11,"succ_opt","","Makes a new `Date` for the next date.",13,[[["self"]],["option",["date"]]]],[11,"pred","","Makes a new `Date` for the prior date.",13,[[["self"]],["date"]]],[11,"pred_opt","","Makes a new `Date` for the prior date.",13,[[["self"]],["option",["date"]]]],[11,"offset","","Retrieves an associated offset from UTC.",13,N],[11,"timezone","","Retrieves an associated time zone.",13,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",13,[[["self"],["tz2"]],["date"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",13,[[["self"],["oldduration"]],["option",["date"]]]],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",13,[[["self"],["date"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC date.",13,[[["self"]],["naivedate"]]],[11,"naive_local","","Returns a view to the naive local date.",13,[[["self"]],["naivedate"]]],[11,"format_with_items","","Formats the date with the specified formatting items.",13,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",13,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",13,[[["self"]],["i32"]]],[11,"month","","",13,[[["self"]],["u32"]]],[11,"month0","","",13,[[["self"]],["u32"]]],[11,"day","","",13,[[["self"]],["u32"]]],[11,"day0","","",13,[[["self"]],["u32"]]],[11,"ordinal","","",13,[[["self"]],["u32"]]],[11,"ordinal0","","",13,[[["self"]],["u32"]]],[11,"weekday","","",13,[[["self"]],["weekday"]]],[11,"iso_week","","",13,[[["self"]],["isoweek"]]],[11,"with_year","","",13,[[["self"],["i32"]],["option",["date"]]]],[11,"with_month","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_month0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_day0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"with_ordinal0","","",13,[[["self"],["u32"]],["option",["date"]]]],[11,"eq","","",13,[[["self"],["date"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["date"]],["option",["ordering"]]]],[11,"cmp","","",13,[[["self"],["date"]],["ordering"]]],[11,"hash","","",13,[[["self"],["h"]]]],[11,"add","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["oldduration"]],["date"]]],[11,"sub","","",13,[[["self"],["date"]],["oldduration"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["secondsformat"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["secondsformat"]],["bool"]]],[11,"clone","","",5,[[["self"]],["datetime"]]],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",5,N],[11,"date","","Retrieves a date component.",5,[[["self"]],["date"]]],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",5,[[["self"]],["naivetime"]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",5,[[["self"]],["i64"]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January 1, 1970 UTC",5,[[["self"]],["i64"]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",5,[[["self"]],["u32"]]],[11,"offset","","Retrieves an associated offset from UTC.",5,N],[11,"timezone","","Retrieves an associated time zone.",5,[[["self"]],["tz"]]],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",5,[[["self"],["tz2"]],["datetime"]]],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",5,[[["self"],["oldduration"]],["option",["datetime"]]]],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",5,[[["self"],["datetime"]],["oldduration"]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",5,[[["self"]],["naivedatetime"]]],[11,"naive_local","","Returns a view to the naive local datetime.",5,[[["self"]],["naivedatetime"]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",5,[[["str"]],["parseresult",["datetime"]]]],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",5,[[["str"],["str"]],["parseresult",["datetime"]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",5,[[["self"]],["string"]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",5,[[["self"]],["string"]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with subseconds formatted as per a `SecondsFormat`. If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as per Fixed::TimezoneOffsetColonZ. If passed `use_z` false, use Fixed::TimezoneOffsetColon.",5,[[["self"],["secondsformat"],["bool"]],["string"]]],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",5,[[["self"],["i"]],["delayedformat"]]],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",5,[[["self"],["str"]],["delayedformat",["strftimeitems"]]]],[11,"year","","",5,[[["self"]],["i32"]]],[11,"month","","",5,[[["self"]],["u32"]]],[11,"month0","","",5,[[["self"]],["u32"]]],[11,"day","","",5,[[["self"]],["u32"]]],[11,"day0","","",5,[[["self"]],["u32"]]],[11,"ordinal","","",5,[[["self"]],["u32"]]],[11,"ordinal0","","",5,[[["self"]],["u32"]]],[11,"weekday","","",5,[[["self"]],["weekday"]]],[11,"iso_week","","",5,[[["self"]],["isoweek"]]],[11,"with_year","","",5,[[["self"],["i32"]],["option",["datetime"]]]],[11,"with_month","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_month0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_day0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_ordinal0","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"hour","","",5,[[["self"]],["u32"]]],[11,"minute","","",5,[[["self"]],["u32"]]],[11,"second","","",5,[[["self"]],["u32"]]],[11,"nanosecond","","",5,[[["self"]],["u32"]]],[11,"with_hour","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_minute","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_second","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"with_nanosecond","","",5,[[["self"],["u32"]],["option",["datetime"]]]],[11,"eq","","",5,[[["self"],["datetime"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["datetime"]],["option",["ordering"]]]],[11,"cmp","","",5,[[["self"],["datetime"]],["ordering"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"add","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["oldduration"]],["datetime"]]],[11,"sub","","",5,[[["self"],["datetime"]],["oldduration"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from_str","","",5,[[["str"]],["parseresult",["datetime"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["utc"]]]],[11,"from","","",5,[[["systemtime"]],["datetime",["local"]]]],[0,"format","","Formatting (and parsing) utilities for date and time.",N,N],[3,"Parsed","chrono::format","Parsed parts of date and time. There are two classes of methods:",N,N],[12,"year","","Year.",14,N],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear","","Year in the ISO week date.",14,N],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",14,N],[12,"month","","Month (1--12).",14,N],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",14,N],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",14,N],[12,"weekday","","Day of the week.",14,N],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",14,N],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",14,N],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",14,N],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",14,N],[12,"minute","","Minute number (0--59).",14,N],[12,"second","","Second number (0--60, accounting for leap seconds).",14,N],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",14,N],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",14,N],[12,"offset","","Offset from the local time to UTC, in seconds.",14,N],[3,"InternalNumeric","","An opaque type representing numeric item types for internal uses only.",N,N],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",N,N],[3,"ParseError","","An error from the `parse` function.",N,N],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",N,N],[4,"Pad","","Padding characters for numeric items.",N,N],[13,"None","","No padding.",15,N],[13,"Zero","","Zero (`0`) padding.",15,N],[13,"Space","","Space padding.",15,N],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",N,N],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",16,N],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",16,N],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",16,N],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",16,N],[13,"Month","","Month (FW=PW=2).",16,N],[13,"Day","","Day of the month (FW=PW=2).",16,N],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",16,N],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",16,N],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",16,N],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",16,N],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",16,N],[13,"Ordinal","","Day of the year (FW=PW=3).",16,N],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",16,N],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",16,N],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",16,N],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",16,N],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",16,N],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",16,N],[13,"Internal","","Internal uses only.",16,N],[4,"Fixed","","Fixed-format item types.",N,N],[13,"ShortMonthName","","Abbreviated month names.",17,N],[13,"LongMonthName","","Full month names.",17,N],[13,"ShortWeekdayName","","Abbreviated day of the week names.",17,N],[13,"LongWeekdayName","","Full day of the week names.",17,N],[13,"LowerAmPm","","AM/PM.",17,N],[13,"UpperAmPm","","AM/PM.",17,N],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",17,N],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",17,N],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",17,N],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",17,N],[13,"TimezoneName","","Timezone name.",17,N],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",17,N],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",17,N],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",17,N],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",17,N],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",17,N],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",17,N],[13,"Internal","","Internal uses only.",17,N],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",N,N],[13,"Literal","","A literally printed and parsed text.",18,N],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",18,N],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",18,N],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",18,N],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",18,N],[13,"Fixed","","Fixed-format item.",18,N],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",18,N],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",N,[[["parsed"],["str"],["i"]],["parseresult"]]],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",N,[[["formatter"],["option",["naivedate"]],["option",["naivetime"]],["option"],["i"]],["result"]]],[11,"clone","","",14,[[["self"]],["parsed"]]],[11,"eq","","",14,[[["self"],["parsed"]],["bool"]]],[11,"ne","","",14,[[["self"],["parsed"]],["bool"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"default","","",14,[[],["parsed"]]],[11,"new","","Returns the initial value of parsed parts.",14,[[],["parsed"]]],[11,"set_year","","Tries to set the `year` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_month","","Tries to set the `month` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_weekday","","Tries to set the `weekday` field from given value.",14,[[["self"],["weekday"]],["parseresult"]]],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_day","","Tries to set the `day` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",14,[[["self"],["bool"]],["parseresult"]]],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_minute","","Tries to set the `minute` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_second","","Tries to set the `second` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"set_offset","","Tries to set the `offset` field from given value.",14,[[["self"],["i64"]],["parseresult"]]],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",14,[[["self"]],["parseresult",["naivedate"]]]],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",14,[[["self"]],["parseresult",["naivetime"]]]],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",14,[[["self"],["i32"]],["parseresult",["naivedatetime"]]]],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",14,[[["self"]],["parseresult",["fixedoffset"]]]],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",14,[[["self"]],["parseresult",["datetime"]]]],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",14,[[["self"],["tz"]],["parseresult",["datetime"]]]],[0,"strftime","","`strftime`/`strptime`-inspired date and time formatting syntax.",N,N],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",N,N],[11,"clone","","",19,[[["self"]],["strftimeitems"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",19,[[["str"]],["strftimeitems"]]],[11,"next","","",19,[[["self"]],["option",["item"]]]],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",N,N],[11,"clone","","",15,[[["self"]],["pad"]]],[11,"eq","","",15,[[["self"],["pad"]],["bool"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["numeric"]]],[11,"eq","","",16,[[["self"],["numeric"]],["bool"]]],[11,"ne","","",16,[[["self"],["numeric"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"eq","","",20,[[["self"],["internalnumeric"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["fixed"]]],[11,"eq","","",17,[[["self"],["fixed"]],["bool"]]],[11,"ne","","",17,[[["self"],["fixed"]],["bool"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["internalfixed"]]],[11,"eq","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"ne","","",21,[[["self"],["internalfixed"]],["bool"]]],[11,"clone","","",18,[[["self"]],["item"]]],[11,"eq","","",18,[[["self"],["item"]],["bool"]]],[11,"ne","","",18,[[["self"],["item"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["parseerror"]]],[11,"eq","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",22,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"description","","",22,[[["self"]],["str"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",23,[[["option",["naivedate"]],["option",["naivetime"]],["i"]],["delayedformat"]]],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",23,[[["option",["naivedate"]],["option",["naivetime"]],["off"],["i"]],["delayedformat"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from_str","chrono","",1,[[["str"]],["result"]]],[17,"MIN_DATE","","The minimum possible `Date`.",N,N],[17,"MAX_DATE","","The maximum possible `Date`.",N,N],[8,"SubsecRound","","Extension trait for subsecond rounding or truncation to a maximum number of digits. Rounding can be used to decrease the error variance when serializing/persisting to lower precision. Truncation is the default behavior in Chrono display formatting.  Either can be used to guarantee equality (e.g. for testing) when round-tripping through a lower precision format.",N,N],[10,"round_subsecs","","Return a copy rounded to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified. Halfway values are rounded up (away from zero).",24,[[["self"],["u16"]],["self"]]],[10,"trunc_subsecs","","Return a copy truncated to the specified number of subsecond digits. With 9 or more digits, self is returned unmodified.",24,[[["self"],["u16"]],["self"]]],[8,"Datelike","","The common set of methods for date component.",N,N],[10,"year","","Returns the year number in the calendar date.",25,[[["self"]],["i32"]]],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",25,N],[10,"month","","Returns the month number starting from 1.",25,[[["self"]],["u32"]]],[10,"month0","","Returns the month number starting from 0.",25,[[["self"]],["u32"]]],[10,"day","","Returns the day of month starting from 1.",25,[[["self"]],["u32"]]],[10,"day0","","Returns the day of month starting from 0.",25,[[["self"]],["u32"]]],[10,"ordinal","","Returns the day of year starting from 1.",25,[[["self"]],["u32"]]],[10,"ordinal0","","Returns the day of year starting from 0.",25,[[["self"]],["u32"]]],[10,"weekday","","Returns the day of week.",25,[[["self"]],["weekday"]]],[10,"iso_week","","Returns the ISO week.",25,[[["self"]],["isoweek"]]],[10,"with_year","","Makes a new value with the year number changed.",25,[[["self"],["i32"]],["option"]]],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",25,[[["self"],["u32"]],["option"]]],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",25,[[["self"],["u32"]],["option"]]],[11,"num_days_from_ce","","Returns the number of days since January 1, Year 1 (aka Day 1) in the proleptic Gregorian calendar.",25,[[["self"]],["i32"]]],[8,"Timelike","","The common set of methods for time component.",N,N],[10,"hour","","Returns the hour number from 0 to 23.",26,[[["self"]],["u32"]]],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",26,N],[10,"minute","","Returns the minute number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"second","","Returns the second number from 0 to 59.",26,[[["self"]],["u32"]]],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",26,[[["self"]],["u32"]]],[10,"with_hour","","Makes a new value with the hour number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_minute","","Makes a new value with the minute number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_second","","Makes a new value with the second number changed.",26,[[["self"],["u32"]],["option"]]],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",26,[[["self"],["u32"]],["option"]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",26,[[["self"]],["u32"]]],[11,"eq","","",1,[[["self"],["weekday"]],["bool"]]],[11,"clone","","",1,[[["self"]],["weekday"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"succ","","The next day in the week.",1,[[["self"]],["weekday"]]],[11,"pred","","The previous day in the week.",1,[[["self"]],["weekday"]]],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",1,[[["self"]],["u32"]]],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",1,[[["self"]],["u32"]]],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",1,[[["self"]],["u32"]]],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",1,[[["self"]],["u32"]]],[11,"from_i64","","",1,[[["i64"]],["option",["weekday"]]]],[11,"from_u64","","",1,[[["u64"]],["option",["weekday"]]]],[11,"clone","","",27,[[["self"]],["parseweekdayerror"]]],[11,"eq","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"ne","","",27,[[["self"],["parseweekdayerror"]],["bool"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",28,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",28,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",28,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",28,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",28,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",28,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",28,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",28,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",28,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",28,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",28,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",28,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",28,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",28,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",28,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",28,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",28,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",28,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",28,[[["duration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",28,[[["self"]],["result",["duration","outofrangeerror"]]]],[11,"add","","",28,[[["self"],["duration"]],["duration"]]],[11,"clone","","",28,[[["self"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",28,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["duration"]],["bool"]]],[11,"le","","",28,[[["self"],["duration"]],["bool"]]],[11,"gt","","",28,[[["self"],["duration"]],["bool"]]],[11,"ge","","",28,[[["self"],["duration"]],["bool"]]],[11,"neg","","",28,[[["self"]],["duration"]]],[11,"sub","","",28,[[["self"],["duration"]],["duration"]]],[11,"cmp","","",28,[[["self"],["duration"]],["ordering"]]],[11,"mul","","",28,[[["self"],["i32"]],["duration"]]],[11,"div","","",28,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",28,[[["self"],["duration"]],["bool"]]],[11,"ne","","",28,[[["self"],["duration"]],["bool"]]],[11,"add","chrono::naive","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"sub","","",11,[[["self"],["fixedoffset"]],["naivetime"]]],[11,"add","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]],[11,"sub","","",12,[[["self"],["fixedoffset"]],["naivedatetime"]]]],"paths":[[4,"SecondsFormat"],[4,"Weekday"],[4,"LocalResult"],[3,"Utc"],[3,"FixedOffset"],[3,"DateTime"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"IsoWeek"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"Parsed"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"SubsecRound"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["colored"]={"doc":"Coloring terminal so simple, you already know how to do it !","items":[[3,"ColoredString","colored","A string that may have color and/or style applied to it.",N,N],[4,"Color","","The 8 standard colors.",N,N],[13,"Black","","",0,N],[13,"Red","","",0,N],[13,"Green","","",0,N],[13,"Yellow","","",0,N],[13,"Blue","","",0,N],[13,"Magenta","","",0,N],[13,"Cyan","","",0,N],[13,"White","","",0,N],[13,"BrightBlack","","",0,N],[13,"BrightRed","","",0,N],[13,"BrightGreen","","",0,N],[13,"BrightYellow","","",0,N],[13,"BrightBlue","","",0,N],[13,"BrightMagenta","","",0,N],[13,"BrightCyan","","",0,N],[13,"BrightWhite","","",0,N],[11,"clone","","",0,[[["self"]],["color"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["color"]],["bool"]]],[11,"to_fg_str","","",0,[[["self"]],["str"]]],[11,"to_bg_str","","",0,[[["self"]],["str"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from_str","","",0,[[["str"]],["result"]]],[0,"control","","A couple of functions to enable and disable coloring.",N,N],[3,"ShouldColorize","colored::control","",N,N],[3,"SHOULD_COLORIZE","","",N,N],[5,"set_override","","Use this to force colored to ignore the environment and always/never colorize See example/control.rs",N,[[["bool"]]]],[5,"unset_override","","Remove the manual override and let the environment decide if it's ok to colorize See example/control.rs",N,[[]]],[11,"deref","","",1,[[["self"]],["shouldcolorize"]]],[11,"initialize","","",1,[[["self"]]]],[11,"default","","",2,[[],["shouldcolorize"]]],[11,"from_env","","",2,[[],["self"]]],[11,"should_colorize","","",2,[[["self"]],["bool"]]],[11,"set_override","","",2,[[["self"],["bool"]]]],[11,"unset_override","","",2,[[["self"]]]],[8,"Colorize","colored","The trait that enables something to be given color.",N,N],[10,"black","","",3,[[["self"]],["coloredstring"]]],[10,"red","","",3,[[["self"]],["coloredstring"]]],[10,"green","","",3,[[["self"]],["coloredstring"]]],[10,"yellow","","",3,[[["self"]],["coloredstring"]]],[10,"blue","","",3,[[["self"]],["coloredstring"]]],[10,"magenta","","",3,[[["self"]],["coloredstring"]]],[10,"purple","","",3,[[["self"]],["coloredstring"]]],[10,"cyan","","",3,[[["self"]],["coloredstring"]]],[10,"white","","",3,[[["self"]],["coloredstring"]]],[10,"bright_black","","",3,[[["self"]],["coloredstring"]]],[10,"bright_red","","",3,[[["self"]],["coloredstring"]]],[10,"bright_green","","",3,[[["self"]],["coloredstring"]]],[10,"bright_yellow","","",3,[[["self"]],["coloredstring"]]],[10,"bright_blue","","",3,[[["self"]],["coloredstring"]]],[10,"bright_magenta","","",3,[[["self"]],["coloredstring"]]],[10,"bright_purple","","",3,[[["self"]],["coloredstring"]]],[10,"bright_cyan","","",3,[[["self"]],["coloredstring"]]],[10,"bright_white","","",3,[[["self"]],["coloredstring"]]],[10,"color","","",3,[[["self"],["s"]],["coloredstring"]]],[10,"on_black","","",3,[[["self"]],["coloredstring"]]],[10,"on_red","","",3,[[["self"]],["coloredstring"]]],[10,"on_green","","",3,[[["self"]],["coloredstring"]]],[10,"on_yellow","","",3,[[["self"]],["coloredstring"]]],[10,"on_blue","","",3,[[["self"]],["coloredstring"]]],[10,"on_magenta","","",3,[[["self"]],["coloredstring"]]],[10,"on_purple","","",3,[[["self"]],["coloredstring"]]],[10,"on_cyan","","",3,[[["self"]],["coloredstring"]]],[10,"on_white","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_black","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_red","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_green","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_yellow","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_blue","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_magenta","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_purple","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_cyan","","",3,[[["self"]],["coloredstring"]]],[10,"on_bright_white","","",3,[[["self"]],["coloredstring"]]],[10,"on_color","","",3,[[["self"],["s"]],["coloredstring"]]],[10,"clear","","",3,[[["self"]],["coloredstring"]]],[10,"normal","","",3,[[["self"]],["coloredstring"]]],[10,"bold","","",3,[[["self"]],["coloredstring"]]],[10,"dimmed","","",3,[[["self"]],["coloredstring"]]],[10,"italic","","",3,[[["self"]],["coloredstring"]]],[10,"underline","","",3,[[["self"]],["coloredstring"]]],[10,"blink","","",3,[[["self"]],["coloredstring"]]],[10,"reverse","","Historical name of `Colorize::reversed`. May be removed in a future version. Please use `Colorize::reversed` instead",3,[[["self"]],["coloredstring"]]],[10,"reversed","","This should be preferred to `Colorize::reverse`.",3,[[["self"]],["coloredstring"]]],[10,"hidden","","",3,[[["self"]],["coloredstring"]]],[10,"strikethrough","","",3,[[["self"]],["coloredstring"]]],[11,"clone","","",4,[[["self"]],["coloredstring"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["coloredstring"]],["bool"]]],[11,"ne","","",4,[[["self"],["coloredstring"]],["bool"]]],[11,"is_plain","","",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"deref","","",4,[[["self"]],["str"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"black","","",4,[[["self"]],["coloredstring"]]],[11,"red","","",4,[[["self"]],["coloredstring"]]],[11,"green","","",4,[[["self"]],["coloredstring"]]],[11,"yellow","","",4,[[["self"]],["coloredstring"]]],[11,"blue","","",4,[[["self"]],["coloredstring"]]],[11,"magenta","","",4,[[["self"]],["coloredstring"]]],[11,"purple","","",4,[[["self"]],["coloredstring"]]],[11,"cyan","","",4,[[["self"]],["coloredstring"]]],[11,"white","","",4,[[["self"]],["coloredstring"]]],[11,"bright_black","","",4,[[["self"]],["coloredstring"]]],[11,"bright_red","","",4,[[["self"]],["coloredstring"]]],[11,"bright_green","","",4,[[["self"]],["coloredstring"]]],[11,"bright_yellow","","",4,[[["self"]],["coloredstring"]]],[11,"bright_blue","","",4,[[["self"]],["coloredstring"]]],[11,"bright_magenta","","",4,[[["self"]],["coloredstring"]]],[11,"bright_purple","","",4,[[["self"]],["coloredstring"]]],[11,"bright_cyan","","",4,[[["self"]],["coloredstring"]]],[11,"bright_white","","",4,[[["self"]],["coloredstring"]]],[11,"color","","",4,[[["self"],["s"]],["coloredstring"]]],[11,"on_black","","",4,[[["self"]],["coloredstring"]]],[11,"on_red","","",4,[[["self"]],["coloredstring"]]],[11,"on_green","","",4,[[["self"]],["coloredstring"]]],[11,"on_yellow","","",4,[[["self"]],["coloredstring"]]],[11,"on_blue","","",4,[[["self"]],["coloredstring"]]],[11,"on_magenta","","",4,[[["self"]],["coloredstring"]]],[11,"on_purple","","",4,[[["self"]],["coloredstring"]]],[11,"on_cyan","","",4,[[["self"]],["coloredstring"]]],[11,"on_white","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_black","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_red","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_green","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_yellow","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_blue","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_magenta","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_purple","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_cyan","","",4,[[["self"]],["coloredstring"]]],[11,"on_bright_white","","",4,[[["self"]],["coloredstring"]]],[11,"on_color","","",4,[[["self"],["s"]],["coloredstring"]]],[11,"clear","","",4,[[["self"]],["coloredstring"]]],[11,"normal","","",4,[[["self"]],["coloredstring"]]],[11,"bold","","",4,[[["self"]],["coloredstring"]]],[11,"dimmed","","",4,[[["self"]],["coloredstring"]]],[11,"italic","","",4,[[["self"]],["coloredstring"]]],[11,"underline","","",4,[[["self"]],["coloredstring"]]],[11,"blink","","",4,[[["self"]],["coloredstring"]]],[11,"reverse","","",4,[[["self"]],["coloredstring"]]],[11,"reversed","","",4,[[["self"]],["coloredstring"]]],[11,"hidden","","",4,[[["self"]],["coloredstring"]]],[11,"strikethrough","","",4,[[["self"]],["coloredstring"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Color"],[3,"SHOULD_COLORIZE"],[3,"ShouldColorize"],[8,"Colorize"],[3,"ColoredString"]]};
searchIndex["crossbeam"]={"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"CachePadded","","Pad `T` to the length of a cacheline.",N,N],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[0,"epoch","","Epoch-based memory management",N,N],[3,"Atomic","crossbeam::epoch","Like `std::sync::atomic::AtomicPtr`.",N,N],[3,"Guard","","An RAII-style guard for pinning the current epoch.",N,N],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",N,N],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",N,N],[5,"pin","","Pin the current epoch.",N,[[],["guard"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"null","","",0,[[],["atomic"]]],[11,"new","","Create a new atomic pointer",0,[[["t"]],["atomic"]]],[11,"load","","Do an atomic load with the given memory ordering.",0,[[["self"],["ordering"],["guard"]],["option",["shared"]]]],[11,"store","","Do an atomic store with the given memory ordering.",0,[[["self"],["option",["owned"]],["ordering"]]]],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,[[["self"],["owned"],["ordering"],["guard"]],["shared"]]],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,[[["self"],["option",["shared"]],["ordering"]]]],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,[[["self"],["option",["shared"]],["option",["owned"]],["ordering"]],["result",["option"]]]],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,[[["self"],["option",["shared"]],["owned"],["ordering"],["guard"]],["result",["shared","owned"]]]],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,[[["self"],["option",["shared"]],["option",["shared"]],["ordering"]],["bool"]]],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,[[["self"],["option",["owned"]],["ordering"],["guard"]],["option",["shared"]]]],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,[[["self"],["option",["shared"]],["ordering"],["guard"]],["option",["shared"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,[[["self"],["shared"]]]],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Move `t` to a new heap allocation.",2,[[["t"]],["owned"]]],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,[[["self"]],["t"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"eq","","",3,[[["self"],["shared"]],["bool"]]],[11,"ne","","",3,[[["self"],["shared"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["shared"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"as_raw","","",3,N],[0,"sync","crossbeam","Synchronization primitives.",N,N],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",N,N],[3,"AtomicOption","","",N,N],[3,"TreiberStack","","Treiber's lock-free stack.",N,N],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",N,N],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"drop","","",4,[[["self"]]]],[11,"new","","",4,[[],["atomicoption"]]],[11,"swap_box","","",4,[[["self"],["box"],["ordering"]],["option",["box"]]]],[11,"swap","","",4,[[["self"],["t"],["ordering"]],["option"]]],[11,"take","","",4,[[["self"],["ordering"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty queue.",5,[[],["msqueue"]]],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",5,[[["self"],["t"]]]],[11,"is_empty","","Check if this queue is empty.",5,[[["self"]],["bool"]]],[11,"try_pop","","Attempt to dequeue from the front.",5,[[["self"]],["option"]]],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty stack.",6,[[],["treiberstack"]]],[11,"push","","Push `t` on top of the stack.",6,[[["self"],["t"]]]],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",6,[[["self"]],["option"]]],[11,"try_pop","","Attempt to pop the top element of the stack.",6,[[["self"]],["option"]]],[11,"is_empty","","Check if this queue is empty.",6,[[["self"]],["bool"]]],[11,"drop","","",6,[[["self"]]]],[11,"default","","",6,[[],["self"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty queue.",7,[[],["segqueue"]]],[11,"push","","Add `t` to the back of the queue.",7,[[["self"],["t"]]]],[11,"is_empty","","Judge if the queue is empty.",7,[[["self"]],["bool"]]],[11,"try_pop","","Attempt to dequeue from the front.",7,[[["self"]],["option"]]],[11,"drop","","",7,[[["self"]]]],[0,"chase_lev","","A lock-free concurrent work-stealing deque",N,N],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",N,N],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",N,N],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",N,N],[13,"Empty","","The deque was empty at the time of stealing",8,N],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",8,N],[13,"Data","","The stealer has successfully stolen some data.",8,N],[5,"deque","","Creates a new empty deque",N,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["steal"]],["bool"]]],[11,"ne","","",8,[[["self"],["steal"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"push","","Pushes data onto the front of this work queue.",9,[[["self"],["t"]]]],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",9,[[["self"]],["option"]]],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",10,[[["self"]],["steal"]]],[11,"clone","","",10,[[["self"]],["stealer"]]],[11,"fmt","crossbeam::sync","",11,[[["self"],["formatter"]],["result"]]],[11,"drop","","",11,[[["self"]]]],[11,"new","","Creates a new `ArcCell`.",11,[[["arc"]],["arccell"]]],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",11,[[["self"],["arc"]],["arc"]]],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",11,[[["self"]],["arc"]]],[11,"fmt","crossbeam","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",12,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",12,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",12,[[["self"]],["scopedthreadbuilder"]]],[11,"join","","Join the scoped thread, returning the result it produced.",13,[[["self"]],["t"]]],[11,"thread","","Get the underlying thread handle.",13,[[["self"]],["thread"]]],[11,"drop","","",12,[[["self"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"zeroed","","A const fn equivalent to mem::zeroed().",14,[[],["cachepadded"]]],[11,"new","","Wrap `t` with cacheline padding.",14,[[["t"]],["cachepadded"]]],[11,"deref","","",14,[[["self"]],["t"]]],[11,"deref_mut","","",14,[[["self"]],["t"]]],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",N,N]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"CachePadded"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[3,"CachePadded","crossbeam_utils","Pads `T` to the length of a cache line.",N,N],[11,"clone","","",0,[[["self"]],["cachepadded"]]],[11,"default","","",0,[[],["cachepadded"]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"thread","","",N,N],[3,"Scope","crossbeam_utils::thread","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unchecked","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unchecked","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",1,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",1,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",3,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",3,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",3,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",2,[[["self"]],["result"]]],[11,"thread","","Get the underlying thread handle.",2,[[["self"]],["thread"]]],[11,"drop","","",1,[[["self"]]]],[8,"AtomicConsume","crossbeam_utils","Trait which allows reading from an atomic type with \"consume\" ordering.",N,N],[16,"Val","","Type returned by `load_consume`.",4,N],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,N]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"],[8,"AtomicConsume"]]};
searchIndex["failure"]={"doc":"An experimental new error-handling library. Guide-style introduction is available here.","items":[[3,"Backtrace","failure","A `Backtrace`.",N,N],[3,"Compat","","A compatibility wrapper around an error type from this crate.",N,N],[3,"Context","","An error with context around it.",N,N],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",N,N],[3,"Error","","The `Error` type, which can contain any failure.",N,N],[3,"Causes","","A iterator over the causes of a `Fail`",N,N],[5,"err_msg","","Constructs a `Fail` type from a string.",N,[[["d"]],["error"]]],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,[[],["backtrace"]]],[11,"default","","",0,[[],["backtrace"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["compat"]]],[11,"eq","","",1,[[["self"],["compat"]],["bool"]]],[11,"ne","","",1,[[["self"],["compat"]],["bool"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["compat"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Unwraps this into the inner error.",1,[[["self"]],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",1,[[["self"]],["e"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"new","","Creates a new context without an underlying error message.",2,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",2,[[["self"]],["d"]]],[11,"cause","","",2,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["d"]],["context"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,[[["e"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["f"]],["error"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,[[["box",["stderror"]]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this `Error` contains.",4,[[["self"]],["fail"]]],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",4,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps `Error` in a compatibility type.",4,[[["self"]],["compat",["error"]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,[[["self"]],["result",["error"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the cause of the fail as the first item and the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",4,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,[[["self"]],["option"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",4,[[["self"]],["causes"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",4,[[["self"]],["fail"]]],[6,"Fallible","","A common result with an `Error`.",N,N],[8,"ResultExt","","Extension methods for `Result`.",N,N],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,[[["self"]],["result",["compat"]]]],[10,"context","","Wraps the error type in a context type.",5,[[["self"],["d"]],["result",["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,[[["self"],["f"]],["result",["context"]]]],[8,"Fail","","The `Fail` trait.",N,N],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,[[["self"]],["option",["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,[[["self"]],["option",["backtrace"]]]],[11,"context","","Provides context for this failure.",6,[[["self"],["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,[[["self"]],["compat"]]],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,[[["self"]],["option"]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,[[["self"]],["option"]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the cause of this fail as the first item and the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the current as the first item up to the `root_cause` as the final item.",6,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",6,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",6,[[["self"]],["causes"]]],[11,"next","","",7,[[["self"]],["option",["fail"]]]],[14,"bail","","Exits a function early with an `Error`.",N,N],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",N,N],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",N,N]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"]={"doc":"","items":[[5,"Fail","failure_derive","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["fnv"]={"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",N,N],[6,"FnvBuildHasher","","A builder for default FNV hashers.",N,N],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",N,N],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",N,N],[11,"default","","",0,[[],["fnvhasher"]]],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,[[["u64"]],["fnvhasher"]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",0,N]],"paths":[[3,"FnvHasher"]]};
searchIndex["futures"]={"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,N],[11,"clone","","",0,[[["self"]],["async"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["async"]]],[11,"clone","","",1,[[["self"]],["asyncsink"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,[[["self"]],["bool"]]],[0,"future","","Futures",N,N],[3,"Empty","futures::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",2,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",3,N],[13,"B","","Second branch of the type",3,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["futureresult"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"from","","",8,[[["result"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",13,[[["self"]],["bool"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["self"]],["poll",["option"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["self"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["self"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"poll","","",19,[[["self"]],["poll"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"poll","","",21,[[["self"]],["poll"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"poll","","",22,[[["self"]],["poll"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"poll","","",23,[[["self"]],["poll"]]],[11,"poll","","",24,[[["self"]],["poll"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"poll","","",25,[[["self"]],["poll"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"poll","","",26,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"poll","","",27,[[["self"]],["poll"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"poll","","",28,[[["self"]],["poll"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"poll","","",29,[[["self"]],["poll"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"poll","","",30,[[["self"]],["poll"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"poll","","",31,[[["self"]],["poll"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,[[["self"]],["option",["result"]]]],[11,"poll","","",32,[[["self"]],["poll"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"drop","","",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["shareditem"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"deref","","",33,[[["self"]],["t"]]],[11,"clone","","",34,[[["self"]],["sharederror"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"deref","","",34,[[["self"]],["e"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"description","","",34,[[["self"]],["str"]]],[11,"cause","","",34,[[["self"]],["option",["error"]]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,[[["self"]],["poll"]]],[11,"wait","","Block the current thread until this future is resolved.",35,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",35,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",35,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",35,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",35,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",35,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",36,N],[16,"Item","","The item that the future may resolve with.",36,N],[16,"Error","","The error that the future may resolve with.",36,N],[10,"into_future","","Consumes this object and produces a future.",36,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",37,N],[16,"Error","","Possible errors during conversion.",37,N],[10,"future_from","","Consume the given value, beginning the conversion.",37,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["executeerrorkind"]]],[11,"eq","","",4,[[["self"],["executeerrorkind"]],["bool"]]],[11,"new","","Create a new `ExecuteError`",39,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",39,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,[[["self"]],["f"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[0,"stream","futures","Asynchronous streams",N,N],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",40,N],[12,"1","","",40,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",41,N],[13,"Second","","An item from the second stream",41,N],[13,"Both","","Items from both streams",41,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"poll","","",42,[[["self"]],["poll",["option"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"poll","","",43,[[["self"]],["poll",["option"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"poll","","",44,[[["self"]],["poll",["option"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"poll","","",45,[[["self"]],["poll",["option"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["s"]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["poll"]]],[11,"close","","",46,[[["self"]],["poll"]]],[11,"poll","","",46,[[["self"]],["poll",["option"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"poll","","",47,[[["self"]],["poll",["option"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",48,[[["self"]],["poll"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",49,[[["self"]],["poll"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"poll","","",50,[[["self"]],["poll",["option"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["s"]]],[11,"start_send","","",51,N],[11,"poll_complete","","",51,[[["self"]],["poll"]]],[11,"close","","",51,[[["self"]],["poll"]]],[11,"poll","","",51,[[["self"]],["poll",["option"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["s"]]],[11,"start_send","","",52,N],[11,"poll_complete","","",52,[[["self"]],["poll"]]],[11,"close","","",52,[[["self"]],["poll"]]],[11,"poll","","",52,[[["self"]],["poll",["option"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["s"]]],[11,"start_send","","",53,N],[11,"poll_complete","","",53,[[["self"]],["poll"]]],[11,"close","","",53,[[["self"]],["poll"]]],[11,"poll","","",53,[[["self"]],["poll",["option"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"poll","","",54,[[["self"]],["poll"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"poll","","",55,[[["self"]],["poll"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,[[["self"]],["s"]]],[11,"poll","","",56,[[["self"]],["poll",["option"]]]],[11,"start_send","","",56,N],[11,"poll_complete","","",56,[[["self"]],["poll"]]],[11,"close","","",56,[[["self"]],["poll"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",57,N],[11,"poll_complete","","",57,[[["self"]],["poll"]]],[11,"close","","",57,[[["self"]],["poll"]]],[11,"poll","","",57,[[["self"]],["poll",["option"]]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,[[["self"]],["s"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,[[["self"]],["option"]]],[11,"poll","","",58,[[["self"]],["poll"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["s"]]],[11,"start_send","","",59,N],[11,"poll_complete","","",59,[[["self"]],["poll"]]],[11,"close","","",59,[[["self"]],["poll"]]],[11,"poll","","",59,[[["self"]],["poll",["option"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["s"]]],[11,"start_send","","",60,N],[11,"poll_complete","","",60,[[["self"]],["poll"]]],[11,"close","","",60,[[["self"]],["poll"]]],[11,"poll","","",60,[[["self"]],["poll",["option"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["s"]]],[11,"start_send","","",61,N],[11,"poll_complete","","",61,[[["self"]],["poll"]]],[11,"close","","",61,[[["self"]],["poll"]]],[11,"poll","","",61,[[["self"]],["poll",["option"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["s"]]],[11,"start_send","","",62,N],[11,"poll_complete","","",62,[[["self"]],["poll"]]],[11,"close","","",62,[[["self"]],["poll"]]],[11,"poll","","",62,[[["self"]],["poll",["option"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"poll","","",63,[[["self"]],["poll",["option"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"poll","","",64,[[["self"]],["poll",["option"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",65,N],[11,"poll_complete","","",65,[[["self"]],["poll"]]],[11,"close","","",65,[[["self"]],["poll"]]],[11,"poll","","",65,[[["self"]],["poll",["option"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",66,N],[11,"poll_complete","","",66,[[["self"]],["poll"]]],[11,"close","","",66,[[["self"]],["poll"]]],[11,"poll","","",66,[[["self"]],["poll",["option"]]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,[[["self"]],["poll",["option"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"poll","","",67,[[["self"]],["poll",["option"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"poll","","",68,[[["self"]],["poll",["option"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,[[["self"]],["s"]]],[11,"start_send","","",69,N],[11,"poll_complete","","",69,[[["self"]],["poll"]]],[11,"close","","",69,[[["self"]],["poll"]]],[11,"poll","","",69,[[["self"]],["poll",["option"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["s"]]],[11,"start_send","","",70,N],[11,"poll_complete","","",70,[[["self"]],["poll"]]],[11,"close","","",70,[[["self"]],["poll"]]],[11,"poll","","",70,[[["self"]],["poll",["option"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,[[["self"]],["s"]]],[11,"start_send","","",71,N],[11,"poll_complete","","",71,[[["self"]],["poll"]]],[11,"close","","",71,[[["self"]],["poll"]]],[11,"poll","","",71,[[["self"]],["poll",["option"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,[[["self"]],["s"]]],[11,"start_send","","",72,N],[11,"poll_complete","","",72,[[["self"]],["poll"]]],[11,"close","","",72,[[["self"]],["poll"]]],[11,"poll","","",72,[[["self"]],["poll",["option"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",73,N],[11,"poll_complete","","",73,[[["self"]],["poll"]]],[11,"close","","",73,[[["self"]],["poll"]]],[11,"poll","","",73,[[["self"]],["poll",["option"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"poll","","",74,[[["self"]],["poll",["option"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"poll","","",75,[[["self"]],["poll",["option"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"poll","","",76,[[["self"]],["poll"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,[[["self"]],["s"]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["poll"]]],[11,"close","","",77,[[["self"]],["poll"]]],[11,"poll","","",77,[[["self"]],["poll",["option"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"poll","","",78,[[["self"]],["poll",["option"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["poll"]]],[11,"close","","",78,[[["self"]],["poll"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"poll","","",79,[[["self"]],["poll",["option"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["poll"]]],[11,"close","","",80,[[["self"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"poll","","",80,[[["self"]],["poll",["option"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"poll","","",81,[[["self"]],["poll",["vec"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"next","","",82,[[["self"]],["option"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"poll","","",83,[[["self"]],["poll",["option"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["poll"]]],[11,"close","","",84,[[["self"]],["poll"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[0,"futures_unordered","","An unbounded set of futures.",N,N],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",85,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",85,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",85,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,[[["self"]],["itermut"]]],[11,"poll","","",85,[[["self"]],["poll",["option"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"drop","","",85,[[["self"]]]],[11,"from_iter","","",85,[[["t"]],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,N],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",87,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",87,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",87,[[["self"],["t"]]]],[11,"poll","","",87,[[["self"]],["poll",["option"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",87,[[["t"]],["self"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",88,N],[16,"Error","","The type of error this stream may generate.",88,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,[[["self"]],["poll",["option"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",88,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",88,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",88,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",88,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspecterr"]]],[0,"sink","futures","Asynchronous sinks",N,N],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[11,"clone","","",89,[[["self"]],["with"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"poll","","",89,[[["self"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",89,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,[[["self"]],["s"]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["poll"]]],[11,"close","","",89,[[["self"]],["poll"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",90,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,[[["self"]],["s"]]],[11,"poll","","",90,[[["self"]],["poll",["option"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["poll"]]],[11,"close","","",90,[[["self"]],["poll"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",91,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",91,[[["self"]],["s"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,[[["self"]],["s"]]],[11,"poll","","",91,[[["self"]],["poll"]]],[11,"clone","","",92,[[["self"]],["sinkfromerr"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",92,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,[[["self"]],["s"]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["poll"]]],[11,"close","","",92,[[["self"]],["poll"]]],[11,"poll","","",92,[[["self"]],["poll",["option"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",93,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",93,[[["self"]],["s"]]],[11,"poll","","",93,[[["self"]],["poll"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"poll","","",94,[[["self"]],["poll"]]],[11,"clone","","",95,[[["self"]],["sinkmaperr"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",95,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,[[["self"]],["s"]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["poll"]]],[11,"close","","",95,[[["self"]],["poll"]]],[11,"poll","","",95,[[["self"]],["poll",["option"]]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,N],[11,"fmt","","",96,[[["self"],["formatter"]],["fmtresult"]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["poll"]]],[11,"close","","",96,[[["self"]],["poll"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["s"]]],[11,"poll","","",97,[[["self"]],["poll",["option"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["poll"]]],[11,"close","","",97,[[["self"]],["poll"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,N],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,[[["self"]],["result"]]],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,[[["self"]],["result"]]],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",99,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,N],[10,"start_send","","Begin the process of sending a value to the sink.",99,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,[[["self"]],["poll"]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,[[["self"]],["poll"]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",99,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",99,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",99,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",99,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,[[["self"],["s"]],["sendall"]]],[0,"task","futures","Tasks used to drive a future computation",N,N],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"init","","Initialize the `futures` task system.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",100,[[["self"],["usize"]]]],[0,"executor","futures","Executors",N,N],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",N,N],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",N,[[["t"],["usize"],["f"]],["r"]]],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",101,[[["self"],["usize"]]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",N,N],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",102,[[["self"]],["notifyhandle"]]],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",102,[[["self"]]]],[0,"sync","futures","Future-aware synchronization",N,N],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",N,N],[0,"oneshot","","A one-shot, futures-aware channel",N,N],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",104,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",104,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",104,[[["self"]],["bool"]]],[11,"drop","","",104,[[["self"]]]],[11,"clone","","",105,[[["self"]],["canceled"]]],[11,"eq","","",105,[[["self"],["canceled"]],["bool"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"description","","",105,[[["self"]],["str"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",103,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",103,[[["self"]],["result",["option","canceled"]]]],[11,"poll","","",103,[[["self"]],["poll",["canceled"]]]],[11,"drop","","",103,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",106,[[["self"]]]],[11,"poll","","",106,[[["self"]],["poll"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"drop","","",106,[[["self"]]]],[11,"poll","","",107,[[["self"]],["poll"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"drop","","",107,[[["self"]]]],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["senderror"]]],[11,"eq","","",112,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",112,[[["self"],["senderror"]],["bool"]]],[11,"clone","","",113,[[["self"]],["trysenderror"]]],[11,"eq","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"description","","",112,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",112,[[["self"]],["t"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"description","","",113,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",113,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",113,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",113,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",108,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",108,[[["self"]],["bool"]]],[11,"start_send","","",108,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",108,[[["self"]],["poll",["senderror"]]]],[11,"close","","",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",109,[[["self"]],["bool"]]],[11,"unbounded_send","","Sends the provided message along this channel.",109,[[["self"],["t"]],["result",["senderror"]]]],[11,"start_send","","",109,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",109,[[["self"]],["poll",["senderror"]]]],[11,"close","","",109,[[["self"]],["poll",["senderror"]]]],[11,"clone","","",109,[[["self"]],["unboundedsender"]]],[11,"clone","","",108,[[["self"]],["sender"]]],[11,"drop","","",108,[[["self"]]]],[11,"close","","Closes the receiving half",110,[[["self"]]]],[11,"poll","","",110,[[["self"]],["poll",["option"]]]],[11,"drop","","",110,[[["self"]]]],[11,"close","","Closes the receiving half",111,[[["self"]]]],[11,"poll","","",111,[[["self"]],["poll",["option"]]]],[11,"poll","","",114,[[["self"]],["poll",["option"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"poll","","",115,[[["self"]],["poll"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync","",116,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BiLock` protecting the provided data.",116,N],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",116,[[["self"]],["async",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",116,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",116,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"deref","","",117,[[["self"]],["t"]]],[11,"deref_mut","","",117,[[["self"]],["t"]]],[11,"drop","","",117,[[["self"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"poll","","",118,[[["self"]],["poll",["bilockacquired"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",119,[[["self"]],["bilock"]]],[11,"deref","","",119,[[["self"]],["t"]]],[11,"deref_mut","","",119,[[["self"]],["t"]]],[11,"drop","","",119,[[["self"]]]],[0,"unsync","futures","Future-aware single-threaded synchronization",N,N],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",N,N],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",N,N],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["self"]]],[11,"start_send","","",120,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",120,[[["self"]],["poll",["senderror"]]]],[11,"close","","",120,[[["self"]],["poll",["senderror"]]]],[11,"drop","","",120,[[["self"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",121,[[["self"]]]],[11,"poll","","",121,[[["self"]],["poll",["option"]]]],[11,"drop","","",121,[[["self"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["self"]]],[11,"start_send","","",122,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",122,[[["self"]],["poll",["senderror"]]]],[11,"close","","",122,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",122,[[["self"],["t"]],["result",["senderror"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",123,[[["self"]]]],[11,"poll","","",123,[[["self"]],["poll",["option"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"description","","",124,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",124,[[["self"]],["t"]]],[11,"poll","","",125,[[["self"]],["poll",["option"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"poll","","",126,[[["self"]],["poll"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",N,N],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",127,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",127,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",127,[[["self"]],["bool"]]],[11,"drop","","",127,[[["self"]]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",128,[[["self"]]]],[11,"poll","","",128,[[["self"]],["poll"]]],[11,"drop","","",128,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",129,[[["self"]]]],[11,"poll","","",129,[[["self"]],["poll"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"poll","","",130,[[["self"]],["poll"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",131,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",131,[[["self"]]]],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",131,[[["self"],["task"]]]],[11,"notify","","Notifies the task that last called `register`.",131,[[["self"]]]],[11,"default","","",131,[[],["self"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",132,[[["self"],["f"]],["r"]]],[11,"wait_future","futures::executor","Waits for the internal future to complete, blocking this thread's execution until it does.",133,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",133,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",133,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",133,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",133,[[["self"]],["result"]]],[11,"clone","futures::task","",134,[[["self"]],["unparkevent"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",134,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"from","futures::executor","",135,[[["arc"]],["notifyhandle"]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[11,"clone","futures::task","",136,[[["self"]],["task"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",136,[[["self"]]]],[11,"is_current","","Returns `true` when called from within the context of the task.",136,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",136,[[["self"]],["bool"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",133,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",133,[[["self"],["n"],["usize"]],["poll",["option"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",133,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new `NotifyHandle` directly.",135,N],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",135,[[["self"],["usize"]]]],[11,"clone","","",135,[[["self"]],["self"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"drop","","",135,[[["self"]]]],[11,"from","","",135,[[["t"]],["notifyhandle"]]]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["humantime"]={"doc":"Human-friendly time parser and formatter","items":[[3,"FormattedDuration","humantime","A wrapper type that allows you to Display a Duration",N,N],[3,"Duration","","A wrapper for duration that has `FromStr` implementation",N,N],[3,"Timestamp","","A wrapper for SystemTime that has `FromStr` implementation",N,N],[3,"Rfc3339Timestamp","","A wrapper type that allows you to Display a SystemTime",N,N],[4,"DurationError","","Error parsing human-friendly duration",N,N],[13,"InvalidCharacter","","Invalid character during parsing",0,N],[13,"NumberExpected","","Non-numeric value where number is expected",0,N],[13,"UnknownUnit","","Unit in the number is not one of allowed units",0,N],[13,"NumberOverflow","","The numeric value is too large",0,N],[13,"Empty","","The value was an empty string (or consists only whitespace)",0,N],[4,"TimestampError","","Error parsing datetime (timestamp)",N,N],[13,"OutOfRange","","Numeric component is out of range",1,N],[13,"InvalidDigit","","Bad character where digit is expected",1,N],[13,"InvalidFormat","","Other formatting errors",1,N],[5,"parse_duration","","Parse duration object `1hour 12min 5s`",N,[[["str"]],["result",["duration","error"]]]],[5,"format_duration","","Formats duration into a human-readable string",N,[[["duration"]],["formattedduration"]]],[5,"parse_rfc3339","","Parse RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["str"]],["result",["systemtime","error"]]]],[5,"parse_rfc3339_weak","","Parse RFC3339-like timestamp `2018-02-14 00:28:07`",N,[[["str"]],["result",["systemtime","error"]]]],[5,"format_rfc3339","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[5,"format_rfc3339_seconds","","Format an RFC3339 timestamp `2018-02-14T00:28:07Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[5,"format_rfc3339_nanos","","Format an RFC3339 timestamp `2018-02-14T00:28:07.000000000Z`",N,[[["systemtime"]],["rfc3339timestamp"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["duration"]],["bool"]]],[11,"ne","","",3,[[["self"],["duration"]],["bool"]]],[11,"hash","","",3,N],[11,"clone","","",3,[[["self"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["timestamp"]],["bool"]]],[11,"ne","","",4,[[["self"],["timestamp"]],["bool"]]],[11,"clone","","",4,[[["self"]],["timestamp"]]],[11,"as_ref","","",3,[[["self"]],["stdduration"]]],[11,"deref","","",3,[[["self"]],["stdduration"]]],[11,"into","","",3,[[["self"]],["stdduration"]]],[11,"from","","",3,[[["stdduration"]],["duration"]]],[11,"from_str","","",3,[[["str"]],["result",["duration"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",4,[[["self"]],["systemtime"]]],[11,"deref","","",4,[[["self"]],["systemtime"]]],[11,"into","","",4,[[["self"]],["systemtime"]]],[11,"from","","",4,[[["systemtime"]],["timestamp"]]],[11,"from_str","","",4,[[["str"]],["result",["timestamp"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"DurationError"],[4,"TimestampError"],[3,"FormattedDuration"],[3,"Duration"],[3,"Timestamp"],[3,"Rfc3339Timestamp"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"from_bytes","","",0,N],[11,"from_bytes_mut","","",0,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N]],"paths":[[3,"IoVec"]]};
searchIndex["launcher"]={"doc":"Balloon software launcher.","items":[[5,"main","launcher","Program entry point.",N,[[]]]],"paths":[]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lazycell"]={"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with mutable contents.",N,N],[3,"AtomicLazyCell","","A lazily filled and thread-safe `Cell`, with frozen contents.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["lazycell"]]],[11,"new","","Creates a new, empty, `LazyCell`.",0,[[],["lazycell"]]],[11,"fill","","Put a value into this cell.",0,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",0,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",0,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"borrow_mut_with","","Borrows the contents of this `LazyCell` mutably for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"try_borrow_mut_with","","Same as `borrow_mut_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",0,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["atomiclazycell"]]],[18,"NONE","","An empty `AtomicLazyCell`.",1,N],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,[[],["atomiclazycell"]]],[11,"fill","","Put a value into this cell.",1,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",1,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",1,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,[[["self"]],["option"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",1,[[["self"]],["option"]]]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libudev"]={"doc":"","items":[[3,"Context","libudev","A libudev context.",N,N],[3,"Device","","A structure that provides access to sysfs/kernel devices.",N,N],[3,"Properties","","Iterator over a device's properties.",N,N],[3,"Property","","A device property.",N,N],[3,"Attributes","","Iterator over a device's attributes.",N,N],[3,"Attribute","","A device attribute.",N,N],[3,"Enumerator","","An enumeration context.",N,N],[3,"Devices","","Iterator over devices.",N,N],[3,"Error","","The error type for libudev operations.",N,N],[3,"Monitor","","Monitors for device events.",N,N],[3,"MonitorSocket","","An active monitor that can receive events.",N,N],[3,"Event","","An event that indicates a change in device state.",N,N],[4,"ErrorKind","","Types of errors that occur in libudev.",N,N],[13,"NoMem","","",0,N],[13,"InvalidInput","","",0,N],[13,"Io","","",0,N],[4,"EventType","","Types of events that can be received from udev.",N,N],[13,"Add","","A device was added.",1,N],[13,"Change","","A device changed.",1,N],[13,"Remove","","A device was removed.",1,N],[13,"Unknown","","An unknown event occurred.",1,N],[11,"drop","","",2,[[["self"]]]],[11,"new","","Creates a new context.",2,[[],["result"]]],[11,"device_from_syspath","","Creates a device for a given syspath.",2,[[["self"],["path"]],["result",["device"]]]],[11,"drop","","",3,[[["self"]]]],[11,"is_initialized","","Checks whether the device has already been handled by udev.",3,[[["self"]],["bool"]]],[11,"devnum","","Gets the device's major/minor number.",3,[[["self"]],["option",["dev_t"]]]],[11,"syspath","","Returns the syspath of the device.",3,[[["self"]],["path"]]],[11,"devpath","","Returns the kernel devpath value of the device.",3,[[["self"]],["osstr"]]],[11,"devnode","","Returns the path to the device node belonging to the device.",3,[[["self"]],["option",["path"]]]],[11,"parent","","Returns the parent of the device.",3,[[["self"]],["option",["device"]]]],[11,"subsystem","","Returns the subsystem name of the device.",3,[[["self"]],["osstr"]]],[11,"sysname","","Returns the kernel device name for the device.",3,[[["self"]],["osstr"]]],[11,"sysnum","","Returns the instance number of the device.",3,[[["self"]],["option",["usize"]]]],[11,"devtype","","Returns the devtype name of the device.",3,[[["self"]],["option",["osstr"]]]],[11,"driver","","Returns the name of the kernel driver attached to the device.",3,[[["self"]],["option",["osstr"]]]],[11,"property_value","","Retreives the value of a device property.",3,[[["self"],["t"]],["option",["osstr"]]]],[11,"attribute_value","","Retreives the value of a device attribute.",3,[[["self"],["t"]],["option",["osstr"]]]],[11,"set_attribute_value","","Sets the value of a device attribute.",3,[[["self"],["t"],["u"]],["result"]]],[11,"properties","","Returns an iterator over the device's properties.",3,[[["self"]],["properties"]]],[11,"attributes","","Returns an iterator over the device's attributes.",3,[[["self"]],["attributes"]]],[11,"next","","",4,[[["self"]],["option",["property"]]]],[11,"size_hint","","",4,N],[11,"name","","Returns the property name.",5,[[["self"]],["osstr"]]],[11,"value","","Returns the property value.",5,[[["self"]],["osstr"]]],[11,"next","","",6,[[["self"]],["option",["attribute"]]]],[11,"size_hint","","",6,N],[11,"name","","Returns the attribute name.",7,[[["self"]],["osstr"]]],[11,"value","","Returns the attribute value.",7,[[["self"]],["option",["osstr"]]]],[11,"drop","","",8,[[["self"]]]],[11,"new","","Creates a new Enumerator.",8,[[["context"]],["result"]]],[11,"match_is_initialized","","Adds a filter that matches only initialized devices.",8,[[["self"]],["result"]]],[11,"match_subsystem","","Adds a filter that matches only devices that belong to the given kernel subsystem.",8,[[["self"],["t"]],["result"]]],[11,"match_attribute","","Adds a filter that matches only devices with the given attribute value.",8,[[["self"],["t"],["u"]],["result"]]],[11,"match_sysname","","Adds a filter that matches only devices with the given kernel device name.",8,[[["self"],["t"]],["result"]]],[11,"match_property","","Adds a filter that matches only devices with the given property value.",8,[[["self"],["t"],["u"]],["result"]]],[11,"match_tag","","Adds a filter that matches only devices with the given tag.",8,[[["self"],["t"]],["result"]]],[11,"match_parent","","Includes the parent device and all devices in the subtree of the parent device.",8,[[["self"],["device"]],["result"]]],[11,"nomatch_subsystem","","Adds a filter that matches only devices that don't belong to the given kernel subsystem.",8,[[["self"],["t"]],["result"]]],[11,"nomatch_attribute","","Adds a filter that matches only devices that don't have the the given attribute value.",8,[[["self"],["t"],["u"]],["result"]]],[11,"add_syspath","","Includes the device with the given syspath.",8,[[["self"],["path"]],["result"]]],[11,"scan_devices","","Scans `/sys` for devices matching the attached filters.",8,[[["self"]],["result",["devices"]]]],[11,"next","","",9,[[["self"]],["option",["device"]]]],[11,"size_hint","","",9,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",10,[[["self"]],["errorkind"]]],[11,"description","","Returns a description of the error.",10,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["stdresult",["error"]]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"drop","","",11,[[["self"]]]],[11,"new","","Creates a new `Monitor`.",11,[[["context"]],["result"]]],[11,"match_subsystem","","Adds a filter that matches events for devices with the given subsystem.",11,[[["self"],["t"]],["result"]]],[11,"match_subsystem_devtype","","Adds a filter that matches events for devices with the given subsystem and device type.",11,[[["self"],["t"],["u"]],["result"]]],[11,"match_tag","","Adds a filter that matches events for devices with the given tag.",11,[[["self"],["t"]],["result"]]],[11,"clear_filters","","Removes all filters currently set on the monitor.",11,[[["self"]],["result"]]],[11,"listen","","Listens for events matching the current filters.",11,[[["self"]],["result",["monitorsocket"]]]],[11,"as_raw_fd","","Returns the file descriptor of the monitor's socket.",12,[[["self"]],["rawfd"]]],[11,"receive_event","","Receives the next available event from the monitor.",12,[[["self"]],["option",["event"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["eventtype"]]],[11,"eq","","",1,[[["self"],["eventtype"]],["bool"]]],[11,"default","","",1,[[],["eventtype"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"deref","","",13,[[["self"]],["device"]]],[11,"event_type","","Returns the `EventType` corresponding to this event.",13,[[["self"]],["eventtype"]]],[11,"sequence_number","","Returns the event's sequence number.",13,[[["self"]],["u64"]]],[11,"device","","Returns the device associated with this event.",13,[[["self"]],["device"]]],[6,"Result","","A `Result` type for libudev operations.",N,N]],"paths":[[4,"ErrorKind"],[4,"EventType"],[3,"Context"],[3,"Device"],[3,"Properties"],[3,"Property"],[3,"Attributes"],[3,"Attribute"],[3,"Enumerator"],[3,"Devices"],[3,"Error"],[3,"Monitor"],[3,"MonitorSocket"],[3,"Event"]]};
searchIndex["libudev_sys"]={"doc":"","items":[[3,"udev_hwdb","libudev_sys","",N,N],[3,"udev","","",N,N],[3,"udev_list_entry","","",N,N],[3,"udev_device","","",N,N],[3,"udev_monitor","","",N,N],[3,"udev_enumerate","","",N,N],[3,"udev_queue","","",N,N],[5,"udev_hwdb_ref","","",N,N],[5,"udev_hwdb_unref","","",N,N],[5,"udev_hwdb_new","","",N,N],[5,"udev_hwdb_get_properties_list_entry","","",N,N],[5,"udev_new","","",N,N],[5,"udev_ref","","",N,N],[5,"udev_unref","","",N,N],[5,"udev_set_userdata","","",N,N],[5,"udev_get_userdata","","",N,N],[5,"udev_list_entry_get_next","","",N,N],[5,"udev_list_entry_get_by_name","","",N,N],[5,"udev_list_entry_get_name","","",N,N],[5,"udev_list_entry_get_value","","",N,N],[5,"udev_device_ref","","",N,N],[5,"udev_device_unref","","",N,N],[5,"udev_device_get_udev","","",N,N],[5,"udev_device_new_from_syspath","","",N,N],[5,"udev_device_new_from_devnum","","",N,N],[5,"udev_device_new_from_subsystem_sysname","","",N,N],[5,"udev_device_new_from_device_id","","",N,N],[5,"udev_device_new_from_environment","","",N,N],[5,"udev_device_get_parent","","",N,N],[5,"udev_device_get_parent_with_subsystem_devtype","","",N,N],[5,"udev_device_get_devpath","","",N,N],[5,"udev_device_get_subsystem","","",N,N],[5,"udev_device_get_devtype","","",N,N],[5,"udev_device_get_syspath","","",N,N],[5,"udev_device_get_sysname","","",N,N],[5,"udev_device_get_sysnum","","",N,N],[5,"udev_device_get_devnode","","",N,N],[5,"udev_device_get_is_initialized","","",N,N],[5,"udev_device_get_devlinks_list_entry","","",N,N],[5,"udev_device_get_properties_list_entry","","",N,N],[5,"udev_device_get_tags_list_entry","","",N,N],[5,"udev_device_get_property_value","","",N,N],[5,"udev_device_get_driver","","",N,N],[5,"udev_device_get_devnum","","",N,N],[5,"udev_device_get_action","","",N,N],[5,"udev_device_get_sysattr_value","","",N,N],[5,"udev_device_set_sysattr_value","","",N,N],[5,"udev_device_get_sysattr_list_entry","","",N,N],[5,"udev_device_get_seqnum","","",N,N],[5,"udev_device_get_usec_since_initialized","","",N,N],[5,"udev_device_has_tag","","",N,N],[5,"udev_monitor_ref","","",N,N],[5,"udev_monitor_unref","","",N,N],[5,"udev_monitor_get_udev","","",N,N],[5,"udev_monitor_new_from_netlink","","",N,N],[5,"udev_monitor_enable_receiving","","",N,N],[5,"udev_monitor_set_receive_buffer_size","","",N,N],[5,"udev_monitor_get_fd","","",N,N],[5,"udev_monitor_receive_device","","",N,N],[5,"udev_monitor_filter_add_match_subsystem_devtype","","",N,N],[5,"udev_monitor_filter_add_match_tag","","",N,N],[5,"udev_monitor_filter_update","","",N,N],[5,"udev_monitor_filter_remove","","",N,N],[5,"udev_enumerate_ref","","",N,N],[5,"udev_enumerate_unref","","",N,N],[5,"udev_enumerate_get_udev","","",N,N],[5,"udev_enumerate_new","","",N,N],[5,"udev_enumerate_add_match_subsystem","","",N,N],[5,"udev_enumerate_add_nomatch_subsystem","","",N,N],[5,"udev_enumerate_add_match_sysattr","","",N,N],[5,"udev_enumerate_add_nomatch_sysattr","","",N,N],[5,"udev_enumerate_add_match_property","","",N,N],[5,"udev_enumerate_add_match_tag","","",N,N],[5,"udev_enumerate_add_match_parent","","",N,N],[5,"udev_enumerate_add_match_is_initialized","","",N,N],[5,"udev_enumerate_add_match_sysname","","",N,N],[5,"udev_enumerate_add_syspath","","",N,N],[5,"udev_enumerate_scan_devices","","",N,N],[5,"udev_enumerate_scan_subsystems","","",N,N],[5,"udev_enumerate_get_list_entry","","",N,N],[5,"udev_queue_ref","","",N,N],[5,"udev_queue_unref","","",N,N],[5,"udev_queue_get_udev","","",N,N],[5,"udev_queue_new","","",N,N],[5,"udev_queue_get_udev_is_active","","",N,N],[5,"udev_queue_get_queue_is_empty","","",N,N],[5,"udev_queue_get_fd","","",N,N],[5,"udev_queue_flush","","",N,N],[5,"udev_util_encode_string","","",N,N]],"paths":[]};
searchIndex["lock_api"]={"doc":"This library provides type-safe and fully-featured `Mutex` and `RwLock` types which wrap a simple raw mutex or rwlock type. This has several benefits: not only does it eliminate a large portion of the work in implementing custom lock types, it also allows users to write code which is generic with regards to different lock implementations.","items":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock is `Send`.",N,N],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock is not `Send`.",N,N],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",0,[[["self"]],["option",["mutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",0,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",0,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"default","","",0,[[],["mutex"]]],[11,"from","","",0,[[["t"]],["mutex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,[[["self"]],["mutex"]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",1,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",1,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",1,[[["self"]]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",2,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",2,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",3,[[["t"]],["reentrantmutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,[[["self"]],["t"]]],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,[[["self"]],["reentrantmutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",3,[[["self"]],["option",["reentrantmutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",3,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",3,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",3,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"default","","",3,[[],["reentrantmutex"]]],[11,"from","","",3,[[["t"]],["reentrantmutex"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,[[["self"]],["reentrantmutex"]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",4,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",4,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"drop","","",4,[[["self"]]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",5,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",5,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,[[["self"]]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,[[["self"]],["t"]]],[11,"read","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"write","","Locks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,[[["self"]],["option",["rwlockwriteguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,[[["self"]],["t"]]],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,[[["self"]]]],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,[[["self"]]]],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,[[["self"]],["r"]]],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,[[["self"]]]],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,[[["self"]]]],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockupgradablereadguard"]]],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read access.",6,[[["self"]],["option",["rwlockupgradablereadguard"]]]],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"default","","",6,[[],["rwlock"]]],[11,"from","","",6,[[["t"]],["rwlock"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",7,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",7,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",7,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",7,[[["self"]]]],[11,"deref","","",7,[[["self"]],["t"]]],[11,"drop","","",7,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",8,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",8,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",8,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockreadguard"]]],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockupgradablereadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",8,[[["self"]]]],[11,"deref","","",8,[[["self"]],["t"]]],[11,"deref_mut","","",8,[[["self"]],["t"]]],[11,"drop","","",8,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",9,[[["self"]],["rwlock"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",9,[[["self"]],["rwlockwriteguard"]]],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",9,[[["self"]],["result",["rwlockwriteguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",9,[[["self"]]]],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,[[["self"]],["rwlockreadguard"]]],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"deref","","",9,[[["self"]],["t"]]],[11,"drop","","",9,[[["self"]]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",10,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",10,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,[[["self"]]]],[11,"deref","","",10,[[["self"]],["t"]]],[11,"drop","","",10,[[["self"]]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",11,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",11,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",11,[[["self"]],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,[[["self"]]]],[11,"deref","","",11,[[["self"]],["t"]]],[11,"deref_mut","","",11,[[["self"]],["t"]]],[11,"drop","","",11,[[["self"]]]],[8,"RawMutex","","Basic operations for a mutex.",N,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",12,N],[10,"lock","","Acquires this mutex, blocking the current thread until it is able to do so.",12,[[["self"]]]],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,[[["self"]],["bool"]]],[10,"unlock","","Unlocks this mutex.",12,[[["self"]]]],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",N,N],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,[[["self"]]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",14,N],[16,"Instant","","Instant type used for `try_lock_until`.",14,N],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,N],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,N],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",N,N],[18,"INIT","","Initial value.",15,N],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current thread of execution.",15,[[["self"]],["usize"]]],[8,"RawRwLock","","Basic operations for a reader-writer lock.",N,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",16,N],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_shared","","Releases a shared lock.",16,[[["self"]]]],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_exclusive","","Releases an exclusive lock.",16,[[["self"]]]],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",N,N],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,[[["self"]]]],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,[[["self"]]]],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically downgrading an exclusive lock to a shared lock.",N,N],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock without allowing any thread to take an exclusive lock in the meantime.",18,[[["self"]]]],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",19,N],[16,"Instant","","Instant type used for `try_lock_until`.",19,N],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive read locks.",N,N],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]]]],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]],["bool"]]],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive read locks and timeouts.",N,N],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically upgrading a shared lock to an exclusive lock.",N,N],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread until it is able to do so.",22,[[["self"]]]],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,[[["self"]],["bool"]]],[10,"unlock_upgradable","","Releases an upgradable lock.",22,[[["self"]]]],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,[[["self"]]]],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive lock without blocking.",22,[[["self"]],["bool"]]],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable locks and fair unlocking.",N,N],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable locks and lock downgrading.",N,N],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,[[["self"]]]],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,[[["self"]]]],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable locks and locking with timeouts.",N,N],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[18,"INIT","","Initial value.",15,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",N,[[["box",["log"]]],["result",["setloggererror"]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","","",8,[[["self"]],["str"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["log4rs"]={"doc":"log4rs is a highly configurable logging framework modeled after Java's Logback and log4j libraries.","items":[[3,"Handle","log4rs","A handle to the active logger.",N,N],[4,"Error","","An error initializing the logging framework from a file.",N,N],[13,"Log","","An error from the log crate",0,N],[13,"Log4rs","","A fatal error initializing the log4rs config.",0,N],[5,"init_file","","Initializes the global logger as a log4rs logger configured via a file.",N,[[["p"],["deserializers"]],["result",["error"]]]],[5,"init_config","","Initializes the global logger as a log4rs logger with the provided config.",N,[[["config"]],["result",["handle","setloggererror"]]]],[0,"append","","Appenders",N,N],[3,"AppenderConfig","log4rs::append","Configuration for an appender.",N,N],[12,"kind","","The appender kind.",1,N],[12,"filters","","The filters attached to the appender.",1,N],[12,"config","","The appender configuration.",1,N],[0,"file","","The file appender.",N,N],[3,"FileAppenderConfig","log4rs::append::file","The file appender's configuration.",N,N],[3,"FileAppender","","An appender which logs to a file.",N,N],[3,"FileAppenderBuilder","","A builder for `FileAppender`s.",N,N],[3,"FileAppenderDeserializer","","A deserializer for the `FileAppender`.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"append","","",2,[[["self"],["record"]],["result",["box"]]]],[11,"flush","","",2,[[["self"]]]],[11,"builder","","Creates a new `FileAppender` builder.",2,[[],["fileappenderbuilder"]]],[11,"encoder","","Sets the output encoder for the `FileAppender`.",3,[[["self"],["box",["encode"]]],["fileappenderbuilder"]]],[11,"append","","Determines if the appender will append to or truncate the output file.",3,[[["self"],["bool"]],["fileappenderbuilder"]]],[11,"build","","Consumes the `FileAppenderBuilder`, producing a `FileAppender`.",3,[[["self"],["p"]],["result",["fileappender"]]]],[11,"deserialize","","",4,[[["self"],["fileappenderconfig"],["deserializers"]],["result",["box","box"]]]],[0,"console","log4rs::append","The console appender.",N,N],[3,"ConsoleAppenderConfig","log4rs::append::console","The console appender's configuration.",N,N],[3,"ConsoleAppender","","An appender which logs to standard out.",N,N],[3,"ConsoleAppenderBuilder","","A builder for `ConsoleAppender`s.",N,N],[3,"ConsoleAppenderDeserializer","","A deserializer for the `ConsoleAppender`.",N,N],[4,"Target","","The stream to log to.",N,N],[13,"Stdout","","Standard output.",5,N],[13,"Stderr","","Standard error.",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"append","","",6,[[["self"],["record"]],["result",["box"]]]],[11,"flush","","",6,[[["self"]]]],[11,"builder","","Creates a new `ConsoleAppender` builder.",6,[[],["consoleappenderbuilder"]]],[11,"encoder","","Sets the output encoder for the `ConsoleAppender`.",7,[[["self"],["box",["encode"]]],["consoleappenderbuilder"]]],[11,"target","","Sets the output stream to log to.",7,[[["self"],["target"]],["consoleappenderbuilder"]]],[11,"build","","Consumes the `ConsoleAppenderBuilder`, producing a `ConsoleAppender`.",7,[[["self"]],["consoleappender"]]],[11,"deserialize","","",8,[[["self"],["consoleappenderconfig"],["deserializers"]],["result",["box","box"]]]],[8,"Append","log4rs::append","A trait implemented by log4rs appenders.",N,N],[10,"append","","Processes the provided `Record`.",9,[[["self"],["record"]],["result",["box"]]]],[10,"flush","","Flushes all in-flight records.",9,[[["self"]]]],[11,"name","","",9,[[],["str"]]],[11,"eq","","",1,[[["self"],["appenderconfig"]],["bool"]]],[11,"ne","","",1,[[["self"],["appenderconfig"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["appenderconfig"]]]],[0,"config","log4rs","log4rs configuration",N,N],[3,"Root","log4rs::config","Configuration for the root logger.",N,N],[3,"RootBuilder","","A builder for `Root`s.",N,N],[3,"Appender","","Configuration for an appender.",N,N],[3,"AppenderBuilder","","A builder for `Appender`s.",N,N],[3,"Logger","","Configuration for a logger.",N,N],[3,"LoggerBuilder","","A builder for `Logger`s.",N,N],[3,"Config","","A log4rs configuration.",N,N],[3,"ConfigBuilder","","A builder for `Config`s.",N,N],[3,"Errors","","Errors encountered when validating a log4rs `Config`.",N,N],[4,"Error","","An error validating a log4rs `Config`.",N,N],[13,"DuplicateAppenderName","","Multiple appenders were registered with the same name.",10,N],[13,"NonexistentAppender","","A reference to a nonexistant appender.",10,N],[13,"DuplicateLoggerName","","Multiple loggers were registered with the same name.",10,N],[13,"InvalidLoggerName","","A logger name was invalid.",10,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new `RootBuilder` with no appenders.",11,[[],["rootbuilder"]]],[11,"level","","Returns the minimum level of log messages that the root logger will accept.",11,[[["self"]],["levelfilter"]]],[11,"appenders","","Returns the list of names of appenders that will be attached to the root logger.",11,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"appender","","Adds an appender.",12,[[["self"],["t"]],["rootbuilder"]]],[11,"appenders","","Adds appenders.",12,[[["self"],["i"]],["rootbuilder"]]],[11,"build","","Consumes the `RootBuilder`, returning the `Root`.",12,[[["self"],["levelfilter"]],["root"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new `AppenderBuilder` with the specified name and `Append` trait object.",13,[[],["appenderbuilder"]]],[11,"name","","Returns the name of the appender.",13,[[["self"]],["str"]]],[11,"appender","","Returns the appender.",13,[[["self"]],["append"]]],[11,"filters","","Returns the filters attached to the appender.",13,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"filter","","Adds a filter.",14,[[["self"],["box",["filter"]]],["appenderbuilder"]]],[11,"filters","","Adds filters.",14,[[["self"],["i"]],["appenderbuilder"]]],[11,"build","","Consumes the `AppenderBuilder`, returning the `Appender`.",14,[[["self"],["t"],["box",["append"]]],["appender"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new `LoggerBuilder` with the specified name and level.",15,[[],["loggerbuilder"]]],[11,"name","","Returns the name of the logger.",15,[[["self"]],["str"]]],[11,"level","","Returns the minimum level of log messages that the logger will accept.",15,[[["self"]],["levelfilter"]]],[11,"appenders","","Returns the list of names of appenders that will be attached to the logger.",15,N],[11,"additive","","Determines if appenders of parent loggers will also be attached to this logger.",15,[[["self"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"appender","","Adds an appender.",16,[[["self"],["t"]],["loggerbuilder"]]],[11,"appenders","","Adds appenders.",16,[[["self"],["i"]],["loggerbuilder"]]],[11,"additive","","Sets the additivity of the logger.",16,[[["self"],["bool"]],["loggerbuilder"]]],[11,"build","","Consumes the `LoggerBuilder`, returning the `Logger`.",16,[[["self"],["t"],["levelfilter"]],["logger"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"builder","","Creates a new `ConfigBuilder`.",17,[[],["configbuilder"]]],[11,"appenders","","Returns the `Appender`s associated with the `Config`.",17,N],[11,"root","","Returns the `Root` associated with the `Config`.",17,[[["self"]],["root"]]],[11,"loggers","","Returns the `Logger`s associated with the `Config`.",17,N],[11,"appender","","Adds an appender.",18,[[["self"],["appender"]],["configbuilder"]]],[11,"appenders","","Adds appenders.",18,[[["self"],["i"]],["configbuilder"]]],[11,"logger","","Adds a logger.",18,[[["self"],["logger"]],["configbuilder"]]],[11,"loggers","","Adds loggers.",18,[[["self"],["i"]],["configbuilder"]]],[11,"build_lossy","","Consumes the `ConfigBuilder`, returning the `Config`.",18,N],[11,"build","","Consumes the `ConfigBuilder`, returning the `Config`.",18,[[["self"],["root"]],["result",["config","errors"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"errors","","Returns a slice of `Error`s.",19,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"description","","",19,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"description","","",10,[[["self"]],["str"]]],[0,"filter","log4rs","Filters",N,N],[3,"FilterConfig","log4rs::filter","Configuration for a filter.",N,N],[12,"kind","","The filter kind.",20,N],[12,"config","","The filter configuration.",20,N],[4,"Response","","The response returned by a filter.",N,N],[13,"Accept","","Accept the log event.",21,N],[13,"Neutral","","Take no action on the log event.",21,N],[13,"Reject","","Reject the log event.",21,N],[0,"threshold","","The threshold filter.",N,N],[3,"ThresholdFilterConfig","log4rs::filter::threshold","The threshold filter's configuration.",N,N],[3,"ThresholdFilter","","A filter that rejects all events at a level below a provided threshold.",N,N],[3,"ThresholdFilterDeserializer","","A deserializer for the `ThresholdFilter`.",N,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `ThresholdFilter` with the specified threshold.",22,[[["levelfilter"]],["thresholdfilter"]]],[11,"filter","","",22,[[["self"],["record"]],["response"]]],[11,"deserialize","","",23,[[["self"],["thresholdfilterconfig"],["deserializers"]],["result",["box","box"]]]],[8,"Filter","log4rs::filter","The trait implemented by log4rs filters.",N,N],[10,"filter","","Filters a log event.",24,[[["self"],["record"]],["response"]]],[11,"name","","",24,[[],["str"]]],[11,"eq","","",20,[[["self"],["filterconfig"]],["bool"]]],[11,"ne","","",20,[[["self"],["filterconfig"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"deserialize","","",20,[[["d"]],["result",["filterconfig"]]]],[0,"file","log4rs","Support for log4rs configuration from files.",N,N],[3,"Deserializers","log4rs::file","A container of `Deserialize`rs.",N,N],[3,"Error","","An error deserializing a configuration into a log4rs `Config`.",N,N],[3,"RawConfig","","A raw deserializable log4rs configuration.",N,N],[8,"Deserializable","","A trait implemented by traits which are deserializable.",N,N],[10,"name","","Returns a name for objects implementing the trait suitable for display in error messages.",25,[[],["str"]]],[8,"Deserialize","","A trait for objects that can deserialize log4rs components out of a config.",N,N],[16,"Trait","","The trait that this deserializer will create.",26,N],[16,"Config","","This deserializer's configuration.",26,N],[10,"deserialize","","Create a new trait object based on the provided config.",26,N],[11,"clone","","",27,[[["self"]],["deserializers"]]],[11,"default","","",27,[[],["deserializers"]]],[11,"new","","Creates a `Deserializers` with default mappings.",27,[[],["deserializers"]]],[11,"empty","","Creates a new `Deserializers` with no mappings.",27,[[],["deserializers"]]],[11,"insert","","Adds a mapping from the specified `kind` to a deserializer.",27,[[["self"],["str"],["t"]]]],[11,"deserialize","","Deserializes a value of a specific type and kind.",27,[[["self"],["str"],["value"]],["result",["box","box"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"description","","",28,[[["self"]],["str"]]],[11,"cause","","",28,[[["self"]],["option",["error"]]]],[11,"root","","Returns the root.",29,[[["self"]],["root"]]],[11,"loggers","","Returns the loggers.",29,[[["self"]],["vec",["logger"]]]],[11,"appenders_lossy","","Returns the appenders.",29,N],[11,"refresh_rate","","Returns the requested refresh rate.",29,[[["self"]],["option",["duration"]]]],[0,"encode","log4rs","Encoders",N,N],[3,"EncoderConfig","log4rs::encode","Configuration for an encoder.",N,N],[12,"kind","","The encoder's kind.",30,N],[12,"config","","The encoder's configuration.",30,N],[3,"Style","","The style applied to text output.",N,N],[12,"text","","The text (or foreground) color.",31,N],[12,"background","","The background color.",31,N],[12,"intense","","True if the text should have increased intensity.",31,N],[4,"Color","","A text or background color.",N,N],[13,"Black","","",32,N],[13,"Red","","",32,N],[13,"Green","","",32,N],[13,"Yellow","","",32,N],[13,"Blue","","",32,N],[13,"Magenta","","",32,N],[13,"Cyan","","",32,N],[13,"White","","",32,N],[0,"pattern","","A simple pattern-based encoder.",N,N],[3,"PatternEncoderConfig","log4rs::encode::pattern","The pattern encoder's configuration.",N,N],[3,"PatternEncoder","","An `Encode`r configured via a format string.",N,N],[3,"PatternEncoderDeserializer","","A deserializer for the `PatternEncoder`.",N,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"default","","",33,[[],["patternencoder"]]],[11,"encode","","",33,[[["self"],["write"],["record"]],["result",["box"]]]],[11,"new","","Creates a `PatternEncoder` from a pattern string.",33,[[["str"]],["patternencoder"]]],[11,"deserialize","","",34,[[["self"],["patternencoderconfig"],["deserializers"]],["result",["box","box"]]]],[0,"writer","log4rs::encode","Implementations of the `encode::Write` trait.",N,N],[0,"ansi","log4rs::encode::writer","The ANSI writer.",N,N],[3,"AnsiWriter","log4rs::encode::writer::ansi","An `encode::Write`r that wraps an `io::Write`r, emitting ANSI escape codes for text style.",N,N],[12,"0","","",35,N],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"write","","",35,N],[11,"flush","","",35,[[["self"]],["result"]]],[11,"write_all","","",35,N],[11,"write_fmt","","",35,[[["self"],["arguments"]],["result"]]],[11,"set_style","","",35,[[["self"],["style"]],["result"]]],[0,"console","log4rs::encode::writer","The console writer",N,N],[3,"ConsoleWriter","log4rs::encode::writer::console","An `encode::Write`r that outputs to a console.",N,N],[3,"ConsoleWriterLock","","An RAII lock over a console.",N,N],[11,"stdout","","Returns a new `ConsoleWriter` that will write to standard out.",36,[[],["option",["consolewriter"]]]],[11,"stderr","","Returns a new `ConsoleWriter` that will write to standard error.",36,[[],["option",["consolewriter"]]]],[11,"lock","","Locks the console, preventing other threads from writing concurrently.",36,[[["self"]],["consolewriterlock"]]],[11,"write","","",36,N],[11,"flush","","",36,[[["self"]],["result"]]],[11,"write_all","","",36,N],[11,"write_fmt","","",36,[[["self"],["arguments"]],["result"]]],[11,"set_style","","",36,[[["self"],["style"]],["result"]]],[11,"write","","",37,N],[11,"flush","","",37,[[["self"]],["result"]]],[11,"write_all","","",37,N],[11,"write_fmt","","",37,[[["self"],["arguments"]],["result"]]],[11,"set_style","","",37,[[["self"],["style"]],["result"]]],[0,"simple","log4rs::encode::writer","The simple writer",N,N],[3,"SimpleWriter","log4rs::encode::writer::simple","An `encode::Write`r that simply delegates to an `io::Write`r and relies on the default implementations of `encode::Write`r methods.",N,N],[12,"0","","",38,N],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"write","","",38,N],[11,"flush","","",38,[[["self"]],["result"]]],[11,"write_all","","",38,N],[11,"write_fmt","","",38,[[["self"],["arguments"]],["result"]]],[8,"Encode","log4rs::encode","A trait implemented by types that can serialize a `Record` into a `Write`r.",N,N],[10,"encode","","Encodes the `Record` into bytes and writes them.",39,[[["self"],["write"],["record"]],["result",["box"]]]],[8,"Write","","A trait for types that an `Encode`r will write to.",N,N],[11,"set_style","","Sets the output text style, if supported.",40,[[["self"],["style"]],["result"]]],[11,"name","","",39,[[],["str"]]],[11,"deserialize","","",30,[[["d"]],["result",["encoderconfig"]]]],[11,"clone","","",32,[[["self"]],["color"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["style"]]],[11,"default","","",31,[[],["style"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a `Style` with all fields set to their defaults.",31,[[],["style"]]],[11,"text","","Sets the text color.",31,[[["self"],["color"]],["style"]]],[11,"background","","Sets the background color.",31,[[["self"],["color"]],["style"]]],[11,"intense","","Sets the text intensity.",31,[[["self"],["bool"]],["style"]]],[11,"fmt","log4rs","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"from","","",0,[[["setloggererror"]],["error"]]],[11,"from","","",0,[[["box",["error"]]],["error"]]],[11,"set_config","","Sets the logging configuration.",41,[[["self"],["config"]]]]],"paths":[[4,"Error"],[3,"AppenderConfig"],[3,"FileAppender"],[3,"FileAppenderBuilder"],[3,"FileAppenderDeserializer"],[4,"Target"],[3,"ConsoleAppender"],[3,"ConsoleAppenderBuilder"],[3,"ConsoleAppenderDeserializer"],[8,"Append"],[4,"Error"],[3,"Root"],[3,"RootBuilder"],[3,"Appender"],[3,"AppenderBuilder"],[3,"Logger"],[3,"LoggerBuilder"],[3,"Config"],[3,"ConfigBuilder"],[3,"Errors"],[3,"FilterConfig"],[4,"Response"],[3,"ThresholdFilter"],[3,"ThresholdFilterDeserializer"],[8,"Filter"],[8,"Deserializable"],[8,"Deserialize"],[3,"Deserializers"],[3,"Error"],[3,"RawConfig"],[3,"EncoderConfig"],[3,"Style"],[4,"Color"],[3,"PatternEncoder"],[3,"PatternEncoderDeserializer"],[3,"AnsiWriter"],[3,"ConsoleWriter"],[3,"ConsoleWriterLock"],[3,"SimpleWriter"],[8,"Encode"],[8,"Write"],[3,"Handle"]]};
searchIndex["log_mdc"]={"doc":"A mapped diagnostic context (MDC) for use with the `log` crate.","items":[[3,"InsertGuard","log_mdc","A guard object which restores an MDC entry when dropped.",N,N],[3,"ExtendGuard","","A guard objects which restores MDC entries when dropped.",N,N],[5,"insert","","Inserts a new entry into the MDC, returning the old value.",N,[[["k"],["v"]],["option",["string"]]]],[5,"insert_scoped","","Inserts a new entry into the MDC in a scoped fashion.",N,[[["k"],["v"]],["insertguard"]]],[5,"extend","","Extends the MDC with new entries.",N,[[["i"]]]],[5,"extend_scoped","","Extends the MDC with new entries in a scoped fashion.",N,[[["i"]],["extendguard"]]],[5,"get","","Retrieves a value from the MDC.",N,[[["q"],["f"]],["t"]]],[5,"remove","","Removes a value from the MDC.",N,[[["q"]],["option",["string"]]]],[5,"clear","","Removes all values from the MDC.",N,[[]]],[5,"iter","","Invokes the provided closure for each entry in the MDC.",N,[[["f"]]]],[11,"drop","","",0,[[["self"]]]],[11,"drop","","",1,[[["self"]]]]],"paths":[[3,"InsertGuard"],[3,"ExtendGuard"]]};
searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",N,N],[3,"Registration","","Handle to a user space `Poll` registration.",N,N],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",N,N],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Events","","A collection of readiness events.",N,N],[11,"eq","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"clone","","",1,[[["self"]],["pollopt"]]],[11,"partial_cmp","","",1,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"cmp","","",1,[[["self"],["pollopt"]],["ordering"]]],[11,"empty","","Return a `PollOpt` representing no set options.",1,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",1,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",1,[[["self"],["pollopt"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",1,[[["self"],["pollopt"]]]],[11,"bitor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitxor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"sub","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["ready"]],["bool"]]],[11,"ne","","",2,[[["self"],["ready"]],["bool"]]],[11,"clone","","",2,[[["self"]],["ready"]]],[11,"partial_cmp","","",2,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["ready"]],["bool"]]],[11,"le","","",2,[[["self"],["ready"]],["bool"]]],[11,"gt","","",2,[[["self"],["ready"]],["bool"]]],[11,"ge","","",2,[[["self"],["ready"]],["bool"]]],[11,"cmp","","",2,[[["self"],["ready"]],["ordering"]]],[11,"empty","","Returns the empty `Ready` set.",2,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",2,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",2,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",2,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",2,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",2,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,[[["self"],["t"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",2,[[["self"],["t"]]]],[11,"contains","","Returns true if `self` is a superset of `other`.",2,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,[[["self"]],["usize"]]],[11,"bitor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitor_assign","","",2,[[["self"],["t"]]]],[11,"bitxor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitxor_assign","","",2,[[["self"],["t"]]]],[11,"bitand","","",2,[[["self"],["t"]],["ready"]]],[11,"bitand_assign","","",2,[[["self"],["t"]]]],[11,"sub","","",2,[[["self"],["t"]],["ready"]]],[11,"sub_assign","","",2,[[["self"],["t"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["setreadiness"]]],[11,"new","","Return a new `Poll` handle.",4,[[],["result",["poll"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"]],["result"]]],[11,"poll","","Wait for readiness events",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",4,[[["self"]],["rawfd"]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",5,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",5,[[["self"]]]],[11,"into_iter","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,N],[11,"register","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",6,[[["self"],["poll"]],["result"]]],[11,"drop","","",6,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"readiness","","Returns the registration's current readiness.",3,[[["self"]],["ready"]]],[11,"set_readiness","","Set the registration's readiness",3,[[["self"],["ready"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["unixready"]],["ready"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"cmp","","",0,[[["self"],["token"]],["ordering"]]],[11,"hash","","",0,N],[11,"from","","",0,[[["usize"]],["token"]]],[0,"net","","Networking primitives",N,N],[3,"TcpListener","mio::net","A structure representing a socket server",N,N],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",N,N],[3,"UdpSocket","","A User Datagram Protocol socket.",N,N],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,[[["socketaddr"]],["result",["tcpstream"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,[[["tcpstream"],["socketaddr"]],["result",["tcpstream"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,[[["tcpstream"]],["result",["tcpstream"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,[[["self"]],["result",["tcpstream"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,[[["self"]],["result",["option"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,N],[11,"read_bufs","","Read in a list of buffers all at once.",7,N],[11,"write_bufs","","Write a list of buffers all at once.",7,N],[11,"read","","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"register","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",7,[[["self"],["poll"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,[[["tcplistener"]],["result",["tcplistener"]]]],[11,"accept","","Accepts a new `TcpStream`.",8,[[["self"]],["result"]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",8,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,[[["self"]],["result",["tcplistener"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,[[["self"]],["result",["option"]]]],[11,"register","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",8,[[["self"],["poll"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",7,[[["rawfd"]],["tcpstream"]]],[11,"into_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",8,[[["rawfd"]],["tcplistener"]]],[11,"bind","","Creates a UDP socket from the given address.",9,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,[[["udpsocket"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the socket address that this socket was created from.",9,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,[[["self"]],["result",["udpsocket"]]]],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,N],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,N],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,[[["self"],["socketaddr"]],["result"]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"],["u32"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,[[["self"]],["result",["option"]]]],[11,"register","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",9,[[["self"],["poll"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",9,[[["rawfd"]],["udpsocket"]]],[0,"event","mio","Readiness event types and utilities.",N,N],[3,"Events","mio::event","A collection of readiness events.",N,N],[3,"Iter","","[`Events`] iterator.",N,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,[[["self"],["poll"]],["result"]]],[0,"unix","mio","Unix only extensions",N,N],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",N,N],[12,"0","","",11,N],[3,"UnixReady","","Unix specific extensions to `Ready`",N,N],[11,"clone","mio::event","",12,[[["self"]],["event"]]],[11,"eq","","",12,[[["self"],["event"]],["bool"]]],[11,"ne","","",12,[[["self"],["event"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",12,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",12,[[["self"]],["token"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["iter"]]],[11,"next","","",13,[[["self"]],["option",["event"]]]],[11,"fmt","mio::unix","",11,[[["self"],["formatter"]],["result"]]],[11,"register","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",11,[[["self"],["poll"]],["result"]]],[11,"eq","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ne","","",14,[[["self"],["unixready"]],["bool"]]],[11,"clone","","",14,[[["self"]],["unixready"]]],[11,"partial_cmp","","",14,[[["self"],["unixready"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"le","","",14,[[["self"],["unixready"]],["bool"]]],[11,"gt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ge","","",14,[[["self"],["unixready"]],["bool"]]],[11,"cmp","","",14,[[["self"],["unixready"]],["ordering"]]],[11,"error","","Returns a `Ready` representing error readiness.",14,[[],["unixready"]]],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,[[],["unixready"]]],[11,"priority","","Returns a `Ready` representing priority (`EPOLLPRI`) readiness",14,[[],["unixready"]]],[11,"is_error","","Returns true if the value includes error readiness",14,[[["self"]],["bool"]]],[11,"is_hup","","Returns true if the value includes HUP readiness",14,[[["self"]],["bool"]]],[11,"is_priority","","Returns true if `Ready` contains priority (`EPOLLPRI`) readiness",14,[[["self"]],["bool"]]],[11,"from","","",14,[[["ready"]],["unixready"]]],[11,"deref","","",14,[[["self"]],["ready"]]],[11,"deref_mut","","",14,[[["self"]],["ready"]]],[11,"bitor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitxor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitand","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"sub","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["mio_serial"]={"doc":"mio-serial - Serial port I/O for mio","items":[[4,"DataBits","mio_serial","Number of bits per character.",N,N],[13,"Five","","5 bits per character",0,N],[13,"Six","","6 bits per character",0,N],[13,"Seven","","7 bits per character",0,N],[13,"Eight","","8 bits per character",0,N],[3,"Error","","An error type for serial port operations.",N,N],[12,"kind","","The kind of error this is",1,N],[12,"description","","A description of the error suitable for end-users",1,N],[4,"ErrorKind","","Categories of errors that can occur when interacting with serial ports.",N,N],[13,"NoDevice","","The device is not available.",2,N],[13,"InvalidInput","","A parameter was incorrect.",2,N],[13,"Unknown","","An unknown error occurred.",2,N],[13,"Io","","An I/O error occurred.",2,N],[4,"FlowControl","","Flow control modes.",N,N],[13,"None","","No flow control.",3,N],[13,"Software","","Flow control using XON/XOFF bytes.",3,N],[13,"Hardware","","Flow control using RTS/CTS signals.",3,N],[4,"Parity","","Parity checking modes.",N,N],[13,"None","","No parity bit.",4,N],[13,"Odd","","Parity bit sets odd number of 1 bits.",4,N],[13,"Even","","Parity bit sets even number of 1 bits.",4,N],[8,"SerialPort","","A trait for serial port devices",N,N],[10,"name","","Returns the name of this port if it exists.",5,[[["self"]],["option",["string"]]]],[10,"settings","","Returns a struct with the current port settings",5,[[["self"]],["serialportsettings"]]],[10,"baud_rate","","Returns the current baud rate.",5,[[["self"]],["result",["u32","error"]]]],[10,"data_bits","","Returns the character size.",5,[[["self"]],["result",["databits","error"]]]],[10,"flow_control","","Returns the flow control mode.",5,[[["self"]],["result",["flowcontrol","error"]]]],[10,"parity","","Returns the parity-checking mode.",5,[[["self"]],["result",["parity","error"]]]],[10,"stop_bits","","Returns the number of stop bits.",5,[[["self"]],["result",["stopbits","error"]]]],[10,"timeout","","Returns the current timeout.",5,[[["self"]],["duration"]]],[10,"set_all","","Applies all settings for a struct. This isn't guaranteed to involve only a single call into the driver, though that may be done on some platforms.",5,[[["self"],["serialportsettings"]],["result",["error"]]]],[10,"set_baud_rate","","Sets the baud rate.",5,[[["self"],["u32"]],["result",["error"]]]],[10,"set_data_bits","","Sets the character size.",5,[[["self"],["databits"]],["result",["error"]]]],[10,"set_flow_control","","Sets the flow control mode.",5,[[["self"],["flowcontrol"]],["result",["error"]]]],[10,"set_parity","","Sets the parity-checking mode.",5,[[["self"],["parity"]],["result",["error"]]]],[10,"set_stop_bits","","Sets the number of stop bits.",5,[[["self"],["stopbits"]],["result",["error"]]]],[10,"set_timeout","","Sets the timeout for future I/O operations.",5,[[["self"],["duration"]],["result",["error"]]]],[10,"write_request_to_send","","Sets the state of the RTS (Request To Send) control signal.",5,[[["self"],["bool"]],["result",["error"]]]],[10,"write_data_terminal_ready","","Writes to the Data Terminal Ready pin",5,[[["self"],["bool"]],["result",["error"]]]],[10,"read_clear_to_send","","Reads the state of the CTS (Clear To Send) control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"read_data_set_ready","","Reads the state of the Data Set Ready control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"read_ring_indicator","","Reads the state of the Ring Indicator control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"read_carrier_detect","","Reads the state of the Carrier Detect control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"try_clone","","Attempts to clone the `SerialPort`. This allow you to write and read simultaneously from the same serial connection. Please note that if you want a real asynchronous serial port you should look at mio-serial or tokio-serial.",5,[[["self"]],["result",["box","error"]]]],[3,"SerialPortInfo","","A device-independent implementation of serial port information.",N,N],[12,"port_name","","The short name of the serial port",6,N],[12,"port_type","","The hardware device type that exposes this port",6,N],[3,"SerialPortSettings","","A struct containing all serial port settings",N,N],[12,"baud_rate","","The baud rate in symbols-per-second",7,N],[12,"data_bits","","Number of bits used to represent a character sent on the line",7,N],[12,"flow_control","","The type of signalling to use for controlling data transfer",7,N],[12,"parity","","The type of parity to use for error checking",7,N],[12,"stop_bits","","Number of bits to use to signal the end of a character",7,N],[12,"timeout","","Amount of time to wait to receive data before timing out",7,N],[4,"StopBits","","Number of stop bits.",N,N],[13,"One","","One stop bit.",8,N],[13,"Two","","Two stop bits.",8,N],[5,"available_ports","","Returns a list of all serial ports on system",N,[[],["result",["vec","error"]]]],[0,"unix","","Unix impl of mio-enabled serial ports.",N,N],[3,"Serial","mio_serial::unix","*nix serial port using termios",N,N],[11,"from_path","","Open a nonblocking serial port from the provided path.",9,[[["t"],["serialportsettings"]],["result"]]],[11,"from_serial","","Convert an existing `serialport::posix::TTYPort` struct.",9,[[["ttyport"]],["result"]]],[11,"pair","","Create a pair of pseudo serial terminals",9,[[],["result"]]],[11,"set_exclusive","","Sets the exclusivity of the port",9,[[["self"],["bool"]],["result"]]],[11,"exclusive","","Returns the exclusivity of the port",9,[[["self"]],["bool"]]],[11,"settings","","Returns a struct with the current port settings",9,[[["self"]],["serialportsettings"]]],[11,"name","","Return the name associated with the serial port, if known.",9,[[["self"]],["option",["string"]]]],[11,"baud_rate","","Returns the current baud rate.",9,[[["self"]],["result",["u32"]]]],[11,"data_bits","","Returns the character size.",9,[[["self"]],["result",["databits"]]]],[11,"flow_control","","Returns the flow control mode.",9,[[["self"]],["result",["flowcontrol"]]]],[11,"parity","","Returns the parity-checking mode.",9,[[["self"]],["result",["parity"]]]],[11,"stop_bits","","Returns the number of stop bits.",9,[[["self"]],["result",["stopbits"]]]],[11,"timeout","","Returns the current timeout.",9,[[["self"]],["duration"]]],[11,"set_all","","Applies all settings for a struct. This isn't guaranteed to involve only a single call into the driver, though that may be done on some platforms.",9,[[["self"],["serialportsettings"]],["result"]]],[11,"set_baud_rate","","Sets the baud rate.",9,[[["self"],["u32"]],["result"]]],[11,"set_data_bits","","Sets the character size.",9,[[["self"],["databits"]],["result"]]],[11,"set_flow_control","","Sets the flow control mode.",9,[[["self"],["flowcontrol"]],["result"]]],[11,"set_parity","","Sets the parity-checking mode.",9,[[["self"],["parity"]],["result"]]],[11,"set_stop_bits","","Sets the number of stop bits.",9,[[["self"],["stopbits"]],["result"]]],[11,"set_timeout","","Sets the timeout for future I/O operations.  This parameter is ignored but required for trait completeness.",9,[[["self"],["duration"]],["result"]]],[11,"write_request_to_send","","Sets the state of the RTS (Request To Send) control signal.",9,[[["self"],["bool"]],["result"]]],[11,"write_data_terminal_ready","","Writes to the Data Terminal Ready pin",9,[[["self"],["bool"]],["result"]]],[11,"read_clear_to_send","","Reads the state of the CTS (Clear To Send) control signal.",9,[[["self"]],["result",["bool"]]]],[11,"read_data_set_ready","","Reads the state of the Data Set Ready control signal.",9,[[["self"]],["result",["bool"]]]],[11,"read_ring_indicator","","Reads the state of the Ring Indicator control signal.",9,[[["self"]],["result",["bool"]]]],[11,"read_carrier_detect","","Reads the state of the Carrier Detect control signal.",9,[[["self"]],["result",["bool"]]]],[11,"try_clone","","Attempts to clone the `SerialPort`. This allow you to write and read simultaneously from the same serial connection. Please note that if you want a real asynchronous serial port you should look at mio-serial or tokio-serial.",9,[[["self"]],["result",["box"]]]],[11,"read","","",9,N],[11,"write","","",9,N],[11,"flush","","",9,[[["self"]],["result"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",9,[[["rawfd"]],["self"]]],[11,"register","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",9,[[["self"],["poll"]],["result"]]],[6,"Result","mio_serial","A type for results generated by interacting with serial ports.",N,N],[11,"clone","","",8,[[["self"]],["stopbits"]]],[11,"clone","","",6,[[["self"]],["serialportinfo"]]],[11,"clone","","",7,[[["self"]],["serialportsettings"]]],[11,"clone","","",4,[[["self"]],["parity"]]],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"clone","","",3,[[["self"]],["flowcontrol"]]],[11,"clone","","",0,[[["self"]],["databits"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"default","","",7,[[],["serialportsettings"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",8,[[["self"],["stopbits"]],["bool"]]],[11,"eq","","",7,[[["self"],["serialportsettings"]],["bool"]]],[11,"ne","","",7,[[["self"],["serialportsettings"]],["bool"]]],[11,"eq","","",3,[[["self"],["flowcontrol"]],["bool"]]],[11,"eq","","",4,[[["self"],["parity"]],["bool"]]],[11,"eq","","",0,[[["self"],["databits"]],["bool"]]],[11,"eq","","",6,[[["self"],["serialportinfo"]],["bool"]]],[11,"ne","","",6,[[["self"],["serialportinfo"]],["bool"]]],[11,"new","","Instantiates a new error",1,[[["errorkind"],["t"]],["error"]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",1,[[["self"]],["errorkind"]]]],"paths":[[4,"DataBits"],[3,"Error"],[4,"ErrorKind"],[4,"FlowControl"],[4,"Parity"],[8,"SerialPort"],[3,"SerialPortInfo"],[3,"SerialPortSettings"],[4,"StopBits"],[3,"Serial"]]};
searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",N,N],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",N,N],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpbuilder"]]]],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,[[["self"],["i32"]],["result",["tcplistener"]]]],[11,"connect","","Initiate a connection on this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpstream"]]]],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,[[["self"]],["result",["tcpstream"]]]],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,[[["self"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",1,[[["self"],["t"]],["result",["udpsocket"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,[[["self"]],["result",["option"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],["result",["option"]]]],[11,"from_raw_fd","","",0,[[["c_int"]],["tcpbuilder"]]],[11,"as_raw_fd","","",0,[[["self"]],["c_int"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["udpbuilder"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]],[0,"unix","","Unix-specific extensions to the `std::net` types.",N,N],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,[[["self"]],["result",["bool"]]]],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,[[["self"]],["result",["bool"]]]],[11,"reuse_port","net2","",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",0,[[["self"]],["result",["bool"]]]],[11,"reuse_port","","",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",1,[[["self"]],["result",["bool"]]]],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",N,N],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],["result",["bool"]]]],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,[[["self"]],["result",["option"]]]],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,[[["self"]],["result",["option"]]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,[[["self"]],["result",["bool"]]]],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,[[["self"],["t"]],["result"]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,[[["self"]],["result",["option"]]]],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",N,N],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,[[["self"]],["result",["option"]]]],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",N,N],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"],["u32"]],["result"]]],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"],["ipv4addr"]],["result"]]],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["ipv4addr"]]]],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,[[["self"]],["result",["option"]]]],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,[[["self"],["a"]],["result"]]],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,N],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,N],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],["result"]]]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nix"]={"doc":"Rust friendly bindings to the various *nix system functions.","items":[[4,"Error","nix","Nix Error Type",N,N],[13,"Sys","","",0,N],[13,"InvalidPath","","",0,N],[13,"InvalidUtf8","","The operation involved a conversion to Rust's native String type, which failed because the string did not contain all valid UTF-8.",0,N],[13,"UnsupportedOperation","","The operation is not supported by Nix, in this instance either use the libc bindings or consult the module documentation to see if there is a more appropriate interface available.",0,N],[0,"errno","","",N,N],[4,"Errno","nix::errno","",N,N],[13,"UnknownErrno","","",1,N],[13,"EPERM","","",1,N],[13,"ENOENT","","",1,N],[13,"ESRCH","","",1,N],[13,"EINTR","","",1,N],[13,"EIO","","",1,N],[13,"ENXIO","","",1,N],[13,"E2BIG","","",1,N],[13,"ENOEXEC","","",1,N],[13,"EBADF","","",1,N],[13,"ECHILD","","",1,N],[13,"EAGAIN","","",1,N],[13,"ENOMEM","","",1,N],[13,"EACCES","","",1,N],[13,"EFAULT","","",1,N],[13,"ENOTBLK","","",1,N],[13,"EBUSY","","",1,N],[13,"EEXIST","","",1,N],[13,"EXDEV","","",1,N],[13,"ENODEV","","",1,N],[13,"ENOTDIR","","",1,N],[13,"EISDIR","","",1,N],[13,"EINVAL","","",1,N],[13,"ENFILE","","",1,N],[13,"EMFILE","","",1,N],[13,"ENOTTY","","",1,N],[13,"ETXTBSY","","",1,N],[13,"EFBIG","","",1,N],[13,"ENOSPC","","",1,N],[13,"ESPIPE","","",1,N],[13,"EROFS","","",1,N],[13,"EMLINK","","",1,N],[13,"EPIPE","","",1,N],[13,"EDOM","","",1,N],[13,"ERANGE","","",1,N],[13,"EDEADLK","","",1,N],[13,"ENAMETOOLONG","","",1,N],[13,"ENOLCK","","",1,N],[13,"ENOSYS","","",1,N],[13,"ENOTEMPTY","","",1,N],[13,"ELOOP","","",1,N],[13,"ENOMSG","","",1,N],[13,"EIDRM","","",1,N],[13,"ECHRNG","","",1,N],[13,"EL2NSYNC","","",1,N],[13,"EL3HLT","","",1,N],[13,"EL3RST","","",1,N],[13,"ELNRNG","","",1,N],[13,"EUNATCH","","",1,N],[13,"ENOCSI","","",1,N],[13,"EL2HLT","","",1,N],[13,"EBADE","","",1,N],[13,"EBADR","","",1,N],[13,"EXFULL","","",1,N],[13,"ENOANO","","",1,N],[13,"EBADRQC","","",1,N],[13,"EBADSLT","","",1,N],[13,"EBFONT","","",1,N],[13,"ENOSTR","","",1,N],[13,"ENODATA","","",1,N],[13,"ETIME","","",1,N],[13,"ENOSR","","",1,N],[13,"ENONET","","",1,N],[13,"ENOPKG","","",1,N],[13,"EREMOTE","","",1,N],[13,"ENOLINK","","",1,N],[13,"EADV","","",1,N],[13,"ESRMNT","","",1,N],[13,"ECOMM","","",1,N],[13,"EPROTO","","",1,N],[13,"EMULTIHOP","","",1,N],[13,"EDOTDOT","","",1,N],[13,"EBADMSG","","",1,N],[13,"EOVERFLOW","","",1,N],[13,"ENOTUNIQ","","",1,N],[13,"EBADFD","","",1,N],[13,"EREMCHG","","",1,N],[13,"ELIBACC","","",1,N],[13,"ELIBBAD","","",1,N],[13,"ELIBSCN","","",1,N],[13,"ELIBMAX","","",1,N],[13,"ELIBEXEC","","",1,N],[13,"EILSEQ","","",1,N],[13,"ERESTART","","",1,N],[13,"ESTRPIPE","","",1,N],[13,"EUSERS","","",1,N],[13,"ENOTSOCK","","",1,N],[13,"EDESTADDRREQ","","",1,N],[13,"EMSGSIZE","","",1,N],[13,"EPROTOTYPE","","",1,N],[13,"ENOPROTOOPT","","",1,N],[13,"EPROTONOSUPPORT","","",1,N],[13,"ESOCKTNOSUPPORT","","",1,N],[13,"EOPNOTSUPP","","",1,N],[13,"EPFNOSUPPORT","","",1,N],[13,"EAFNOSUPPORT","","",1,N],[13,"EADDRINUSE","","",1,N],[13,"EADDRNOTAVAIL","","",1,N],[13,"ENETDOWN","","",1,N],[13,"ENETUNREACH","","",1,N],[13,"ENETRESET","","",1,N],[13,"ECONNABORTED","","",1,N],[13,"ECONNRESET","","",1,N],[13,"ENOBUFS","","",1,N],[13,"EISCONN","","",1,N],[13,"ENOTCONN","","",1,N],[13,"ESHUTDOWN","","",1,N],[13,"ETOOMANYREFS","","",1,N],[13,"ETIMEDOUT","","",1,N],[13,"ECONNREFUSED","","",1,N],[13,"EHOSTDOWN","","",1,N],[13,"EHOSTUNREACH","","",1,N],[13,"EALREADY","","",1,N],[13,"EINPROGRESS","","",1,N],[13,"ESTALE","","",1,N],[13,"EUCLEAN","","",1,N],[13,"ENOTNAM","","",1,N],[13,"ENAVAIL","","",1,N],[13,"EISNAM","","",1,N],[13,"EREMOTEIO","","",1,N],[13,"EDQUOT","","",1,N],[13,"ENOMEDIUM","","",1,N],[13,"EMEDIUMTYPE","","",1,N],[13,"ECANCELED","","",1,N],[13,"ENOKEY","","",1,N],[13,"EKEYEXPIRED","","",1,N],[13,"EKEYREVOKED","","",1,N],[13,"EKEYREJECTED","","",1,N],[13,"EOWNERDEAD","","",1,N],[13,"ENOTRECOVERABLE","","",1,N],[13,"ERFKILL","","",1,N],[13,"EHWPOISON","","",1,N],[5,"from_i32","","",N,[[["i32"]],["errno"]]],[5,"errno","","Returns the platform-specific value of errno",N,[[],["i32"]]],[11,"clone","","",1,[[["self"]],["errno"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["errno"]],["bool"]]],[17,"EWOULDBLOCK","","",N,N],[17,"EDEADLOCK","","",N,N],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",N,N],[10,"sentinel","","",2,[[],["self"]]],[11,"last","","",1,[[],["self"]]],[11,"desc","","",1,[[["self"]],["str"]]],[11,"from_i32","","",1,[[["i32"]],["errno"]]],[11,"clear","","",1,N],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",1,[[["s"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"features","nix","",N,N],[5,"socket_atomic_cloexec","nix::features","",N,[[],["bool"]]],[0,"fcntl","nix","",N,N],[3,"AtFlags","nix::fcntl","",N,N],[3,"OFlag","","Configuration options for opened files.",N,N],[3,"SealFlag","","Additional flags for file sealing, which allows for limiting operations on a file.",N,N],[3,"FdFlag","","Additional configuration flags for `fcntl`'s `F_SETFD`.",N,N],[3,"SpliceFFlags","","Additional flags to `splice` and friends.",N,N],[3,"FallocateFlags","","Mode argument flags for fallocate determining operation performed on a given range.",N,N],[4,"FcntlArg","","",N,N],[13,"F_DUPFD","","",3,N],[13,"F_DUPFD_CLOEXEC","","",3,N],[13,"F_GETFD","","",3,N],[13,"F_SETFD","","",3,N],[13,"F_GETFL","","",3,N],[13,"F_SETFL","","",3,N],[13,"F_SETLK","","",3,N],[13,"F_SETLKW","","",3,N],[13,"F_GETLK","","",3,N],[13,"F_OFD_SETLK","","",3,N],[13,"F_OFD_SETLKW","","",3,N],[13,"F_OFD_GETLK","","",3,N],[13,"F_ADD_SEALS","","",3,N],[13,"F_GET_SEALS","","",3,N],[13,"F_GETPIPE_SZ","","",3,N],[13,"F_SETPIPE_SZ","","",3,N],[4,"FlockArg","","",N,N],[13,"LockShared","","",4,N],[13,"LockExclusive","","",4,N],[13,"Unlock","","",4,N],[13,"LockSharedNonblock","","",4,N],[13,"LockExclusiveNonblock","","",4,N],[13,"UnlockNonblock","","",4,N],[5,"open","","",N,[[["p"],["oflag"],["mode"]],["result",["rawfd"]]]],[5,"openat","","",N,[[["rawfd"],["p"],["oflag"],["mode"]],["result",["rawfd"]]]],[5,"readlink","","",N,N],[5,"readlinkat","","",N,N],[5,"fcntl","","",N,[[["rawfd"],["fcntlarg"]],["result",["c_int"]]]],[5,"flock","","",N,[[["rawfd"],["flockarg"]],["result"]]],[5,"splice","","",N,[[["rawfd"],["option",["loff_t"]],["rawfd"],["option",["loff_t"]],["usize"],["splicefflags"]],["result",["usize"]]]],[5,"tee","","",N,[[["rawfd"],["rawfd"],["usize"],["splicefflags"]],["result",["usize"]]]],[5,"vmsplice","","",N,N],[5,"fallocate","","Manipulates file space.",N,[[["rawfd"],["fallocateflags"],["off_t"],["off_t"]],["result",["c_int"]]]],[11,"eq","","",5,[[["self"],["atflags"]],["bool"]]],[11,"ne","","",5,[[["self"],["atflags"]],["bool"]]],[11,"clone","","",5,[[["self"]],["atflags"]]],[11,"partial_cmp","","",5,[[["self"],["atflags"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["atflags"]],["bool"]]],[11,"le","","",5,[[["self"],["atflags"]],["bool"]]],[11,"gt","","",5,[[["self"],["atflags"]],["bool"]]],[11,"ge","","",5,[[["self"],["atflags"]],["bool"]]],[11,"cmp","","",5,[[["self"],["atflags"]],["ordering"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[18,"AT_SYMLINK_NOFOLLOW","","",5,N],[18,"AT_NO_AUTOMOUNT","","",5,N],[18,"AT_EMPTY_PATH","","",5,N],[11,"empty","","Returns an empty set of flags.",5,[[],["atflags"]]],[11,"all","","Returns the set containing all flags.",5,[[],["atflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",5,[[["c_int"]],["option",["atflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",5,[[["c_int"]],["atflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,[[["self"],["atflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,[[["self"],["atflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["self"],["atflags"]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["self"],["atflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["self"],["atflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",5,[[["self"],["atflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["self"],["atflags"]],["atflags"]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["self"],["atflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,[[["self"],["atflags"]],["atflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["self"],["atflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["self"],["atflags"]],["atflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["self"],["atflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",5,[[["self"],["atflags"]],["atflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["self"],["atflags"]]]],[11,"not","","Returns the complement of this set of flags.",5,[[["self"]],["atflags"]]],[11,"extend","","",5,[[["self"],["t"]]]],[11,"from_iter","","",5,[[["t"]],["atflags"]]],[11,"eq","","",6,[[["self"],["oflag"]],["bool"]]],[11,"ne","","",6,[[["self"],["oflag"]],["bool"]]],[11,"clone","","",6,[[["self"]],["oflag"]]],[11,"partial_cmp","","",6,[[["self"],["oflag"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["oflag"]],["bool"]]],[11,"le","","",6,[[["self"],["oflag"]],["bool"]]],[11,"gt","","",6,[[["self"],["oflag"]],["bool"]]],[11,"ge","","",6,[[["self"],["oflag"]],["bool"]]],[11,"cmp","","",6,[[["self"],["oflag"]],["ordering"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[18,"O_ACCMODE","","Mask for the access mode of the file.",6,N],[18,"O_APPEND","","Open the file in append-only mode.",6,N],[18,"O_ASYNC","","Generate a signal when input or output becomes possible.",6,N],[18,"O_CLOEXEC","","Closes the file descriptor once an `execve` call is made.",6,N],[18,"O_CREAT","","Create the file if it does not exist.",6,N],[18,"O_DIRECT","","Try to minimize cache effects of the I/O for this file.",6,N],[18,"O_DIRECTORY","","If the specified path isn't a directory, fail.",6,N],[18,"O_DSYNC","","Implicitly follow each `write()` with an `fdatasync()`.",6,N],[18,"O_EXCL","","Error out if a file was not created.",6,N],[18,"O_FSYNC","","Same as `O_SYNC`.",6,N],[18,"O_LARGEFILE","","Allow files whose sizes can't be represented in an `off_t` to be opened.",6,N],[18,"O_NOATIME","","Do not update the file last access time during `read(2)`s.",6,N],[18,"O_NOCTTY","","Don't attach the device as the process' controlling terminal.",6,N],[18,"O_NDELAY","","Same as `O_NONBLOCK`.",6,N],[18,"O_NOFOLLOW","","`open()` will fail if the given path is a symbolic link.",6,N],[18,"O_NONBLOCK","","When possible, open the file in nonblocking mode.",6,N],[18,"O_PATH","","Obtain a file descriptor for low-level access.",6,N],[18,"O_RDONLY","","Only allow reading.",6,N],[18,"O_RDWR","","Allow both reading and writing.",6,N],[18,"O_RSYNC","","Similar to `O_DSYNC` but applies to `read`s instead.",6,N],[18,"O_SYNC","","Implicitly follow each `write()` with an `fsync()`.",6,N],[18,"O_TMPFILE","","Create an unnamed temporary file.",6,N],[18,"O_TRUNC","","Truncate an existing regular file to 0 length if it allows writing.",6,N],[18,"O_WRONLY","","Only allow writing.",6,N],[11,"empty","","Returns an empty set of flags.",6,[[],["oflag"]]],[11,"all","","Returns the set containing all flags.",6,[[],["oflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,[[["c_int"]],["option",["oflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,[[["c_int"]],["oflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,[[["self"],["oflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,[[["self"],["oflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["self"],["oflag"]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["self"],["oflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["self"],["oflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",6,[[["self"],["oflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["self"],["oflag"]],["oflag"]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["self"],["oflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,[[["self"],["oflag"]],["oflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["self"],["oflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["self"],["oflag"]],["oflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["self"],["oflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["self"],["oflag"]],["oflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["self"],["oflag"]]]],[11,"not","","Returns the complement of this set of flags.",6,[[["self"]],["oflag"]]],[11,"extend","","",6,[[["self"],["t"]]]],[11,"from_iter","","",6,[[["t"]],["oflag"]]],[11,"eq","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"ne","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"clone","","",7,[[["self"]],["sealflag"]]],[11,"partial_cmp","","",7,[[["self"],["sealflag"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"le","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"gt","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"ge","","",7,[[["self"],["sealflag"]],["bool"]]],[11,"cmp","","",7,[[["self"],["sealflag"]],["ordering"]]],[11,"hash","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[18,"F_SEAL_SEAL","","Prevents further calls to `fcntl()` with `F_ADD_SEALS`.",7,N],[18,"F_SEAL_SHRINK","","The file cannot be reduced in size.",7,N],[18,"F_SEAL_GROW","","The size of the file cannot be increased.",7,N],[18,"F_SEAL_WRITE","","The file contents cannot be modified.",7,N],[11,"empty","","Returns an empty set of flags.",7,[[],["sealflag"]]],[11,"all","","Returns the set containing all flags.",7,[[],["sealflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,[[["c_int"]],["option",["sealflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,[[["c_int"]],["sealflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,[[["self"],["sealflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,[[["self"],["sealflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["sealflag"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["sealflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["sealflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",7,[[["self"],["sealflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["self"],["sealflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["self"],["sealflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["self"],["sealflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["self"],["sealflag"]],["sealflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["self"],["sealflag"]]]],[11,"not","","Returns the complement of this set of flags.",7,[[["self"]],["sealflag"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"from_iter","","",7,[[["t"]],["sealflag"]]],[11,"eq","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"ne","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"clone","","",8,[[["self"]],["fdflag"]]],[11,"partial_cmp","","",8,[[["self"],["fdflag"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"le","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"gt","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"ge","","",8,[[["self"],["fdflag"]],["bool"]]],[11,"cmp","","",8,[[["self"],["fdflag"]],["ordering"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[18,"FD_CLOEXEC","","The file descriptor will automatically be closed during a successful `execve(2)`.",8,N],[11,"empty","","Returns an empty set of flags.",8,[[],["fdflag"]]],[11,"all","","Returns the set containing all flags.",8,[[],["fdflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,[[["c_int"]],["option",["fdflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,[[["c_int"]],["fdflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",8,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,[[["self"],["fdflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,[[["self"],["fdflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["self"],["fdflag"]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["self"],["fdflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["self"],["fdflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",8,[[["self"],["fdflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitor_assign","","Adds the set of flags.",8,[[["self"],["fdflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",8,[[["self"],["fdflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",8,[[["self"],["fdflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",8,[[["self"],["fdflag"]],["fdflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",8,[[["self"],["fdflag"]]]],[11,"not","","Returns the complement of this set of flags.",8,[[["self"]],["fdflag"]]],[11,"extend","","",8,[[["self"],["t"]]]],[11,"from_iter","","",8,[[["t"]],["fdflag"]]],[11,"eq","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"ne","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"clone","","",9,[[["self"]],["splicefflags"]]],[11,"partial_cmp","","",9,[[["self"],["splicefflags"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"le","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"gt","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"ge","","",9,[[["self"],["splicefflags"]],["bool"]]],[11,"cmp","","",9,[[["self"],["splicefflags"]],["ordering"]]],[11,"hash","","",9,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[18,"SPLICE_F_MOVE","","Request that pages be moved instead of copied.",9,N],[18,"SPLICE_F_NONBLOCK","","Do not block on I/O.",9,N],[18,"SPLICE_F_MORE","","Hint that more data will be coming in a subsequent splice.",9,N],[18,"SPLICE_F_GIFT","","Gift the user pages to the kernel.",9,N],[11,"empty","","Returns an empty set of flags.",9,[[],["splicefflags"]]],[11,"all","","Returns the set containing all flags.",9,[[],["splicefflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",9,[[["self"]],["c_uint"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,[[["c_uint"]],["option",["splicefflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,[[["c_uint"]],["splicefflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",9,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,[[["self"],["splicefflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,[[["self"],["splicefflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",9,[[["self"],["splicefflags"]]]],[11,"remove","","Removes the specified flags in-place.",9,[[["self"],["splicefflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",9,[[["self"],["splicefflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",9,[[["self"],["splicefflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"bitor_assign","","Adds the set of flags.",9,[[["self"],["splicefflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",9,[[["self"],["splicefflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",9,[[["self"],["splicefflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",9,[[["self"],["splicefflags"]],["splicefflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",9,[[["self"],["splicefflags"]]]],[11,"not","","Returns the complement of this set of flags.",9,[[["self"]],["splicefflags"]]],[11,"extend","","",9,[[["self"],["t"]]]],[11,"from_iter","","",9,[[["t"]],["splicefflags"]]],[11,"eq","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"ne","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"clone","","",10,[[["self"]],["fallocateflags"]]],[11,"partial_cmp","","",10,[[["self"],["fallocateflags"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"le","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"gt","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"ge","","",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"cmp","","",10,[[["self"],["fallocateflags"]],["ordering"]]],[11,"hash","","",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[18,"FALLOC_FL_KEEP_SIZE","","File size is not changed.",10,N],[18,"FALLOC_FL_PUNCH_HOLE","","Deallocates space by creating a hole.",10,N],[18,"FALLOC_FL_COLLAPSE_RANGE","","Removes byte range from a file without leaving a hole.",10,N],[18,"FALLOC_FL_ZERO_RANGE","","Zeroes space in specified byte range.",10,N],[18,"FALLOC_FL_INSERT_RANGE","","Increases file space by inserting a hole within the file size.",10,N],[18,"FALLOC_FL_UNSHARE_RANGE","","Shared file data extants are made private to the file.",10,N],[11,"empty","","Returns an empty set of flags.",10,[[],["fallocateflags"]]],[11,"all","","Returns the set containing all flags.",10,[[],["fallocateflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",10,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,[[["c_int"]],["option",["fallocateflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,[[["c_int"]],["fallocateflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",10,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,[[["self"],["fallocateflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",10,[[["self"],["fallocateflags"]]]],[11,"remove","","Removes the specified flags in-place.",10,[[["self"],["fallocateflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",10,[[["self"],["fallocateflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,[[["self"],["fallocateflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"bitor_assign","","Adds the set of flags.",10,[[["self"],["fallocateflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",10,[[["self"],["fallocateflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",10,[[["self"],["fallocateflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",10,[[["self"],["fallocateflags"]],["fallocateflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",10,[[["self"],["fallocateflags"]]]],[11,"not","","Returns the complement of this set of flags.",10,[[["self"]],["fallocateflags"]]],[11,"extend","","",10,[[["self"],["t"]]]],[11,"from_iter","","",10,[[["t"]],["fallocateflags"]]],[0,"mount","nix","",N,N],[3,"MsFlags","nix::mount","",N,N],[3,"MntFlags","","",N,N],[5,"mount","","",N,[[["option"],["p2"],["option"],["msflags"],["option"]],["result"]]],[5,"umount","","",N,[[["p"]],["result"]]],[5,"umount2","","",N,[[["p"],["mntflags"]],["result"]]],[11,"eq","","",11,[[["self"],["msflags"]],["bool"]]],[11,"ne","","",11,[[["self"],["msflags"]],["bool"]]],[11,"clone","","",11,[[["self"]],["msflags"]]],[11,"partial_cmp","","",11,[[["self"],["msflags"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["msflags"]],["bool"]]],[11,"le","","",11,[[["self"],["msflags"]],["bool"]]],[11,"gt","","",11,[[["self"],["msflags"]],["bool"]]],[11,"ge","","",11,[[["self"],["msflags"]],["bool"]]],[11,"cmp","","",11,[[["self"],["msflags"]],["ordering"]]],[11,"hash","","",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[18,"MS_RDONLY","","Mount read-only",11,N],[18,"MS_NOSUID","","Ignore suid and sgid bits",11,N],[18,"MS_NODEV","","Disallow access to device special files",11,N],[18,"MS_NOEXEC","","Disallow program execution",11,N],[18,"MS_SYNCHRONOUS","","Writes are synced at once",11,N],[18,"MS_REMOUNT","","Alter flags of a mounted FS",11,N],[18,"MS_MANDLOCK","","Allow mandatory locks on a FS",11,N],[18,"MS_DIRSYNC","","Directory modifications are synchronous",11,N],[18,"MS_NOATIME","","Do not update access times",11,N],[18,"MS_NODIRATIME","","Do not update directory access times",11,N],[18,"MS_BIND","","Linux 2.4.0 - Bind directory at different place",11,N],[18,"MS_MOVE","","",11,N],[18,"MS_REC","","",11,N],[18,"MS_SILENT","","",11,N],[18,"MS_POSIXACL","","",11,N],[18,"MS_UNBINDABLE","","",11,N],[18,"MS_PRIVATE","","",11,N],[18,"MS_SLAVE","","",11,N],[18,"MS_SHARED","","",11,N],[18,"MS_RELATIME","","",11,N],[18,"MS_KERNMOUNT","","",11,N],[18,"MS_I_VERSION","","",11,N],[18,"MS_STRICTATIME","","",11,N],[18,"MS_ACTIVE","","",11,N],[18,"MS_NOUSER","","",11,N],[18,"MS_RMT_MASK","","",11,N],[18,"MS_MGC_VAL","","",11,N],[18,"MS_MGC_MSK","","",11,N],[11,"empty","","Returns an empty set of flags.",11,[[],["msflags"]]],[11,"all","","Returns the set containing all flags.",11,[[],["msflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",11,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,[[["c_ulong"]],["option",["msflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,[[["c_ulong"]],["msflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",11,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,[[["self"],["msflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,[[["self"],["msflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",11,[[["self"],["msflags"]]]],[11,"remove","","Removes the specified flags in-place.",11,[[["self"],["msflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",11,[[["self"],["msflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",11,[[["self"],["msflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",11,[[["self"],["msflags"]],["msflags"]]],[11,"bitor_assign","","Adds the set of flags.",11,[[["self"],["msflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,[[["self"],["msflags"]],["msflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",11,[[["self"],["msflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",11,[[["self"],["msflags"]],["msflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",11,[[["self"],["msflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",11,[[["self"],["msflags"]],["msflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",11,[[["self"],["msflags"]]]],[11,"not","","Returns the complement of this set of flags.",11,[[["self"]],["msflags"]]],[11,"extend","","",11,[[["self"],["t"]]]],[11,"from_iter","","",11,[[["t"]],["msflags"]]],[11,"eq","","",12,[[["self"],["mntflags"]],["bool"]]],[11,"ne","","",12,[[["self"],["mntflags"]],["bool"]]],[11,"clone","","",12,[[["self"]],["mntflags"]]],[11,"partial_cmp","","",12,[[["self"],["mntflags"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["mntflags"]],["bool"]]],[11,"le","","",12,[[["self"],["mntflags"]],["bool"]]],[11,"gt","","",12,[[["self"],["mntflags"]],["bool"]]],[11,"ge","","",12,[[["self"],["mntflags"]],["bool"]]],[11,"cmp","","",12,[[["self"],["mntflags"]],["ordering"]]],[11,"hash","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[18,"MNT_FORCE","","",12,N],[18,"MNT_DETACH","","",12,N],[18,"MNT_EXPIRE","","",12,N],[11,"empty","","Returns an empty set of flags.",12,[[],["mntflags"]]],[11,"all","","Returns the set containing all flags.",12,[[],["mntflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",12,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,[[["c_int"]],["option",["mntflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,[[["c_int"]],["mntflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",12,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,[[["self"],["mntflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,[[["self"],["mntflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",12,[[["self"],["mntflags"]]]],[11,"remove","","Removes the specified flags in-place.",12,[[["self"],["mntflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",12,[[["self"],["mntflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,[[["self"],["mntflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",12,[[["self"],["mntflags"]],["mntflags"]]],[11,"bitor_assign","","Adds the set of flags.",12,[[["self"],["mntflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,[[["self"],["mntflags"]],["mntflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",12,[[["self"],["mntflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",12,[[["self"],["mntflags"]],["mntflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",12,[[["self"],["mntflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",12,[[["self"],["mntflags"]],["mntflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",12,[[["self"],["mntflags"]]]],[11,"not","","Returns the complement of this set of flags.",12,[[["self"]],["mntflags"]]],[11,"extend","","",12,[[["self"],["t"]]]],[11,"from_iter","","",12,[[["t"]],["mntflags"]]],[0,"mqueue","nix","Posix Message Queue functions",N,N],[3,"MQ_OFlag","nix::mqueue","",N,N],[3,"FdFlag","","",N,N],[3,"MqAttr","","",N,N],[5,"mq_open","","Open a message queue",N,[[["cstring"],["mq_oflag"],["mode"],["option",["mqattr"]]],["result",["mqd_t"]]]],[5,"mq_unlink","","Remove a message queue",N,[[["cstring"]],["result"]]],[5,"mq_close","","Close a message queue",N,[[["mqd_t"]],["result"]]],[5,"mq_receive","","Receive a message from a message queue",N,N],[5,"mq_send","","Send a message to a message queue",N,N],[5,"mq_getattr","","Get message queue attributes",N,[[["mqd_t"]],["result",["mqattr"]]]],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored Returns the old attributes It is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",N,[[["mqd_t"],["mqattr"]],["result",["mqattr"]]]],[5,"mq_set_nonblock","","Convenience function. Sets the `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",N,[[["mqd_t"]],["result",["mqattr"]]]],[5,"mq_remove_nonblock","","Convenience function. Removes `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",N,[[["mqd_t"]],["result",["mqattr"]]]],[11,"eq","","",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"ne","","",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"clone","","",13,[[["self"]],["mq_oflag"]]],[11,"partial_cmp","","",13,[[["self"],["mq_oflag"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"le","","",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"gt","","",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"ge","","",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"cmp","","",13,[[["self"],["mq_oflag"]],["ordering"]]],[11,"hash","","",13,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[18,"O_RDONLY","","",13,N],[18,"O_WRONLY","","",13,N],[18,"O_RDWR","","",13,N],[18,"O_CREAT","","",13,N],[18,"O_EXCL","","",13,N],[18,"O_NONBLOCK","","",13,N],[18,"O_CLOEXEC","","",13,N],[11,"empty","","Returns an empty set of flags.",13,[[],["mq_oflag"]]],[11,"all","","Returns the set containing all flags.",13,[[],["mq_oflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",13,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,[[["c_int"]],["option",["mq_oflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,[[["c_int"]],["mq_oflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",13,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,[[["self"],["mq_oflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",13,[[["self"],["mq_oflag"]]]],[11,"remove","","Removes the specified flags in-place.",13,[[["self"],["mq_oflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",13,[[["self"],["mq_oflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,[[["self"],["mq_oflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",13,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"bitor_assign","","Adds the set of flags.",13,[[["self"],["mq_oflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",13,[[["self"],["mq_oflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",13,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",13,[[["self"],["mq_oflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",13,[[["self"],["mq_oflag"]],["mq_oflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",13,[[["self"],["mq_oflag"]]]],[11,"not","","Returns the complement of this set of flags.",13,[[["self"]],["mq_oflag"]]],[11,"extend","","",13,[[["self"],["t"]]]],[11,"from_iter","","",13,[[["t"]],["mq_oflag"]]],[11,"eq","","",14,[[["self"],["fdflag"]],["bool"]]],[11,"ne","","",14,[[["self"],["fdflag"]],["bool"]]],[11,"clone","","",14,[[["self"]],["fdflag"]]],[11,"partial_cmp","","",14,[[["self"],["fdflag"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["fdflag"]],["bool"]]],[11,"le","","",14,[[["self"],["fdflag"]],["bool"]]],[11,"gt","","",14,[[["self"],["fdflag"]],["bool"]]],[11,"ge","","",14,[[["self"],["fdflag"]],["bool"]]],[11,"cmp","","",14,[[["self"],["fdflag"]],["ordering"]]],[11,"hash","","",14,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[18,"FD_CLOEXEC","","",14,N],[11,"empty","","Returns an empty set of flags.",14,[[],["fdflag"]]],[11,"all","","Returns the set containing all flags.",14,[[],["fdflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",14,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,[[["c_int"]],["option",["fdflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,[[["c_int"]],["fdflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",14,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,[[["self"],["fdflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,[[["self"],["fdflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",14,[[["self"],["fdflag"]]]],[11,"remove","","Removes the specified flags in-place.",14,[[["self"],["fdflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",14,[[["self"],["fdflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",14,[[["self"],["fdflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",14,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitor_assign","","Adds the set of flags.",14,[[["self"],["fdflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",14,[[["self"],["fdflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",14,[[["self"],["fdflag"]],["fdflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",14,[[["self"],["fdflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",14,[[["self"],["fdflag"]],["fdflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",14,[[["self"],["fdflag"]]]],[11,"not","","Returns the complement of this set of flags.",14,[[["self"]],["fdflag"]]],[11,"extend","","",14,[[["self"],["t"]]]],[11,"from_iter","","",14,[[["t"]],["fdflag"]]],[11,"clone","","",15,[[["self"]],["mqattr"]]],[11,"eq","","",15,[[["self"],["mqattr"]],["bool"]]],[11,"new","","",15,[[["c_long"],["c_long"],["c_long"],["c_long"]],["mqattr"]]],[11,"flags","","",15,[[["self"]],["c_long"]]],[0,"pty","nix","Create master and slave virtual pseudo-terminals (PTYs)",N,N],[6,"SessionId","nix::pty","",N,N],[3,"Winsize","","",N,N],[12,"ws_row","","",16,N],[12,"ws_col","","",16,N],[12,"ws_xpixel","","",16,N],[12,"ws_ypixel","","",16,N],[3,"OpenptyResult","","Representation of a master/slave pty pair",N,N],[12,"master","","",17,N],[12,"slave","","",17,N],[3,"PtyMaster","","Representation of the Master device in a master/slave pty pair",N,N],[5,"grantpt","","Grant access to a slave pseudoterminal (see `grantpt(3)`)",N,[[["ptymaster"]],["result"]]],[5,"posix_openpt","","Open a pseudoterminal device (see `posix_openpt(3)`)",N,[[["oflag"]],["result",["ptymaster"]]]],[5,"ptsname","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",N,[[["ptymaster"]],["result",["string"]]]],[5,"ptsname_r","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",N,[[["ptymaster"]],["result",["string"]]]],[5,"unlockpt","","Unlock a pseudoterminal master/slave pseudoterminal pair (see `unlockpt(3)`)",N,[[["ptymaster"]],["result"]]],[5,"openpty","","Create a new pseudoterminal, returning the slave and master file descriptors in `OpenptyResult` (see `openpty`).",N,[[["t"],["u"]],["result",["openptyresult"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",18,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",18,[[["self"]],["rawfd"]]],[11,"drop","","",18,[[["self"]]]],[0,"poll","nix","",N,N],[3,"PollFd","nix::poll","This is a wrapper around `libc::pollfd`.",N,N],[3,"EventFlags","","These flags define the different events that can be monitored by `poll` and `ppoll`",N,N],[5,"poll","","`poll` waits for one of a set of file descriptors to become ready to perform I/O. (`poll(2)`)",N,N],[5,"ppoll","","`ppoll()` allows an application to safely wait until either a file descriptor becomes ready or until a signal is caught. (`poll(2)`)",N,N],[11,"clone","","",19,[[["self"]],["pollfd"]]],[11,"new","","Creates a new `PollFd` specifying the events of interest for a given file descriptor.",19,[[["rawfd"],["eventflags"]],["pollfd"]]],[11,"revents","","Returns the events that occured in the last call to `poll` or `ppoll`.",19,[[["self"]],["option",["eventflags"]]]],[11,"eq","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"clone","","",20,[[["self"]],["eventflags"]]],[11,"partial_cmp","","",20,[[["self"],["eventflags"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"le","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"gt","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"ge","","",20,[[["self"],["eventflags"]],["bool"]]],[11,"cmp","","",20,[[["self"],["eventflags"]],["ordering"]]],[11,"hash","","",20,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[18,"POLLIN","","There is data to read.",20,N],[18,"POLLPRI","","There is some exceptional condition on the file descriptor.",20,N],[18,"POLLOUT","","Writing is now possible, though a write larger that the available space in a socket or pipe will still block (unless `O_NONBLOCK` is set).",20,N],[18,"POLLRDNORM","","Equivalent to `POLLIN`",20,N],[18,"POLLWRNORM","","Equivalent to `POLLOUT`",20,N],[18,"POLLRDBAND","","Priority band data can be read (generally unused on Linux).",20,N],[18,"POLLWRBAND","","Priority data may be written.",20,N],[18,"POLLERR","","Error condition (only returned in `PollFd::revents`; ignored in `PollFd::new`). This bit is also set for a file descriptor referring to the write end of a pipe when the read end has been closed.",20,N],[18,"POLLHUP","","Hang up (only returned in `PollFd::revents`; ignored in `PollFd::new`). Note that when reading from a channel such as a pipe or a stream socket, this event merely indicates that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all outstanding data in the channel has been consumed.",20,N],[18,"POLLNVAL","","Invalid request: `fd` not open (only returned in `PollFd::revents`; ignored in `PollFd::new`).",20,N],[11,"empty","","Returns an empty set of flags.",20,[[],["eventflags"]]],[11,"all","","Returns the set containing all flags.",20,[[],["eventflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[["self"]],["c_short"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",20,[[["c_short"]],["option",["eventflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",20,[[["c_short"]],["eventflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",20,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,[[["self"],["eventflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,[[["self"],["eventflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["self"],["eventflags"]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["self"],["eventflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["self"],["eventflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",20,[[["self"],["eventflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"bitor_assign","","Adds the set of flags.",20,[[["self"],["eventflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",20,[[["self"],["eventflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",20,[[["self"],["eventflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",20,[[["self"],["eventflags"]],["eventflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",20,[[["self"],["eventflags"]]]],[11,"not","","Returns the complement of this set of flags.",20,[[["self"]],["eventflags"]]],[11,"extend","","",20,[[["self"],["t"]]]],[11,"from_iter","","",20,[[["t"]],["eventflags"]]],[0,"net","nix","",N,N],[0,"if_","nix::net","Network interface name resolution.",N,N],[3,"InterfaceFlags","nix::net::if_","Standard interface flags, used by `getifaddrs`",N,N],[5,"if_nametoindex","","Resolve an interface into a interface number.",N,[[["p"]],["result",["c_uint"]]]],[11,"eq","","",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"ne","","",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["interfaceflags"]]],[11,"partial_cmp","","",21,[[["self"],["interfaceflags"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"le","","",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"gt","","",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"ge","","",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"cmp","","",21,[[["self"],["interfaceflags"]],["ordering"]]],[11,"hash","","",21,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[18,"IFF_UP","","Interface is running. (see `netdevice(7)`)",21,N],[18,"IFF_BROADCAST","","Valid broadcast address set. (see `netdevice(7)`)",21,N],[18,"IFF_DEBUG","","Internal debugging flag. (see `netdevice(7)`)",21,N],[18,"IFF_LOOPBACK","","Interface is a loopback interface. (see `netdevice(7)`)",21,N],[18,"IFF_POINTOPOINT","","Interface is a point-to-point link. (see `netdevice(7)`)",21,N],[18,"IFF_NOTRAILERS","","Avoid use of trailers. (see `netdevice(7)`)",21,N],[18,"IFF_RUNNING","","Resources allocated. (see `netdevice(7)`)",21,N],[18,"IFF_NOARP","","No arp protocol, L2 destination address not set. (see `netdevice(7)`)",21,N],[18,"IFF_PROMISC","","Interface is in promiscuous mode. (see `netdevice(7)`)",21,N],[18,"IFF_ALLMULTI","","Receive all multicast packets. (see `netdevice(7)`)",21,N],[18,"IFF_MASTER","","Master of a load balancing bundle. (see `netdevice(7)`)",21,N],[18,"IFF_SLAVE","","Slave of a load balancing bundle. (see `netdevice(7)`)",21,N],[18,"IFF_MULTICAST","","Supports multicast. (see `netdevice(7)`)",21,N],[18,"IFF_PORTSEL","","Is able to select media type via ifmap. (see `netdevice(7)`)",21,N],[18,"IFF_AUTOMEDIA","","Auto media selection active. (see `netdevice(7)`)",21,N],[18,"IFF_DYNAMIC","","The addresses are lost when the interface goes down. (see `netdevice(7)`)",21,N],[18,"IFF_LOWER_UP","","Driver signals L1 up. Volatile.",21,N],[18,"IFF_DORMANT","","Driver signals dormant. Volatile.",21,N],[18,"IFF_ECHO","","Echo sent packets. Volatile.",21,N],[11,"empty","","Returns an empty set of flags.",21,[[],["interfaceflags"]]],[11,"all","","Returns the set containing all flags.",21,[[],["interfaceflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",21,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,[[["c_int"]],["option",["interfaceflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,[[["c_int"]],["interfaceflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",21,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,[[["self"],["interfaceflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",21,[[["self"],["interfaceflags"]]]],[11,"remove","","Removes the specified flags in-place.",21,[[["self"],["interfaceflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",21,[[["self"],["interfaceflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",21,[[["self"],["interfaceflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",21,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"bitor_assign","","Adds the set of flags.",21,[[["self"],["interfaceflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",21,[[["self"],["interfaceflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",21,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",21,[[["self"],["interfaceflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",21,[[["self"],["interfaceflags"]],["interfaceflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",21,[[["self"],["interfaceflags"]]]],[11,"not","","Returns the complement of this set of flags.",21,[[["self"]],["interfaceflags"]]],[11,"extend","","",21,[[["self"],["t"]]]],[11,"from_iter","","",21,[[["t"]],["interfaceflags"]]],[0,"ifaddrs","nix","Query network interface addresses",N,N],[3,"InterfaceAddress","nix::ifaddrs","Describes a single address for an interface as returned by `getifaddrs`.",N,N],[12,"interface_name","","Name of the network interface",22,N],[12,"flags","","Flags as from `SIOCGIFFLAGS` ioctl",22,N],[12,"address","","Network address of this interface",22,N],[12,"netmask","","Netmask of this interface",22,N],[12,"broadcast","","Broadcast address of this interface, if applicable",22,N],[12,"destination","","Point-to-point destination address",22,N],[3,"InterfaceAddressIterator","","Holds the results of `getifaddrs`.",N,N],[5,"getifaddrs","","Get interface addresses using libc's `getifaddrs`",N,[[],["result",["interfaceaddressiterator"]]]],[11,"clone","","",22,[[["self"]],["interfaceaddress"]]],[11,"hash","","",22,N],[11,"eq","","",22,[[["self"],["interfaceaddress"]],["bool"]]],[11,"ne","","",22,[[["self"],["interfaceaddress"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"hash","","",23,N],[11,"eq","","",23,[[["self"],["interfaceaddressiterator"]],["bool"]]],[11,"ne","","",23,[[["self"],["interfaceaddressiterator"]],["bool"]]],[11,"drop","","",23,[[["self"]]]],[11,"next","","",23,[[["self"]],["option"]]],[0,"sched","nix","",N,N],[3,"CloneFlags","nix::sched","",N,N],[3,"CpuSet","","",N,N],[5,"sched_setaffinity","","",N,[[["pid"],["cpuset"]],["result"]]],[5,"clone","","",N,N],[5,"unshare","","",N,[[["cloneflags"]],["result"]]],[5,"setns","","",N,[[["rawfd"],["cloneflags"]],["result"]]],[6,"CloneCb","","",N,N],[11,"eq","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"ne","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"clone","","",24,[[["self"]],["cloneflags"]]],[11,"partial_cmp","","",24,[[["self"],["cloneflags"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"le","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"gt","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"ge","","",24,[[["self"],["cloneflags"]],["bool"]]],[11,"cmp","","",24,[[["self"],["cloneflags"]],["ordering"]]],[11,"hash","","",24,N],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[18,"CLONE_VM","","",24,N],[18,"CLONE_FS","","",24,N],[18,"CLONE_FILES","","",24,N],[18,"CLONE_SIGHAND","","",24,N],[18,"CLONE_PTRACE","","",24,N],[18,"CLONE_VFORK","","",24,N],[18,"CLONE_PARENT","","",24,N],[18,"CLONE_THREAD","","",24,N],[18,"CLONE_NEWNS","","",24,N],[18,"CLONE_SYSVSEM","","",24,N],[18,"CLONE_SETTLS","","",24,N],[18,"CLONE_PARENT_SETTID","","",24,N],[18,"CLONE_CHILD_CLEARTID","","",24,N],[18,"CLONE_DETACHED","","",24,N],[18,"CLONE_UNTRACED","","",24,N],[18,"CLONE_CHILD_SETTID","","",24,N],[18,"CLONE_NEWCGROUP","","",24,N],[18,"CLONE_NEWUTS","","",24,N],[18,"CLONE_NEWIPC","","",24,N],[18,"CLONE_NEWUSER","","",24,N],[18,"CLONE_NEWPID","","",24,N],[18,"CLONE_NEWNET","","",24,N],[18,"CLONE_IO","","",24,N],[11,"empty","","Returns an empty set of flags.",24,[[],["cloneflags"]]],[11,"all","","Returns the set containing all flags.",24,[[],["cloneflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",24,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,[[["c_int"]],["option",["cloneflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,[[["c_int"]],["cloneflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",24,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,[[["self"],["cloneflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,[[["self"],["cloneflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",24,[[["self"],["cloneflags"]]]],[11,"remove","","Removes the specified flags in-place.",24,[[["self"],["cloneflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",24,[[["self"],["cloneflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",24,[[["self"],["cloneflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"bitor_assign","","Adds the set of flags.",24,[[["self"],["cloneflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",24,[[["self"],["cloneflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",24,[[["self"],["cloneflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",24,[[["self"],["cloneflags"]],["cloneflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",24,[[["self"],["cloneflags"]]]],[11,"not","","Returns the complement of this set of flags.",24,[[["self"]],["cloneflags"]]],[11,"extend","","",24,[[["self"],["t"]]]],[11,"from_iter","","",24,[[["t"]],["cloneflags"]]],[11,"clone","","",25,[[["self"]],["cpuset"]]],[11,"new","","",25,[[],["cpuset"]]],[11,"is_set","","",25,[[["self"],["usize"]],["result",["bool"]]]],[11,"set","","",25,[[["self"],["usize"]],["result"]]],[11,"unset","","",25,[[["self"],["usize"]],["result"]]],[0,"sys","nix","",N,N],[0,"aio","nix::sys","POSIX Asynchronous I/O",N,N],[3,"AioCb","nix::sys::aio","AIO Control Block.",N,N],[4,"AioFsyncMode","","Mode for `AioCb::fsync`.  Controls whether only data or both data and metadata are synced.",N,N],[13,"O_SYNC","","do it like `fsync`",26,N],[13,"O_DSYNC","","on supported operating systems only, do it like `fdatasync`",26,N],[4,"LioOpcode","","When used with `lio_listio`, determines whether a given `aiocb` should be used for a read operation, a write operation, or ignored.  Has no effect for any other aio functions.",N,N],[13,"LIO_NOP","","",27,N],[13,"LIO_WRITE","","",27,N],[13,"LIO_READ","","",27,N],[4,"LioMode","","Mode for `lio_listio`",N,N],[13,"LIO_WAIT","","Requests that `lio_listio` block until all requested operations have been completed",28,N],[13,"LIO_NOWAIT","","Requests that `lio_listio` return immediately",28,N],[4,"AioCancelStat","","Return values for `AioCb::cancel` and `aio_cancel_all`",N,N],[13,"AioCanceled","","All outstanding requests were canceled",29,N],[13,"AioNotCanceled","","Some requests were not canceled.  Their status should be checked with `AioCb::error`",29,N],[13,"AioAllDone","","All of the requests have already finished",29,N],[4,"Buffer","","Owns (uniquely or shared) a memory buffer to keep it from `Drop`ing while the kernel has a pointer to it.",N,N],[13,"None","","No buffer to own.",30,N],[13,"Bytes","","Immutable shared ownership `Bytes` object",30,N],[13,"BytesMut","","Mutable uniquely owned `BytesMut` object",30,N],[13,"Phantom","","Keeps a reference to a slice",30,N],[5,"aio_cancel_all","","Cancels outstanding AIO requests for a given file descriptor.",N,[[["rawfd"]],["result",["aiocancelstat"]]]],[5,"aio_suspend","","Suspends the calling process until at least one of the specified `AioCb`s has completed, a signal is delivered, or the timeout has passed.",N,N],[5,"lio_listio","","Submits multiple asynchronous I/O requests with a single system call.",N,N],[11,"clone","","",26,[[["self"]],["aiofsyncmode"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"hash","","",26,N],[11,"cmp","","",26,[[["self"],["aiofsyncmode"]],["ordering"]]],[11,"eq","","",26,[[["self"],["aiofsyncmode"]],["bool"]]],[11,"partial_cmp","","",26,[[["self"],["aiofsyncmode"]],["option",["ordering"]]]],[11,"clone","","",27,[[["self"]],["lioopcode"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"hash","","",27,N],[11,"cmp","","",27,[[["self"],["lioopcode"]],["ordering"]]],[11,"eq","","",27,[[["self"],["lioopcode"]],["bool"]]],[11,"partial_cmp","","",27,[[["self"],["lioopcode"]],["option",["ordering"]]]],[11,"clone","","",28,[[["self"]],["liomode"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"hash","","",28,N],[11,"cmp","","",28,[[["self"],["liomode"]],["ordering"]]],[11,"eq","","",28,[[["self"],["liomode"]],["bool"]]],[11,"partial_cmp","","",28,[[["self"],["liomode"]],["option",["ordering"]]]],[11,"clone","","",29,[[["self"]],["aiocancelstat"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["aiocancelstat"]],["bool"]]],[11,"clone","","",30,[[["self"]],["buffer"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"bytes","","Return the inner `Bytes`, if any",30,[[["self"]],["option",["bytes"]]]],[11,"bytes_mut","","Return the inner `BytesMut`, if any",30,[[["self"]],["option",["bytesmut"]]]],[11,"is_none","","Is this `Buffer` `None`?",30,[[["self"]],["bool"]]],[11,"buffer","","Remove the inner `Buffer` and return it",31,[[["self"]],["buffer"]]],[11,"fd","","Returns the underlying file descriptor associated with the `AioCb`",31,[[["self"]],["rawfd"]]],[11,"from_fd","","Constructs a new `AioCb` with no associated buffer.",31,[[["rawfd"],["c_int"],["sigevnotify"]],["aiocb"]]],[11,"from_mut_slice","","Constructs a new `AioCb` from a mutable slice.",31,N],[11,"from_bytes","","Constructs a new `AioCb` from a `Bytes` object.",31,[[["rawfd"],["off_t"],["bytes"],["c_int"],["sigevnotify"],["lioopcode"]],["aiocb"]]],[11,"from_bytes_mut","","Constructs a new `AioCb` from a `BytesMut` object.",31,[[["rawfd"],["off_t"],["bytesmut"],["c_int"],["sigevnotify"],["lioopcode"]],["aiocb"]]],[11,"from_mut_ptr","","Constructs a new `AioCb` from a mutable raw pointer",31,N],[11,"from_ptr","","Constructs a new `AioCb` from a raw pointer.",31,N],[11,"from_slice","","Like `from_mut_slice`, but works on constant slices rather than mutable slices.",31,N],[11,"into_buffer","","Consumes the `aiocb` and returns its inner `Buffer`, if any.",31,[[["self"]],["buffer"]]],[11,"set_sigev_notify","","Update the notification settings for an existing `aiocb`",31,[[["self"],["sigevnotify"]]]],[11,"cancel","","Cancels an outstanding AIO request.",31,[[["self"]],["result",["aiocancelstat"]]]],[11,"error","","Retrieve error status of an asynchronous operation.",31,[[["self"]],["result"]]],[11,"fsync","","An asynchronous version of `fsync(2)`.",31,[[["self"],["aiofsyncmode"]],["result"]]],[11,"lio_opcode","","Returns the `aiocb`'s `LioOpcode` field",31,[[["self"]],["option",["lioopcode"]]]],[11,"nbytes","","Returns the requested length of the aio operation in bytes",31,[[["self"]],["usize"]]],[11,"offset","","Returns the file offset stored in the `AioCb`",31,[[["self"]],["off_t"]]],[11,"priority","","Returns the priority of the `AioCb`",31,[[["self"]],["c_int"]]],[11,"read","","Asynchronously reads from a file descriptor into a buffer",31,[[["self"]],["result"]]],[11,"sigevent","","Returns the `SigEvent` stored in the `AioCb`",31,[[["self"]],["sigevent"]]],[11,"aio_return","","Retrieve return status of an asynchronous operation.",31,[[["self"]],["result",["isize"]]]],[11,"write","","Asynchronously writes from a buffer to a file descriptor",31,[[["self"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"drop","","If the `AioCb` has no remaining state in the kernel, just drop it. Otherwise, dropping constitutes a resource leak, which is an error",31,[[["self"]]]],[0,"epoll","nix::sys","",N,N],[3,"EpollFlags","nix::sys::epoll","",N,N],[3,"EpollCreateFlags","","",N,N],[3,"EpollEvent","","",N,N],[4,"EpollOp","","",N,N],[13,"EpollCtlAdd","","",32,N],[13,"EpollCtlDel","","",32,N],[13,"EpollCtlMod","","",32,N],[5,"epoll_create","","",N,[[],["result",["rawfd"]]]],[5,"epoll_create1","","",N,[[["epollcreateflags"]],["result",["rawfd"]]]],[5,"epoll_ctl","","",N,[[["rawfd"],["epollop"],["rawfd"],["t"]],["result"]]],[5,"epoll_wait","","",N,N],[11,"eq","","",33,[[["self"],["epollflags"]],["bool"]]],[11,"ne","","",33,[[["self"],["epollflags"]],["bool"]]],[11,"clone","","",33,[[["self"]],["epollflags"]]],[11,"partial_cmp","","",33,[[["self"],["epollflags"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["epollflags"]],["bool"]]],[11,"le","","",33,[[["self"],["epollflags"]],["bool"]]],[11,"gt","","",33,[[["self"],["epollflags"]],["bool"]]],[11,"ge","","",33,[[["self"],["epollflags"]],["bool"]]],[11,"cmp","","",33,[[["self"],["epollflags"]],["ordering"]]],[11,"hash","","",33,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[18,"EPOLLIN","","",33,N],[18,"EPOLLPRI","","",33,N],[18,"EPOLLOUT","","",33,N],[18,"EPOLLRDNORM","","",33,N],[18,"EPOLLRDBAND","","",33,N],[18,"EPOLLWRNORM","","",33,N],[18,"EPOLLWRBAND","","",33,N],[18,"EPOLLMSG","","",33,N],[18,"EPOLLERR","","",33,N],[18,"EPOLLHUP","","",33,N],[18,"EPOLLRDHUP","","",33,N],[18,"EPOLLEXCLUSIVE","","",33,N],[18,"EPOLLWAKEUP","","",33,N],[18,"EPOLLONESHOT","","",33,N],[18,"EPOLLET","","",33,N],[11,"empty","","Returns an empty set of flags.",33,[[],["epollflags"]]],[11,"all","","Returns the set containing all flags.",33,[[],["epollflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",33,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",33,[[["c_int"]],["option",["epollflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",33,[[["c_int"]],["epollflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",33,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,[[["self"],["epollflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,[[["self"],["epollflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",33,[[["self"],["epollflags"]]]],[11,"remove","","Removes the specified flags in-place.",33,[[["self"],["epollflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",33,[[["self"],["epollflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",33,[[["self"],["epollflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",33,[[["self"],["epollflags"]],["epollflags"]]],[11,"bitor_assign","","Adds the set of flags.",33,[[["self"],["epollflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,[[["self"],["epollflags"]],["epollflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",33,[[["self"],["epollflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",33,[[["self"],["epollflags"]],["epollflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",33,[[["self"],["epollflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",33,[[["self"],["epollflags"]],["epollflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",33,[[["self"],["epollflags"]]]],[11,"not","","Returns the complement of this set of flags.",33,[[["self"]],["epollflags"]]],[11,"extend","","",33,[[["self"],["t"]]]],[11,"from_iter","","",33,[[["t"]],["epollflags"]]],[11,"clone","","",32,[[["self"]],["epollop"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"hash","","",32,N],[11,"eq","","",32,[[["self"],["epollop"]],["bool"]]],[11,"eq","","",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"ne","","",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"clone","","",34,[[["self"]],["epollcreateflags"]]],[11,"partial_cmp","","",34,[[["self"],["epollcreateflags"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"le","","",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"gt","","",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"ge","","",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"cmp","","",34,[[["self"],["epollcreateflags"]],["ordering"]]],[11,"hash","","",34,N],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[18,"EPOLL_CLOEXEC","","",34,N],[11,"empty","","Returns an empty set of flags.",34,[[],["epollcreateflags"]]],[11,"all","","Returns the set containing all flags.",34,[[],["epollcreateflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",34,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,[[["c_int"]],["option",["epollcreateflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,[[["c_int"]],["epollcreateflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",34,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,[[["self"],["epollcreateflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",34,[[["self"],["epollcreateflags"]]]],[11,"remove","","Removes the specified flags in-place.",34,[[["self"],["epollcreateflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",34,[[["self"],["epollcreateflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",34,[[["self"],["epollcreateflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",34,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"bitor_assign","","Adds the set of flags.",34,[[["self"],["epollcreateflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",34,[[["self"],["epollcreateflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",34,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",34,[[["self"],["epollcreateflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",34,[[["self"],["epollcreateflags"]],["epollcreateflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",34,[[["self"],["epollcreateflags"]]]],[11,"not","","Returns the complement of this set of flags.",34,[[["self"]],["epollcreateflags"]]],[11,"extend","","",34,[[["self"],["t"]]]],[11,"from_iter","","",34,[[["t"]],["epollcreateflags"]]],[11,"clone","","",35,[[["self"]],["epollevent"]]],[11,"new","","",35,[[["epollflags"],["u64"]],["self"]]],[11,"empty","","",35,[[],["self"]]],[11,"events","","",35,[[["self"]],["epollflags"]]],[11,"data","","",35,[[["self"]],["u64"]]],[0,"eventfd","nix::sys","",N,N],[3,"EfdFlags","nix::sys::eventfd","",N,N],[5,"eventfd","","",N,[[["c_uint"],["efdflags"]],["result",["rawfd"]]]],[11,"eq","","",36,[[["self"],["efdflags"]],["bool"]]],[11,"ne","","",36,[[["self"],["efdflags"]],["bool"]]],[11,"clone","","",36,[[["self"]],["efdflags"]]],[11,"partial_cmp","","",36,[[["self"],["efdflags"]],["option",["ordering"]]]],[11,"lt","","",36,[[["self"],["efdflags"]],["bool"]]],[11,"le","","",36,[[["self"],["efdflags"]],["bool"]]],[11,"gt","","",36,[[["self"],["efdflags"]],["bool"]]],[11,"ge","","",36,[[["self"],["efdflags"]],["bool"]]],[11,"cmp","","",36,[[["self"],["efdflags"]],["ordering"]]],[11,"hash","","",36,N],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[18,"EFD_CLOEXEC","","",36,N],[18,"EFD_NONBLOCK","","",36,N],[18,"EFD_SEMAPHORE","","",36,N],[11,"empty","","Returns an empty set of flags.",36,[[],["efdflags"]]],[11,"all","","Returns the set containing all flags.",36,[[],["efdflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",36,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",36,[[["c_int"]],["option",["efdflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",36,[[["c_int"]],["efdflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",36,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,[[["self"],["efdflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,[[["self"],["efdflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",36,[[["self"],["efdflags"]]]],[11,"remove","","Removes the specified flags in-place.",36,[[["self"],["efdflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",36,[[["self"],["efdflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",36,[[["self"],["efdflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",36,[[["self"],["efdflags"]],["efdflags"]]],[11,"bitor_assign","","Adds the set of flags.",36,[[["self"],["efdflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,[[["self"],["efdflags"]],["efdflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",36,[[["self"],["efdflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",36,[[["self"],["efdflags"]],["efdflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",36,[[["self"],["efdflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",36,[[["self"],["efdflags"]],["efdflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",36,[[["self"],["efdflags"]]]],[11,"not","","Returns the complement of this set of flags.",36,[[["self"]],["efdflags"]]],[11,"extend","","",36,[[["self"],["t"]]]],[11,"from_iter","","",36,[[["t"]],["efdflags"]]],[0,"memfd","nix::sys","",N,N],[3,"MemFdCreateFlag","nix::sys::memfd","",N,N],[5,"memfd_create","","",N,[[["cstr"],["memfdcreateflag"]],["result",["rawfd"]]]],[11,"eq","","",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"ne","","",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"clone","","",37,[[["self"]],["memfdcreateflag"]]],[11,"partial_cmp","","",37,[[["self"],["memfdcreateflag"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"le","","",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"gt","","",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"ge","","",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"cmp","","",37,[[["self"],["memfdcreateflag"]],["ordering"]]],[11,"hash","","",37,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[18,"MFD_CLOEXEC","","",37,N],[18,"MFD_ALLOW_SEALING","","",37,N],[11,"empty","","Returns an empty set of flags.",37,[[],["memfdcreateflag"]]],[11,"all","","Returns the set containing all flags.",37,[[],["memfdcreateflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",37,[[["self"]],["c_uint"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",37,[[["c_uint"]],["option",["memfdcreateflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",37,[[["c_uint"]],["memfdcreateflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",37,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,[[["self"],["memfdcreateflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",37,[[["self"],["memfdcreateflag"]]]],[11,"remove","","Removes the specified flags in-place.",37,[[["self"],["memfdcreateflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",37,[[["self"],["memfdcreateflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",37,[[["self"],["memfdcreateflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",37,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"bitor_assign","","Adds the set of flags.",37,[[["self"],["memfdcreateflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",37,[[["self"],["memfdcreateflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",37,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",37,[[["self"],["memfdcreateflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",37,[[["self"],["memfdcreateflag"]],["memfdcreateflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",37,[[["self"],["memfdcreateflag"]]]],[11,"not","","Returns the complement of this set of flags.",37,[[["self"]],["memfdcreateflag"]]],[11,"extend","","",37,[[["self"],["t"]]]],[11,"from_iter","","",37,[[["t"]],["memfdcreateflag"]]],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls.",N,N],[0,"sendfile","","",N,N],[5,"sendfile","nix::sys::sendfile","",N,[[["rawfd"],["rawfd"],["option",["off_t"]],["usize"]],["result",["usize"]]]],[0,"signal","nix::sys","",N,N],[3,"SigEvent","nix::sys::signal","Used to request asynchronous notification of the completion of certain events, such as POSIX AIO and timers.",N,N],[3,"SignalIterator","","",N,N],[3,"SaFlags","","",N,N],[3,"SigSet","","",N,N],[3,"SigAction","","",N,N],[4,"Signal","","",N,N],[13,"SIGHUP","","",38,N],[13,"SIGINT","","",38,N],[13,"SIGQUIT","","",38,N],[13,"SIGILL","","",38,N],[13,"SIGTRAP","","",38,N],[13,"SIGABRT","","",38,N],[13,"SIGBUS","","",38,N],[13,"SIGFPE","","",38,N],[13,"SIGKILL","","",38,N],[13,"SIGUSR1","","",38,N],[13,"SIGSEGV","","",38,N],[13,"SIGUSR2","","",38,N],[13,"SIGPIPE","","",38,N],[13,"SIGALRM","","",38,N],[13,"SIGTERM","","",38,N],[13,"SIGSTKFLT","","",38,N],[13,"SIGCHLD","","",38,N],[13,"SIGCONT","","",38,N],[13,"SIGSTOP","","",38,N],[13,"SIGTSTP","","",38,N],[13,"SIGTTIN","","",38,N],[13,"SIGTTOU","","",38,N],[13,"SIGURG","","",38,N],[13,"SIGXCPU","","",38,N],[13,"SIGXFSZ","","",38,N],[13,"SIGVTALRM","","",38,N],[13,"SIGPROF","","",38,N],[13,"SIGWINCH","","",38,N],[13,"SIGIO","","",38,N],[13,"SIGPWR","","",38,N],[13,"SIGSYS","","",38,N],[4,"SigmaskHow","","",N,N],[13,"SIG_BLOCK","","",39,N],[13,"SIG_UNBLOCK","","",39,N],[13,"SIG_SETMASK","","",39,N],[4,"SigHandler","","",N,N],[13,"SigDfl","","",40,N],[13,"SigIgn","","",40,N],[13,"Handler","","",40,N],[13,"SigAction","","",40,N],[4,"SigevNotify","","Used to request asynchronous notification of certain events, for example, with POSIX AIO, POSIX message queues, and POSIX timers.",N,N],[13,"SigevNone","","No notification will be delivered",41,N],[13,"SigevSignal","","The signal given by `signal` will be delivered to the process.  The value in `si_value` will be present in the `si_value` field of the `siginfo_t` structure of the queued signal.",41,N],[12,"signal","nix::sys::signal::SigevNotify","",41,N],[12,"si_value","","",41,N],[13,"SigevThreadId","nix::sys::signal","The signal `signal` is queued to the thread whose LWP ID is given in `thread_id`.  The value stored in `si_value` will be present in the `si_value` of the `siginfo_t` structure of the queued signal.",41,N],[12,"signal","nix::sys::signal::SigevNotify","",41,N],[12,"thread_id","","",41,N],[12,"si_value","","",41,N],[5,"sigaction","nix::sys::signal","",N,[[["signal"],["sigaction"]],["result",["sigaction"]]]],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",N,[[["sigmaskhow"],["option",["sigset"]],["option",["sigset"]]],["result"]]],[5,"sigprocmask","","Examine and change blocked signals.",N,[[["sigmaskhow"],["option",["sigset"]],["option",["sigset"]]],["result"]]],[5,"kill","","",N,[[["pid"],["t"]],["result"]]],[5,"raise","","",N,[[["signal"]],["result"]]],[11,"new","","Note: this constructor does not allow the user to set the `sigev_notify_kevent_flags` field.  That's considered ok because on FreeBSD at least those flags don't do anything useful.  That field is part of a union that shares space with the more genuinely useful fields.",42,[[["sigevnotify"]],["sigevent"]]],[11,"sigevent","","",42,[[["self"]],["sigevent"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"from","","",42,[[["sigevent"]],["self"]]],[6,"type_of_thread_id","","",N,N],[17,"NSIG","","",N,N],[17,"SIGIOT","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGUNUSED","","",N,N],[11,"clone","","",38,[[["self"]],["signal"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"hash","","",38,N],[11,"cmp","","",38,[[["self"],["signal"]],["ordering"]]],[11,"eq","","",38,[[["self"],["signal"]],["bool"]]],[11,"partial_cmp","","",38,[[["self"],["signal"]],["option",["ordering"]]]],[11,"next","","",43,[[["self"]],["option",["signal"]]]],[11,"iterator","","",38,[[],["signaliterator"]]],[11,"from_c_int","","",38,[[["c_int"]],["result",["signal"]]]],[11,"eq","","",44,[[["self"],["saflags"]],["bool"]]],[11,"ne","","",44,[[["self"],["saflags"]],["bool"]]],[11,"clone","","",44,[[["self"]],["saflags"]]],[11,"partial_cmp","","",44,[[["self"],["saflags"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["saflags"]],["bool"]]],[11,"le","","",44,[[["self"],["saflags"]],["bool"]]],[11,"gt","","",44,[[["self"],["saflags"]],["bool"]]],[11,"ge","","",44,[[["self"],["saflags"]],["bool"]]],[11,"cmp","","",44,[[["self"],["saflags"]],["ordering"]]],[11,"hash","","",44,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[18,"SA_NOCLDSTOP","","",44,N],[18,"SA_NOCLDWAIT","","",44,N],[18,"SA_NODEFER","","",44,N],[18,"SA_ONSTACK","","",44,N],[18,"SA_RESETHAND","","",44,N],[18,"SA_RESTART","","",44,N],[18,"SA_SIGINFO","","",44,N],[11,"empty","","Returns an empty set of flags.",44,[[],["saflags"]]],[11,"all","","Returns the set containing all flags.",44,[[],["saflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",44,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",44,[[["c_int"]],["option",["saflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",44,[[["c_int"]],["saflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",44,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",44,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",44,[[["self"],["saflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",44,[[["self"],["saflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",44,[[["self"],["saflags"]]]],[11,"remove","","Removes the specified flags in-place.",44,[[["self"],["saflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",44,[[["self"],["saflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",44,[[["self"],["saflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",44,[[["self"],["saflags"]],["saflags"]]],[11,"bitor_assign","","Adds the set of flags.",44,[[["self"],["saflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",44,[[["self"],["saflags"]],["saflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",44,[[["self"],["saflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",44,[[["self"],["saflags"]],["saflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",44,[[["self"],["saflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",44,[[["self"],["saflags"]],["saflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",44,[[["self"],["saflags"]]]],[11,"not","","Returns the complement of this set of flags.",44,[[["self"]],["saflags"]]],[11,"extend","","",44,[[["self"],["t"]]]],[11,"from_iter","","",44,[[["t"]],["saflags"]]],[11,"clone","","",39,[[["self"]],["sigmaskhow"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"hash","","",39,N],[11,"cmp","","",39,[[["self"],["sigmaskhow"]],["ordering"]]],[11,"eq","","",39,[[["self"],["sigmaskhow"]],["bool"]]],[11,"partial_cmp","","",39,[[["self"],["sigmaskhow"]],["option",["ordering"]]]],[11,"clone","","",45,[[["self"]],["sigset"]]],[11,"all","","",45,[[],["sigset"]]],[11,"empty","","",45,[[],["sigset"]]],[11,"add","","",45,[[["self"],["signal"]]]],[11,"clear","","",45,[[["self"]]]],[11,"remove","","",45,[[["self"],["signal"]]]],[11,"contains","","",45,[[["self"],["signal"]],["bool"]]],[11,"extend","","",45,[[["self"],["sigset"]]]],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",45,[[],["result",["sigset"]]]],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",45,[[["self"]],["result"]]],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",45,[[["self"]],["result"]]],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",45,[[["self"]],["result"]]],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",45,[[["self"],["sigmaskhow"]],["result",["sigset"]]]],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",45,[[["self"]],["result",["signal"]]]],[11,"as_ref","","",45,[[["self"]],["sigset_t"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["sighandler"]]],[11,"eq","","",40,[[["self"],["sighandler"]],["bool"]]],[11,"ne","","",40,[[["self"],["sighandler"]],["bool"]]],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",46,[[["sighandler"],["saflags"],["sigset"]],["sigaction"]]],[11,"flags","","",46,[[["self"]],["saflags"]]],[11,"mask","","",46,[[["self"]],["sigset"]]],[11,"handler","","",46,[[["self"]],["sighandler"]]],[11,"clone","","",41,[[["self"]],["sigevnotify"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["sigevnotify"]],["bool"]]],[11,"ne","","",41,[[["self"],["sigevnotify"]],["bool"]]],[0,"signalfd","nix::sys","Interface for the `signalfd` syscall.",N,N],[3,"siginfo","nix::sys::signalfd","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"SfdFlags","","",N,N],[3,"SignalFd","","A helper struct for creating, reading and closing a `signalfd` instance.",N,N],[5,"signalfd","","Creates a new file descriptor for reading signals.",N,[[["rawfd"],["sigset"],["sfdflags"]],["result",["rawfd"]]]],[17,"SIGNALFD_NEW","","",N,N],[17,"SIGNALFD_SIGINFO_SIZE","","",N,N],[11,"eq","","",48,[[["self"],["sfdflags"]],["bool"]]],[11,"ne","","",48,[[["self"],["sfdflags"]],["bool"]]],[11,"clone","","",48,[[["self"]],["sfdflags"]]],[11,"partial_cmp","","",48,[[["self"],["sfdflags"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["sfdflags"]],["bool"]]],[11,"le","","",48,[[["self"],["sfdflags"]],["bool"]]],[11,"gt","","",48,[[["self"],["sfdflags"]],["bool"]]],[11,"ge","","",48,[[["self"],["sfdflags"]],["bool"]]],[11,"cmp","","",48,[[["self"],["sfdflags"]],["ordering"]]],[11,"hash","","",48,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[18,"SFD_NONBLOCK","","",48,N],[18,"SFD_CLOEXEC","","",48,N],[11,"empty","","Returns an empty set of flags.",48,[[],["sfdflags"]]],[11,"all","","Returns the set containing all flags.",48,[[],["sfdflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",48,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",48,[[["c_int"]],["option",["sfdflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",48,[[["c_int"]],["sfdflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",48,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",48,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",48,[[["self"],["sfdflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",48,[[["self"],["sfdflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",48,[[["self"],["sfdflags"]]]],[11,"remove","","Removes the specified flags in-place.",48,[[["self"],["sfdflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",48,[[["self"],["sfdflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",48,[[["self"],["sfdflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",48,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"bitor_assign","","Adds the set of flags.",48,[[["self"],["sfdflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",48,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",48,[[["self"],["sfdflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",48,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",48,[[["self"],["sfdflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",48,[[["self"],["sfdflags"]],["sfdflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",48,[[["self"],["sfdflags"]]]],[11,"not","","Returns the complement of this set of flags.",48,[[["self"]],["sfdflags"]]],[11,"extend","","",48,[[["self"],["t"]]]],[11,"from_iter","","",48,[[["t"]],["sfdflags"]]],[11,"clone","","",49,[[["self"]],["signalfd"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"hash","","",49,N],[11,"eq","","",49,[[["self"],["signalfd"]],["bool"]]],[11,"ne","","",49,[[["self"],["signalfd"]],["bool"]]],[11,"new","","",49,[[["sigset"]],["result",["signalfd"]]]],[11,"with_flags","","",49,[[["sigset"],["sfdflags"]],["result",["signalfd"]]]],[11,"set_mask","","",49,[[["self"],["sigset"]],["result"]]],[11,"read_signal","","",49,[[["self"]],["result",["option"]]]],[11,"drop","","",49,[[["self"]]]],[11,"as_raw_fd","","",49,[[["self"]],["rawfd"]]],[11,"next","","",49,[[["self"]],["option"]]],[0,"socket","nix::sys","Socket interface functions",N,N],[3,"cmsghdr","nix::sys::socket","",N,N],[12,"cmsg_len","","",50,N],[12,"cmsg_level","","",50,N],[12,"cmsg_type","","",50,N],[3,"msghdr","","",N,N],[12,"msg_name","","",51,N],[12,"msg_namelen","","",51,N],[12,"msg_iov","","",51,N],[12,"msg_iovlen","","",51,N],[12,"msg_control","","",51,N],[12,"msg_controllen","","",51,N],[12,"msg_flags","","",51,N],[6,"sa_family_t","","",N,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",52,N],[12,"sa_data","","",52,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",53,N],[12,"sin_port","","",53,N],[12,"sin_addr","","",53,N],[12,"sin_zero","","",53,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",54,N],[12,"sin6_port","","",54,N],[12,"sin6_flowinfo","","",54,N],[12,"sin6_addr","","",54,N],[12,"sin6_scope_id","","",54,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",55,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",56,N],[12,"sun_path","","",56,N],[3,"UnixAddr","","A wrapper around `sockaddr_un`.",N,N],[12,"0","","",57,N],[12,"1","","",57,N],[3,"Ipv4Addr","","",N,N],[12,"0","","",58,N],[3,"Ipv6Addr","","",N,N],[12,"0","","",59,N],[3,"LinkAddr","","Hardware Address",N,N],[12,"0","","",60,N],[3,"NetlinkAddr","","",N,N],[12,"0","","",61,N],[3,"SockFlag","","Additional socket options",N,N],[3,"MsgFlags","","Flags for send/recv and their relatives",N,N],[3,"UnixCredentials","","Unix credentials of the sending process.",N,N],[3,"IpMembershipRequest","","Request for multicast socket operations",N,N],[3,"Ipv6MembershipRequest","","Request for ipv6 multicast socket operations",N,N],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",N,N],[3,"RecvMsg","","",N,N],[12,"bytes","","",62,N],[12,"address","","",62,N],[12,"flags","","",62,N],[3,"CmsgIterator","","",N,N],[4,"AddressFamily","","These constants specify the protocol family to be used in `socket` and `socketpair`",N,N],[13,"Unix","","Local communication (see `unix(7)`)",63,N],[13,"Inet","","IPv4 Internet protocols (see `ip(7)`)",63,N],[13,"Inet6","","IPv6 Internet protocols (see `ipv6(7)`)",63,N],[13,"Netlink","","Kernel user interface device (see `netlink(7)`)",63,N],[13,"Packet","","Low level packet interface (see `packet(7)`)",63,N],[13,"Ax25","","Amateur radio AX.25 protocol",63,N],[13,"Ipx","","IPX - Novell protocols",63,N],[13,"AppleTalk","","AppleTalk",63,N],[13,"NetRom","","",63,N],[13,"Bridge","","",63,N],[13,"AtmPvc","","Access to raw ATM PVCs",63,N],[13,"X25","","ITU-T X.25 / ISO-8208 protocol (see `x25(7)`)",63,N],[13,"Rose","","",63,N],[13,"Decnet","","",63,N],[13,"NetBeui","","",63,N],[13,"Security","","",63,N],[13,"Key","","",63,N],[13,"Ash","","",63,N],[13,"Econet","","",63,N],[13,"AtmSvc","","",63,N],[13,"Rds","","",63,N],[13,"Sna","","",63,N],[13,"Irda","","",63,N],[13,"Pppox","","",63,N],[13,"Wanpipe","","",63,N],[13,"Llc","","",63,N],[13,"Ib","","",63,N],[13,"Mpls","","",63,N],[13,"Can","","",63,N],[13,"Tipc","","",63,N],[13,"Bluetooth","","",63,N],[13,"Iucv","","",63,N],[13,"RxRpc","","",63,N],[13,"Isdn","","",63,N],[13,"Phonet","","",63,N],[13,"Ieee802154","","",63,N],[13,"Caif","","",63,N],[13,"Alg","","Interface to kernel crypto API",63,N],[13,"Nfc","","",63,N],[13,"Vsock","","",63,N],[4,"SockAddr","","Represents a socket address",N,N],[13,"Inet","","",64,N],[13,"Unix","","",64,N],[13,"Netlink","","",64,N],[13,"Link","","Datalink address (MAC)",64,N],[4,"InetAddr","","",N,N],[13,"V4","","",65,N],[13,"V6","","",65,N],[4,"IpAddr","","",N,N],[13,"V4","","",66,N],[13,"V6","","",66,N],[4,"SockType","","These constants are used to specify the communication semantics when creating a socket with `socket()`",N,N],[13,"Stream","","Provides sequenced, reliable, two-way, connection- based byte streams.  An out-of-band data transmission mechanism may be supported.",67,N],[13,"Datagram","","Supports datagrams (connectionless, unreliable messages of a fixed maximum length).",67,N],[13,"SeqPacket","","Provides a sequenced, reliable, two-way connection- based data transmission path for datagrams of fixed maximum length; a consumer is required to read an entire packet with each input system call.",67,N],[13,"Raw","","Provides raw network protocol access.",67,N],[13,"Rdm","","Provides a reliable datagram layer that does not guarantee ordering.",67,N],[4,"SockProtocol","","Constants used in `socket` and `socketpair` to specify the protocol to use.",N,N],[13,"Tcp","","TCP protocol (ip(7))",68,N],[13,"Udp","","UDP protocol (ip(7))",68,N],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",N,N],[13,"ScmRights","","A message of type `SCM_RIGHTS`, containing an array of file descriptors passed between processes.",69,N],[13,"ScmTimestamp","","A message of type `SCM_TIMESTAMP`, containing the time the packet was received by the kernel.",69,N],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",N,N],[13,"Socket","","",70,N],[13,"Tcp","","",70,N],[13,"Ip","","",70,N],[13,"Ipv6","","",70,N],[13,"Udp","","",70,N],[13,"Netlink","","",70,N],[4,"Shutdown","","",N,N],[13,"Read","","Further receptions will be disallowed.",71,N],[13,"Write","","Further  transmissions will be disallowed.",71,N],[13,"Both","","Further receptions and transmissions will be disallowed.",71,N],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",N,N],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",N,N],[5,"socket","","Create an endpoint for communication",N,[[["addressfamily"],["socktype"],["sockflag"],["t"]],["result",["rawfd"]]]],[5,"socketpair","","Create a pair of connected sockets",N,[[["addressfamily"],["socktype"],["t"],["sockflag"]],["result"]]],[5,"listen","","Listen for connections on a socket",N,[[["rawfd"],["usize"]],["result"]]],[5,"bind","","Bind a name to a socket",N,[[["rawfd"],["sockaddr"]],["result"]]],[5,"accept","","Accept a connection on a socket",N,[[["rawfd"]],["result",["rawfd"]]]],[5,"accept4","","Accept a connection on a socket",N,[[["rawfd"],["sockflag"]],["result",["rawfd"]]]],[5,"connect","","Initiate a connection on a socket",N,[[["rawfd"],["sockaddr"]],["result"]]],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",N,N],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",N,N],[5,"sendto","","Send a message to a socket",N,N],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",N,N],[5,"getsockopt","","Get the current value for the requested socket option",N,[[["rawfd"],["o"]],["result"]]],[5,"setsockopt","","Sets the value for the requested socket option",N,N],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",N,[[["rawfd"]],["result",["sockaddr"]]]],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",N,[[["rawfd"]],["result",["sockaddr"]]]],[5,"sockaddr_storage_to_addr","","Return the appropriate `SockAddr` type from a `sockaddr_storage` of a certain size.  In C this would usually be done by casting.  The `len` argument should be the number of bytes in the `sockaddr_storage` that are actually allocated and valid.  It must be at least as large as all the useful parts of the structure.  Note that in the case of a `sockaddr_un`, `len` need not include the terminating null.",N,[[["sockaddr_storage"],["usize"]],["result",["sockaddr"]]]],[5,"shutdown","","Shut down part of a full-duplex connection.",N,[[["rawfd"],["shutdown"]],["result"]]],[11,"clone","","",61,[[["self"]],["netlinkaddr"]]],[11,"eq","","",61,[[["self"],["self"]],["bool"]]],[11,"hash","","",61,[[["self"],["h"]]]],[11,"new","","",61,[[["u32"],["u32"]],["netlinkaddr"]]],[11,"pid","","",61,[[["self"]],["u32"]]],[11,"groups","","",61,[[["self"]],["u32"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"clone","","",60,[[["self"]],["linkaddr"]]],[11,"family","","Always AF_PACKET",60,[[["self"]],["addressfamily"]]],[11,"protocol","","Physical-layer protocol",60,[[["self"]],["u16"]]],[11,"ifindex","","Interface number",60,[[["self"]],["usize"]]],[11,"hatype","","ARP hardware type",60,[[["self"]],["u16"]]],[11,"pkttype","","Packet type",60,[[["self"]],["u8"]]],[11,"halen","","Length of MAC address",60,[[["self"]],["usize"]]],[11,"addr","","Physical-layer address (MAC)",60,N],[11,"eq","","",60,[[["self"],["self"]],["bool"]]],[11,"hash","","",60,[[["self"],["h"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"clone","","",63,[[["self"]],["addressfamily"]]],[11,"eq","","",63,[[["self"],["addressfamily"]],["bool"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"hash","","",63,N],[11,"from_i32","","Create a new `AddressFamily` from an integer value retrieved from `libc`, usually from the `sa_family` field of a `sockaddr`.",63,[[["i32"]],["option",["addressfamily"]]]],[11,"from_std","","",65,[[["socketaddr"]],["inetaddr"]]],[11,"new","","",65,[[["ipaddr"],["u16"]],["inetaddr"]]],[11,"ip","","Gets the IP address associated with this socket address.",65,[[["self"]],["ipaddr"]]],[11,"port","","Gets the port number associated with this socket address",65,[[["self"]],["u16"]]],[11,"to_std","","",65,[[["self"]],["socketaddr"]]],[11,"to_str","","",65,[[["self"]],["string"]]],[11,"eq","","",65,[[["self"],["inetaddr"]],["bool"]]],[11,"hash","","",65,[[["self"],["h"]]]],[11,"clone","","",65,[[["self"]],["inetaddr"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",66,[[["u8"],["u8"],["u8"],["u8"]],["ipaddr"]]],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",66,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["ipaddr"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"new","","",58,[[["u8"],["u8"],["u8"],["u8"]],["ipv4addr"]]],[11,"from_std","","",58,[[["ipv4addr"]],["ipv4addr"]]],[11,"any","","",58,[[],["ipv4addr"]]],[11,"octets","","",58,N],[11,"to_std","","",58,[[["self"]],["ipv4addr"]]],[11,"eq","","",58,[[["self"],["ipv4addr"]],["bool"]]],[11,"hash","","",58,[[["self"],["h"]]]],[11,"clone","","",58,[[["self"]],["ipv4addr"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"clone","","",59,[[["self"]],["ipv6addr"]]],[11,"new","","",59,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["ipv6addr"]]],[11,"from_std","","",59,[[["ipv6addr"]],["ipv6addr"]]],[11,"segments","","Return the eight 16-bit segments that make up this address",59,N],[11,"to_std","","",59,[[["self"]],["ipv6addr"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new sockaddr_un representing a filesystem path.",57,[[["p"]],["result",["unixaddr"]]]],[11,"new_abstract","","Create a new `sockaddr_un` representing an address in the \"abstract namespace\".",57,N],[11,"path","","If this address represents a filesystem path, return that path.",57,[[["self"]],["option",["path"]]]],[11,"as_abstract","","If this address represents an abstract socket, return its name.",57,[[["self"]],["option"]]],[11,"eq","","",57,[[["self"],["unixaddr"]],["bool"]]],[11,"hash","","",57,[[["self"],["h"]]]],[11,"clone","","",57,[[["self"]],["unixaddr"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"new_inet","","",64,[[["inetaddr"]],["sockaddr"]]],[11,"new_unix","","",64,[[["p"]],["result",["sockaddr"]]]],[11,"new_netlink","","",64,[[["u32"],["u32"]],["sockaddr"]]],[11,"family","","",64,[[["self"]],["addressfamily"]]],[11,"to_str","","",64,[[["self"]],["string"]]],[11,"from_libc_sockaddr","","Creates a `SockAddr` struct from libc's sockaddr.",64,N],[11,"as_ffi_pair","","Conversion from nix's SockAddr type to the underlying libc sockaddr type.",64,N],[11,"eq","","",64,[[["self"],["sockaddr"]],["bool"]]],[11,"hash","","",64,[[["self"],["h"]]]],[11,"clone","","",64,[[["self"]],["sockaddr"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[0,"sockopt","","",N,N],[3,"ReuseAddr","nix::sys::socket::sockopt","",N,N],[3,"ReusePort","","",N,N],[3,"TcpNoDelay","","",N,N],[3,"Linger","","",N,N],[3,"IpAddMembership","","",N,N],[3,"IpDropMembership","","",N,N],[3,"Ipv6AddMembership","","",N,N],[3,"Ipv6DropMembership","","",N,N],[3,"IpMulticastTtl","","",N,N],[3,"IpMulticastLoop","","",N,N],[3,"ReceiveTimeout","","",N,N],[3,"SendTimeout","","",N,N],[3,"Broadcast","","",N,N],[3,"OobInline","","",N,N],[3,"SocketError","","",N,N],[3,"KeepAlive","","",N,N],[3,"PeerCredentials","","",N,N],[3,"TcpKeepIdle","","",N,N],[3,"RcvBuf","","",N,N],[3,"SndBuf","","",N,N],[3,"RcvBufForce","","",N,N],[3,"SndBufForce","","",N,N],[3,"SockType","","",N,N],[3,"AcceptConn","","",N,N],[3,"OriginalDst","","",N,N],[3,"ReceiveTimestamp","","",N,N],[3,"IpTransparent","","",N,N],[11,"clone","","",72,[[["self"]],["reuseaddr"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"set","","",72,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",72,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",73,[[["self"]],["reuseport"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"set","","",73,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",73,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",74,[[["self"]],["tcpnodelay"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"set","","",74,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",74,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",75,[[["self"]],["linger"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"set","","",75,[[["self"],["rawfd"],["linger"]],["result"]]],[11,"get","","",75,[[["self"],["rawfd"]],["result",["linger"]]]],[11,"clone","","",76,[[["self"]],["ipaddmembership"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"set","","",76,[[["self"],["rawfd"],["ipmembershiprequest"]],["result"]]],[11,"clone","","",77,[[["self"]],["ipdropmembership"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"set","","",77,[[["self"],["rawfd"],["ipmembershiprequest"]],["result"]]],[11,"clone","","",78,[[["self"]],["ipv6addmembership"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"set","","",78,[[["self"],["rawfd"],["ipv6membershiprequest"]],["result"]]],[11,"clone","","",79,[[["self"]],["ipv6dropmembership"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"set","","",79,[[["self"],["rawfd"],["ipv6membershiprequest"]],["result"]]],[11,"clone","","",80,[[["self"]],["ipmulticastttl"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"set","","",80,[[["self"],["rawfd"],["u8"]],["result"]]],[11,"get","","",80,[[["self"],["rawfd"]],["result",["u8"]]]],[11,"clone","","",81,[[["self"]],["ipmulticastloop"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"set","","",81,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",81,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",82,[[["self"]],["receivetimeout"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"set","","",82,[[["self"],["rawfd"],["timeval"]],["result"]]],[11,"get","","",82,[[["self"],["rawfd"]],["result",["timeval"]]]],[11,"clone","","",83,[[["self"]],["sendtimeout"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"set","","",83,[[["self"],["rawfd"],["timeval"]],["result"]]],[11,"get","","",83,[[["self"],["rawfd"]],["result",["timeval"]]]],[11,"clone","","",84,[[["self"]],["broadcast"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"set","","",84,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",84,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",85,[[["self"]],["oobinline"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"set","","",85,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",85,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",86,[[["self"]],["socketerror"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"get","","",86,[[["self"],["rawfd"]],["result",["i32"]]]],[11,"clone","","",87,[[["self"]],["keepalive"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"set","","",87,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",87,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",88,[[["self"]],["peercredentials"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"get","","",88,[[["self"],["rawfd"]],["result",["unixcredentials"]]]],[11,"clone","","",89,[[["self"]],["tcpkeepidle"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"set","","",89,[[["self"],["rawfd"],["u32"]],["result"]]],[11,"get","","",89,[[["self"],["rawfd"]],["result",["u32"]]]],[11,"clone","","",90,[[["self"]],["rcvbuf"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"set","","",90,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"get","","",90,[[["self"],["rawfd"]],["result",["usize"]]]],[11,"clone","","",91,[[["self"]],["sndbuf"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"set","","",91,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"get","","",91,[[["self"],["rawfd"]],["result",["usize"]]]],[11,"clone","","",92,[[["self"]],["rcvbufforce"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"set","","",92,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"clone","","",93,[[["self"]],["sndbufforce"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"set","","",93,[[["self"],["rawfd"],["usize"]],["result"]]],[11,"clone","","",94,[[["self"]],["socktype"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"get","","",94,[[["self"],["rawfd"]],["result",["socktype"]]]],[11,"clone","","",95,[[["self"]],["acceptconn"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"get","","",95,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",96,[[["self"]],["originaldst"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"get","","",96,[[["self"],["rawfd"]],["result",["sockaddr_in"]]]],[11,"clone","","",97,[[["self"]],["receivetimestamp"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"set","","",97,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",97,[[["self"],["rawfd"]],["result",["bool"]]]],[11,"clone","","",98,[[["self"]],["iptransparent"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"set","","",98,[[["self"],["rawfd"],["bool"]],["result"]]],[11,"get","","",98,[[["self"],["rawfd"]],["result",["bool"]]]],[8,"GetSockOpt","nix::sys::socket","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",N,N],[16,"Val","","",99,N],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",N,N],[16,"Val","","",100,N],[11,"clone","","",67,[[["self"]],["socktype"]]],[11,"eq","","",67,[[["self"],["socktype"]],["bool"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["sockprotocol"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"hash","","",68,N],[11,"eq","","",68,[[["self"],["sockprotocol"]],["bool"]]],[11,"eq","","",101,[[["self"],["sockflag"]],["bool"]]],[11,"ne","","",101,[[["self"],["sockflag"]],["bool"]]],[11,"clone","","",101,[[["self"]],["sockflag"]]],[11,"partial_cmp","","",101,[[["self"],["sockflag"]],["option",["ordering"]]]],[11,"lt","","",101,[[["self"],["sockflag"]],["bool"]]],[11,"le","","",101,[[["self"],["sockflag"]],["bool"]]],[11,"gt","","",101,[[["self"],["sockflag"]],["bool"]]],[11,"ge","","",101,[[["self"],["sockflag"]],["bool"]]],[11,"cmp","","",101,[[["self"],["sockflag"]],["ordering"]]],[11,"hash","","",101,N],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[18,"SOCK_NONBLOCK","","Set non-blocking mode on the new socket",101,N],[18,"SOCK_CLOEXEC","","Set close-on-exec on the new descriptor",101,N],[11,"empty","","Returns an empty set of flags.",101,[[],["sockflag"]]],[11,"all","","Returns the set containing all flags.",101,[[],["sockflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",101,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,[[["c_int"]],["option",["sockflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,[[["c_int"]],["sockflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",101,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,[[["self"],["sockflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,[[["self"],["sockflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",101,[[["self"],["sockflag"]]]],[11,"remove","","Removes the specified flags in-place.",101,[[["self"],["sockflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",101,[[["self"],["sockflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",101,[[["self"],["sockflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",101,[[["self"],["sockflag"]],["sockflag"]]],[11,"bitor_assign","","Adds the set of flags.",101,[[["self"],["sockflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,[[["self"],["sockflag"]],["sockflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",101,[[["self"],["sockflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",101,[[["self"],["sockflag"]],["sockflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",101,[[["self"],["sockflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",101,[[["self"],["sockflag"]],["sockflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",101,[[["self"],["sockflag"]]]],[11,"not","","Returns the complement of this set of flags.",101,[[["self"]],["sockflag"]]],[11,"extend","","",101,[[["self"],["t"]]]],[11,"from_iter","","",101,[[["t"]],["sockflag"]]],[11,"eq","","",102,[[["self"],["msgflags"]],["bool"]]],[11,"ne","","",102,[[["self"],["msgflags"]],["bool"]]],[11,"clone","","",102,[[["self"]],["msgflags"]]],[11,"partial_cmp","","",102,[[["self"],["msgflags"]],["option",["ordering"]]]],[11,"lt","","",102,[[["self"],["msgflags"]],["bool"]]],[11,"le","","",102,[[["self"],["msgflags"]],["bool"]]],[11,"gt","","",102,[[["self"],["msgflags"]],["bool"]]],[11,"ge","","",102,[[["self"],["msgflags"]],["bool"]]],[11,"cmp","","",102,[[["self"],["msgflags"]],["ordering"]]],[11,"hash","","",102,N],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[18,"MSG_OOB","","Sends or requests out-of-band data on sockets that support this notion (e.g., of type `Stream`); the underlying protocol must also support out-of-band data.",102,N],[18,"MSG_PEEK","","Peeks at an incoming message. The data is treated as unread and the next `recv()` or similar function shall still return this data.",102,N],[18,"MSG_DONTWAIT","","Enables nonblocking operation; if the operation would block, `EAGAIN` or `EWOULDBLOCK` is returned.  This provides similar behavior to setting the `O_NONBLOCK` flag (via the `fcntl` `F_SETFL` operation), but differs in that `MSG_DONTWAIT` is a per- call option, whereas `O_NONBLOCK` is a setting on the open file description (see open(2)), which will affect all threads in the calling process and as well as other processes that hold file descriptors referring to the same open file description.",102,N],[18,"MSG_CTRUNC","","Receive flags: Control Data was discarded (buffer too small)",102,N],[18,"MSG_TRUNC","","For raw (`Packet`), Internet datagram (since Linux 2.4.27/2.6.8), netlink (since Linux 2.6.22) and UNIX datagram (since Linux 3.4) sockets: return the real length of the packet or datagram, even when it was longer than the passed buffer. Not implemented for UNIX domain (unix(7)) sockets.",102,N],[18,"MSG_EOR","","Terminates a record (when this notion is supported, as for sockets of type `SeqPacket`).",102,N],[18,"MSG_ERRQUEUE","","This flag specifies that queued errors should be received from the socket error queue. (For more details, see recvfrom(2))",102,N],[18,"MSG_CMSG_CLOEXEC","","Set the `close-on-exec` flag for the file descriptor received via a UNIX domain file descriptor using the `SCM_RIGHTS` operation (described in unix(7)). This flag is useful for the same reasons as the `O_CLOEXEC` flag of open(2).",102,N],[11,"empty","","Returns an empty set of flags.",102,[[],["msgflags"]]],[11,"all","","Returns the set containing all flags.",102,[[],["msgflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",102,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",102,[[["c_int"]],["option",["msgflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",102,[[["c_int"]],["msgflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",102,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,[[["self"],["msgflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,[[["self"],["msgflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",102,[[["self"],["msgflags"]]]],[11,"remove","","Removes the specified flags in-place.",102,[[["self"],["msgflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",102,[[["self"],["msgflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",102,[[["self"],["msgflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",102,[[["self"],["msgflags"]],["msgflags"]]],[11,"bitor_assign","","Adds the set of flags.",102,[[["self"],["msgflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,[[["self"],["msgflags"]],["msgflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",102,[[["self"],["msgflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",102,[[["self"],["msgflags"]],["msgflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",102,[[["self"],["msgflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",102,[[["self"],["msgflags"]],["msgflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",102,[[["self"],["msgflags"]]]],[11,"not","","Returns the complement of this set of flags.",102,[[["self"]],["msgflags"]]],[11,"extend","","",102,[[["self"],["t"]]]],[11,"from_iter","","",102,[[["t"]],["msgflags"]]],[11,"clone","","",103,[[["self"]],["unixcredentials"]]],[11,"pid","","Returns the process identifier",103,[[["self"]],["pid_t"]]],[11,"uid","","Returns the user identifier",103,[[["self"]],["uid_t"]]],[11,"gid","","Returns the group identifier",103,[[["self"]],["gid_t"]]],[11,"eq","","",103,[[["self"],["self"]],["bool"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"clone","","",104,[[["self"]],["ipmembershiprequest"]]],[11,"new","","Instantiate a new `IpMembershipRequest`",104,[[["ipv4addr"],["option",["ipv4addr"]]],["self"]]],[11,"eq","","",104,[[["self"],["self"]],["bool"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"clone","","",105,[[["self"]],["ipv6membershiprequest"]]],[11,"new","","Instantiate a new `Ipv6MembershipRequest`",105,[[["ipv6addr"]],["self"]]],[11,"eq","","",105,[[["self"],["self"]],["bool"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",106,[[],["self"]]],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",62,[[["self"]],["cmsgiterator"]]],[11,"next","","",107,[[["self"]],["option",["controlmessage"]]]],[11,"clone","","",70,[[["self"]],["socklevel"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"hash","","",70,N],[11,"eq","","",70,[[["self"],["socklevel"]],["bool"]]],[11,"clone","","",71,[[["self"]],["shutdown"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"hash","","",71,N],[11,"eq","","",71,[[["self"],["shutdown"]],["bool"]]],[0,"stat","nix::sys","",N,N],[6,"dev_t","nix::sys::stat","",N,N],[3,"FileStat","","",N,N],[12,"st_dev","","",108,N],[12,"st_ino","","",108,N],[12,"st_nlink","","",108,N],[12,"st_mode","","",108,N],[12,"st_uid","","",108,N],[12,"st_gid","","",108,N],[12,"st_rdev","","",108,N],[12,"st_size","","",108,N],[12,"st_blksize","","",108,N],[12,"st_blocks","","",108,N],[12,"st_atime","","",108,N],[12,"st_atime_nsec","","",108,N],[12,"st_mtime","","",108,N],[12,"st_mtime_nsec","","",108,N],[12,"st_ctime","","",108,N],[12,"st_ctime_nsec","","",108,N],[5,"FileStat","","",N,N],[3,"SFlag","","",N,N],[3,"Mode","","",N,N],[5,"mknod","","",N,[[["p"],["sflag"],["mode"],["dev_t"]],["result"]]],[5,"major","","",N,[[["dev_t"]],["u64"]]],[5,"minor","","",N,[[["dev_t"]],["u64"]]],[5,"makedev","","",N,[[["u64"],["u64"]],["dev_t"]]],[5,"umask","","",N,[[["mode"]],["mode"]]],[5,"stat","","",N,[[["p"]],["result",["filestat"]]]],[5,"lstat","","",N,[[["p"]],["result",["filestat"]]]],[5,"fstat","","",N,[[["rawfd"]],["result",["filestat"]]]],[5,"fstatat","","",N,[[["rawfd"],["p"],["atflags"]],["result",["filestat"]]]],[11,"eq","","",109,[[["self"],["sflag"]],["bool"]]],[11,"ne","","",109,[[["self"],["sflag"]],["bool"]]],[11,"clone","","",109,[[["self"]],["sflag"]]],[11,"partial_cmp","","",109,[[["self"],["sflag"]],["option",["ordering"]]]],[11,"lt","","",109,[[["self"],["sflag"]],["bool"]]],[11,"le","","",109,[[["self"],["sflag"]],["bool"]]],[11,"gt","","",109,[[["self"],["sflag"]],["bool"]]],[11,"ge","","",109,[[["self"],["sflag"]],["bool"]]],[11,"cmp","","",109,[[["self"],["sflag"]],["ordering"]]],[11,"hash","","",109,N],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[18,"S_IFIFO","","",109,N],[18,"S_IFCHR","","",109,N],[18,"S_IFDIR","","",109,N],[18,"S_IFBLK","","",109,N],[18,"S_IFREG","","",109,N],[18,"S_IFLNK","","",109,N],[18,"S_IFSOCK","","",109,N],[18,"S_IFMT","","",109,N],[11,"empty","","Returns an empty set of flags.",109,[[],["sflag"]]],[11,"all","","Returns the set containing all flags.",109,[[],["sflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",109,[[["self"]],["mode_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",109,[[["mode_t"]],["option",["sflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",109,[[["mode_t"]],["sflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",109,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",109,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",109,[[["self"],["sflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",109,[[["self"],["sflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",109,[[["self"],["sflag"]]]],[11,"remove","","Removes the specified flags in-place.",109,[[["self"],["sflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",109,[[["self"],["sflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",109,[[["self"],["sflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",109,[[["self"],["sflag"]],["sflag"]]],[11,"bitor_assign","","Adds the set of flags.",109,[[["self"],["sflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",109,[[["self"],["sflag"]],["sflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",109,[[["self"],["sflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",109,[[["self"],["sflag"]],["sflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",109,[[["self"],["sflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",109,[[["self"],["sflag"]],["sflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",109,[[["self"],["sflag"]]]],[11,"not","","Returns the complement of this set of flags.",109,[[["self"]],["sflag"]]],[11,"extend","","",109,[[["self"],["t"]]]],[11,"from_iter","","",109,[[["t"]],["sflag"]]],[11,"eq","","",110,[[["self"],["mode"]],["bool"]]],[11,"ne","","",110,[[["self"],["mode"]],["bool"]]],[11,"clone","","",110,[[["self"]],["mode"]]],[11,"partial_cmp","","",110,[[["self"],["mode"]],["option",["ordering"]]]],[11,"lt","","",110,[[["self"],["mode"]],["bool"]]],[11,"le","","",110,[[["self"],["mode"]],["bool"]]],[11,"gt","","",110,[[["self"],["mode"]],["bool"]]],[11,"ge","","",110,[[["self"],["mode"]],["bool"]]],[11,"cmp","","",110,[[["self"],["mode"]],["ordering"]]],[11,"hash","","",110,N],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[18,"S_IRWXU","","",110,N],[18,"S_IRUSR","","",110,N],[18,"S_IWUSR","","",110,N],[18,"S_IXUSR","","",110,N],[18,"S_IRWXG","","",110,N],[18,"S_IRGRP","","",110,N],[18,"S_IWGRP","","",110,N],[18,"S_IXGRP","","",110,N],[18,"S_IRWXO","","",110,N],[18,"S_IROTH","","",110,N],[18,"S_IWOTH","","",110,N],[18,"S_IXOTH","","",110,N],[18,"S_ISUID","","",110,N],[18,"S_ISGID","","",110,N],[18,"S_ISVTX","","",110,N],[11,"empty","","Returns an empty set of flags.",110,[[],["mode"]]],[11,"all","","Returns the set containing all flags.",110,[[],["mode"]]],[11,"bits","","Returns the raw value of the flags currently stored.",110,[[["self"]],["mode_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",110,[[["mode_t"]],["option",["mode"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",110,[[["mode_t"]],["mode"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",110,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,[[["self"],["mode"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,[[["self"],["mode"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",110,[[["self"],["mode"]]]],[11,"remove","","Removes the specified flags in-place.",110,[[["self"],["mode"]]]],[11,"toggle","","Toggles the specified flags in-place.",110,[[["self"],["mode"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",110,[[["self"],["mode"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",110,[[["self"],["mode"]],["mode"]]],[11,"bitor_assign","","Adds the set of flags.",110,[[["self"],["mode"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,[[["self"],["mode"]],["mode"]]],[11,"bitxor_assign","","Toggles the set of flags.",110,[[["self"],["mode"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",110,[[["self"],["mode"]],["mode"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",110,[[["self"],["mode"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",110,[[["self"],["mode"]],["mode"]]],[11,"sub_assign","","Disables all flags enabled in the set.",110,[[["self"],["mode"]]]],[11,"not","","Returns the complement of this set of flags.",110,[[["self"]],["mode"]]],[11,"extend","","",110,[[["self"],["t"]]]],[11,"from_iter","","",110,[[["t"]],["mode"]]],[0,"reboot","nix::sys","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.",N,N],[4,"RebootMode","nix::sys::reboot","How exactly should the system be rebooted.",N,N],[13,"RB_HALT_SYSTEM","","",111,N],[13,"RB_KEXEC","","",111,N],[13,"RB_POWER_OFF","","",111,N],[13,"RB_AUTOBOOT","","",111,N],[13,"RB_SW_SUSPEND","","",111,N],[5,"reboot","","",N,[[["rebootmode"]],["result",["void"]]]],[5,"set_cad_enabled","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).",N,[[["bool"]],["result"]]],[11,"clone","","",111,[[["self"]],["rebootmode"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"hash","","",111,N],[11,"cmp","","",111,[[["self"],["rebootmode"]],["ordering"]]],[11,"eq","","",111,[[["self"],["rebootmode"]],["bool"]]],[11,"partial_cmp","","",111,[[["self"],["rebootmode"]],["option",["ordering"]]]],[0,"termios","nix::sys","An interface for controlling asynchronous communication ports",N,N],[17,"NCCS","nix::sys::termios","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[3,"Termios","","Stores settings for the termios API",N,N],[12,"input_flags","","Input mode flags (see `termios.c_iflag` documentation)",112,N],[12,"output_flags","","Output mode flags (see `termios.c_oflag` documentation)",112,N],[12,"control_flags","","Control mode flags (see `termios.c_cflag` documentation)",112,N],[12,"local_flags","","Local mode flags (see `termios.c_lflag` documentation)",112,N],[12,"control_chars","","Control characters (see `termios.c_cc` documentation)",112,N],[3,"InputFlags","","Flags for configuring the input mode of a terminal",N,N],[3,"OutputFlags","","Flags for configuring the output mode of a terminal",N,N],[3,"ControlFlags","","Flags for setting the control mode of a terminal",N,N],[3,"LocalFlags","","Flags for setting any local modes",N,N],[4,"BaudRate","","Baud rates supported by the system.",N,N],[13,"B0","","",113,N],[13,"B50","","",113,N],[13,"B75","","",113,N],[13,"B110","","",113,N],[13,"B134","","",113,N],[13,"B150","","",113,N],[13,"B200","","",113,N],[13,"B300","","",113,N],[13,"B600","","",113,N],[13,"B1200","","",113,N],[13,"B1800","","",113,N],[13,"B2400","","",113,N],[13,"B4800","","",113,N],[13,"B9600","","",113,N],[13,"B19200","","",113,N],[13,"B38400","","",113,N],[13,"B57600","","",113,N],[13,"B115200","","",113,N],[13,"B230400","","",113,N],[13,"B460800","","",113,N],[13,"B500000","","",113,N],[13,"B576000","","",113,N],[13,"B921600","","",113,N],[13,"B1000000","","",113,N],[13,"B1152000","","",113,N],[13,"B1500000","","",113,N],[13,"B2000000","","",113,N],[13,"B2500000","","",113,N],[13,"B3000000","","",113,N],[13,"B3500000","","",113,N],[13,"B4000000","","",113,N],[4,"SetArg","","Specify when a port configuration change should occur.",N,N],[13,"TCSANOW","","The change will occur immediately",114,N],[13,"TCSADRAIN","","The change occurs after all output has been written",114,N],[13,"TCSAFLUSH","","Same as `TCSADRAIN`, but will also flush the input buffer",114,N],[4,"FlushArg","","Specify a combination of the input and output buffers to flush",N,N],[13,"TCIFLUSH","","Flush data that was received but not read",115,N],[13,"TCOFLUSH","","Flush data written but not transmitted",115,N],[13,"TCIOFLUSH","","Flush both received data not read and written data not transmitted",115,N],[4,"FlowArg","","Specify how transmission flow should be altered",N,N],[13,"TCOOFF","","Suspend transmission",116,N],[13,"TCOON","","Resume transmission",116,N],[13,"TCIOFF","","Transmit a STOP character, which should disable a connected terminal device",116,N],[13,"TCION","","Transmit a START character, which should re-enable a connected terminal device",116,N],[4,"SpecialCharacterIndices","","Indices into the `termios.c_cc` array for special characters.",N,N],[13,"VDISCARD","","",117,N],[13,"VEOF","","",117,N],[13,"VEOL","","",117,N],[13,"VEOL2","","",117,N],[13,"VERASE","","",117,N],[13,"VINTR","","",117,N],[13,"VKILL","","",117,N],[13,"VLNEXT","","",117,N],[13,"VMIN","","",117,N],[13,"VQUIT","","",117,N],[13,"VREPRINT","","",117,N],[13,"VSTART","","",117,N],[13,"VSTOP","","",117,N],[13,"VSUSP","","",117,N],[13,"VSWTC","","",117,N],[13,"VTIME","","",117,N],[13,"VWERASE","","",117,N],[5,"cfgetispeed","","Get input baud rate (see cfgetispeed(3p)).",N,[[["termios"]],["baudrate"]]],[5,"cfgetospeed","","Get output baud rate (see cfgetospeed(3p)).",N,[[["termios"]],["baudrate"]]],[5,"cfsetispeed","","Set input baud rate (see cfsetispeed(3p)).",N,[[["termios"],["baudrate"]],["result"]]],[5,"cfsetospeed","","Set output baud rate (see cfsetospeed(3p)).",N,[[["termios"],["baudrate"]],["result"]]],[5,"cfsetspeed","","Set both the input and output baud rates (see termios(3)).",N,[[["termios"],["baudrate"]],["result"]]],[5,"cfmakeraw","","Configures the port to something like the \"raw\" mode of the old Version 7 terminal driver (see termios(3)).",N,[[["termios"]]]],[5,"tcgetattr","","Return the configuration of a port tcgetattr(3p)).",N,[[["rawfd"]],["result",["termios"]]]],[5,"tcsetattr","","Set the configuration for a terminal (see tcsetattr(3p)).",N,[[["rawfd"],["setarg"],["termios"]],["result"]]],[5,"tcdrain","","Block until all output data is written (see tcdrain(3p)).",N,[[["rawfd"]],["result"]]],[5,"tcflow","","Suspend or resume the transmission or reception of data (see tcflow(3p)).",N,[[["rawfd"],["flowarg"]],["result"]]],[5,"tcflush","","Discard data in the output or input queue (see tcflush(3p)).",N,[[["rawfd"],["flusharg"]],["result"]]],[5,"tcsendbreak","","Send a break for a specific duration (see tcsendbreak(3p)).",N,[[["rawfd"],["c_int"]],["result"]]],[5,"tcgetsid","","Get the session controlled by the given terminal (see tcgetsid(3)).",N,[[["rawfd"]],["result",["pid"]]]],[11,"clone","","",112,[[["self"]],["termios"]]],[11,"from","","",112,[[["termios"]],["self"]]],[11,"clone","","",113,[[["self"]],["baudrate"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"hash","","",113,N],[11,"cmp","","",113,[[["self"],["baudrate"]],["ordering"]]],[11,"eq","","",113,[[["self"],["baudrate"]],["bool"]]],[11,"partial_cmp","","",113,[[["self"],["baudrate"]],["option",["ordering"]]]],[11,"from","","",113,[[["speed_t"]],["baudrate"]]],[11,"clone","","",114,[[["self"]],["setarg"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"hash","","",114,N],[11,"cmp","","",114,[[["self"],["setarg"]],["ordering"]]],[11,"eq","","",114,[[["self"],["setarg"]],["bool"]]],[11,"partial_cmp","","",114,[[["self"],["setarg"]],["option",["ordering"]]]],[11,"clone","","",115,[[["self"]],["flusharg"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"hash","","",115,N],[11,"cmp","","",115,[[["self"],["flusharg"]],["ordering"]]],[11,"eq","","",115,[[["self"],["flusharg"]],["bool"]]],[11,"partial_cmp","","",115,[[["self"],["flusharg"]],["option",["ordering"]]]],[11,"clone","","",116,[[["self"]],["flowarg"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"hash","","",116,N],[11,"cmp","","",116,[[["self"],["flowarg"]],["ordering"]]],[11,"eq","","",116,[[["self"],["flowarg"]],["bool"]]],[11,"partial_cmp","","",116,[[["self"],["flowarg"]],["option",["ordering"]]]],[11,"clone","","",117,[[["self"]],["specialcharacterindices"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"hash","","",117,N],[11,"cmp","","",117,[[["self"],["specialcharacterindices"]],["ordering"]]],[11,"eq","","",117,[[["self"],["specialcharacterindices"]],["bool"]]],[11,"partial_cmp","","",117,[[["self"],["specialcharacterindices"]],["option",["ordering"]]]],[11,"eq","","",118,[[["self"],["inputflags"]],["bool"]]],[11,"ne","","",118,[[["self"],["inputflags"]],["bool"]]],[11,"clone","","",118,[[["self"]],["inputflags"]]],[11,"partial_cmp","","",118,[[["self"],["inputflags"]],["option",["ordering"]]]],[11,"lt","","",118,[[["self"],["inputflags"]],["bool"]]],[11,"le","","",118,[[["self"],["inputflags"]],["bool"]]],[11,"gt","","",118,[[["self"],["inputflags"]],["bool"]]],[11,"ge","","",118,[[["self"],["inputflags"]],["bool"]]],[11,"cmp","","",118,[[["self"],["inputflags"]],["ordering"]]],[11,"hash","","",118,N],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[18,"IGNBRK","","",118,N],[18,"BRKINT","","",118,N],[18,"IGNPAR","","",118,N],[18,"PARMRK","","",118,N],[18,"INPCK","","",118,N],[18,"ISTRIP","","",118,N],[18,"INLCR","","",118,N],[18,"IGNCR","","",118,N],[18,"ICRNL","","",118,N],[18,"IXON","","",118,N],[18,"IXOFF","","",118,N],[18,"IXANY","","",118,N],[18,"IMAXBEL","","",118,N],[18,"IUTF8","","",118,N],[11,"empty","","Returns an empty set of flags.",118,[[],["inputflags"]]],[11,"all","","Returns the set containing all flags.",118,[[],["inputflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",118,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",118,[[["tcflag_t"]],["option",["inputflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",118,[[["tcflag_t"]],["inputflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",118,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",118,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",118,[[["self"],["inputflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",118,[[["self"],["inputflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",118,[[["self"],["inputflags"]]]],[11,"remove","","Removes the specified flags in-place.",118,[[["self"],["inputflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",118,[[["self"],["inputflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",118,[[["self"],["inputflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",118,[[["self"],["inputflags"]],["inputflags"]]],[11,"bitor_assign","","Adds the set of flags.",118,[[["self"],["inputflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",118,[[["self"],["inputflags"]],["inputflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",118,[[["self"],["inputflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",118,[[["self"],["inputflags"]],["inputflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",118,[[["self"],["inputflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",118,[[["self"],["inputflags"]],["inputflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",118,[[["self"],["inputflags"]]]],[11,"not","","Returns the complement of this set of flags.",118,[[["self"]],["inputflags"]]],[11,"extend","","",118,[[["self"],["t"]]]],[11,"from_iter","","",118,[[["t"]],["inputflags"]]],[11,"eq","","",119,[[["self"],["outputflags"]],["bool"]]],[11,"ne","","",119,[[["self"],["outputflags"]],["bool"]]],[11,"clone","","",119,[[["self"]],["outputflags"]]],[11,"partial_cmp","","",119,[[["self"],["outputflags"]],["option",["ordering"]]]],[11,"lt","","",119,[[["self"],["outputflags"]],["bool"]]],[11,"le","","",119,[[["self"],["outputflags"]],["bool"]]],[11,"gt","","",119,[[["self"],["outputflags"]],["bool"]]],[11,"ge","","",119,[[["self"],["outputflags"]],["bool"]]],[11,"cmp","","",119,[[["self"],["outputflags"]],["ordering"]]],[11,"hash","","",119,N],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[18,"OPOST","","",119,N],[18,"OLCUC","","",119,N],[18,"ONLCR","","",119,N],[18,"OCRNL","","",119,N],[18,"ONOCR","","",119,N],[18,"ONLRET","","",119,N],[18,"OFILL","","",119,N],[18,"OFDEL","","",119,N],[18,"NL0","","",119,N],[18,"NL1","","",119,N],[18,"CR0","","",119,N],[18,"CR1","","",119,N],[18,"CR2","","",119,N],[18,"CR3","","",119,N],[18,"TAB0","","",119,N],[18,"TAB1","","",119,N],[18,"TAB2","","",119,N],[18,"TAB3","","",119,N],[18,"XTABS","","",119,N],[18,"BS0","","",119,N],[18,"BS1","","",119,N],[18,"VT0","","",119,N],[18,"VT1","","",119,N],[18,"FF0","","",119,N],[18,"FF1","","",119,N],[18,"NLDLY","","",119,N],[18,"CRDLY","","",119,N],[18,"TABDLY","","",119,N],[18,"BSDLY","","",119,N],[18,"VTDLY","","",119,N],[18,"FFDLY","","",119,N],[11,"empty","","Returns an empty set of flags.",119,[[],["outputflags"]]],[11,"all","","Returns the set containing all flags.",119,[[],["outputflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",119,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",119,[[["tcflag_t"]],["option",["outputflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",119,[[["tcflag_t"]],["outputflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",119,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",119,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",119,[[["self"],["outputflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",119,[[["self"],["outputflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",119,[[["self"],["outputflags"]]]],[11,"remove","","Removes the specified flags in-place.",119,[[["self"],["outputflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",119,[[["self"],["outputflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",119,[[["self"],["outputflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",119,[[["self"],["outputflags"]],["outputflags"]]],[11,"bitor_assign","","Adds the set of flags.",119,[[["self"],["outputflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",119,[[["self"],["outputflags"]],["outputflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",119,[[["self"],["outputflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",119,[[["self"],["outputflags"]],["outputflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",119,[[["self"],["outputflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",119,[[["self"],["outputflags"]],["outputflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",119,[[["self"],["outputflags"]]]],[11,"not","","Returns the complement of this set of flags.",119,[[["self"]],["outputflags"]]],[11,"extend","","",119,[[["self"],["t"]]]],[11,"from_iter","","",119,[[["t"]],["outputflags"]]],[11,"eq","","",120,[[["self"],["controlflags"]],["bool"]]],[11,"ne","","",120,[[["self"],["controlflags"]],["bool"]]],[11,"clone","","",120,[[["self"]],["controlflags"]]],[11,"partial_cmp","","",120,[[["self"],["controlflags"]],["option",["ordering"]]]],[11,"lt","","",120,[[["self"],["controlflags"]],["bool"]]],[11,"le","","",120,[[["self"],["controlflags"]],["bool"]]],[11,"gt","","",120,[[["self"],["controlflags"]],["bool"]]],[11,"ge","","",120,[[["self"],["controlflags"]],["bool"]]],[11,"cmp","","",120,[[["self"],["controlflags"]],["ordering"]]],[11,"hash","","",120,N],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[18,"CS5","","",120,N],[18,"CS6","","",120,N],[18,"CS7","","",120,N],[18,"CS8","","",120,N],[18,"CSTOPB","","",120,N],[18,"CREAD","","",120,N],[18,"PARENB","","",120,N],[18,"PARODD","","",120,N],[18,"HUPCL","","",120,N],[18,"CLOCAL","","",120,N],[18,"CRTSCTS","","",120,N],[18,"CBAUD","","",120,N],[18,"CMSPAR","","",120,N],[18,"CIBAUD","","",120,N],[18,"CBAUDEX","","",120,N],[18,"CSIZE","","",120,N],[11,"empty","","Returns an empty set of flags.",120,[[],["controlflags"]]],[11,"all","","Returns the set containing all flags.",120,[[],["controlflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",120,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,[[["tcflag_t"]],["option",["controlflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,[[["tcflag_t"]],["controlflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",120,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,[[["self"],["controlflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,[[["self"],["controlflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",120,[[["self"],["controlflags"]]]],[11,"remove","","Removes the specified flags in-place.",120,[[["self"],["controlflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",120,[[["self"],["controlflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,[[["self"],["controlflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",120,[[["self"],["controlflags"]],["controlflags"]]],[11,"bitor_assign","","Adds the set of flags.",120,[[["self"],["controlflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,[[["self"],["controlflags"]],["controlflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",120,[[["self"],["controlflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",120,[[["self"],["controlflags"]],["controlflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",120,[[["self"],["controlflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",120,[[["self"],["controlflags"]],["controlflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",120,[[["self"],["controlflags"]]]],[11,"not","","Returns the complement of this set of flags.",120,[[["self"]],["controlflags"]]],[11,"extend","","",120,[[["self"],["t"]]]],[11,"from_iter","","",120,[[["t"]],["controlflags"]]],[11,"eq","","",121,[[["self"],["localflags"]],["bool"]]],[11,"ne","","",121,[[["self"],["localflags"]],["bool"]]],[11,"clone","","",121,[[["self"]],["localflags"]]],[11,"partial_cmp","","",121,[[["self"],["localflags"]],["option",["ordering"]]]],[11,"lt","","",121,[[["self"],["localflags"]],["bool"]]],[11,"le","","",121,[[["self"],["localflags"]],["bool"]]],[11,"gt","","",121,[[["self"],["localflags"]],["bool"]]],[11,"ge","","",121,[[["self"],["localflags"]],["bool"]]],[11,"cmp","","",121,[[["self"],["localflags"]],["ordering"]]],[11,"hash","","",121,N],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[18,"ECHOKE","","",121,N],[18,"ECHOE","","",121,N],[18,"ECHOK","","",121,N],[18,"ECHO","","",121,N],[18,"ECHONL","","",121,N],[18,"ECHOPRT","","",121,N],[18,"ECHOCTL","","",121,N],[18,"ISIG","","",121,N],[18,"ICANON","","",121,N],[18,"IEXTEN","","",121,N],[18,"EXTPROC","","",121,N],[18,"TOSTOP","","",121,N],[18,"FLUSHO","","",121,N],[18,"PENDIN","","",121,N],[18,"NOFLSH","","",121,N],[11,"empty","","Returns an empty set of flags.",121,[[],["localflags"]]],[11,"all","","Returns the set containing all flags.",121,[[],["localflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",121,[[["self"]],["tcflag_t"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",121,[[["tcflag_t"]],["option",["localflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",121,[[["tcflag_t"]],["localflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",121,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",121,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",121,[[["self"],["localflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",121,[[["self"],["localflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",121,[[["self"],["localflags"]]]],[11,"remove","","Removes the specified flags in-place.",121,[[["self"],["localflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",121,[[["self"],["localflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",121,[[["self"],["localflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",121,[[["self"],["localflags"]],["localflags"]]],[11,"bitor_assign","","Adds the set of flags.",121,[[["self"],["localflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",121,[[["self"],["localflags"]],["localflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",121,[[["self"],["localflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",121,[[["self"],["localflags"]],["localflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",121,[[["self"],["localflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",121,[[["self"],["localflags"]],["localflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",121,[[["self"],["localflags"]]]],[11,"not","","Returns the complement of this set of flags.",121,[[["self"]],["localflags"]]],[11,"extend","","",121,[[["self"],["t"]]]],[11,"from_iter","","",121,[[["t"]],["localflags"]]],[0,"utsname","nix::sys","",N,N],[3,"UtsName","nix::sys::utsname","",N,N],[5,"uname","","",N,[[],["utsname"]]],[11,"clone","","",122,[[["self"]],["utsname"]]],[11,"sysname","","",122,[[["self"]],["str"]]],[11,"nodename","","",122,[[["self"]],["str"]]],[11,"release","","",122,[[["self"]],["str"]]],[11,"version","","",122,[[["self"]],["str"]]],[11,"machine","","",122,[[["self"]],["str"]]],[0,"wait","nix::sys","",N,N],[3,"WaitPidFlag","nix::sys::wait","",N,N],[4,"WaitStatus","","Possible return values from `wait()` or `waitpid()`.",N,N],[13,"Exited","","The process exited normally (as with `exit()` or returning from `main`) with the given exit code. This case matches the C macro `WIFEXITED(status)`; the second field is `WEXITSTATUS(status)`.",123,N],[13,"Signaled","","The process was killed by the given signal. The third field indicates whether the signal generated a core dump. This case matches the C macro `WIFSIGNALED(status)`; the last two fields correspond to `WTERMSIG(status)` and `WCOREDUMP(status)`.",123,N],[13,"Stopped","","The process is alive, but was stopped by the given signal. This is only reported if `WaitPidFlag::WUNTRACED` was passed. This case matches the C macro `WIFSTOPPED(status)`; the second field is `WSTOPSIG(status)`.",123,N],[13,"PtraceEvent","","The traced process was stopped by a `PTRACE_EVENT_*` event. See [`nix::sys::ptrace`] and [`ptrace`(2)] for more information. All currently-defined events use `SIGTRAP` as the signal; the third field is the `PTRACE_EVENT_*` value of the event.",123,N],[13,"PtraceSyscall","","The traced process was stopped by execution of a system call, and `PTRACE_O_TRACESYSGOOD` is in effect. See [`ptrace`(2)] for more information.",123,N],[13,"Continued","","The process was previously stopped but has resumed execution after receiving a `SIGCONT` signal. This is only reported if `WaitPidFlag::WCONTINUED` was passed. This case matches the C macro `WIFCONTINUED(status)`.",123,N],[13,"StillAlive","","There are currently no state changes to report in any awaited child process. This is only returned if `WaitPidFlag::WNOHANG` was used (otherwise `wait()` or `waitpid()` would block until there was something to report).",123,N],[5,"waitpid","","",N,[[["p"],["option",["waitpidflag"]]],["result",["waitstatus"]]]],[5,"wait","","",N,[[],["result",["waitstatus"]]]],[11,"eq","","",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"ne","","",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"clone","","",124,[[["self"]],["waitpidflag"]]],[11,"partial_cmp","","",124,[[["self"],["waitpidflag"]],["option",["ordering"]]]],[11,"lt","","",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"le","","",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"gt","","",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"ge","","",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"cmp","","",124,[[["self"],["waitpidflag"]],["ordering"]]],[11,"hash","","",124,N],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[18,"WNOHANG","","",124,N],[18,"WUNTRACED","","",124,N],[18,"WEXITED","","",124,N],[18,"WCONTINUED","","",124,N],[18,"WSTOPPED","","",124,N],[18,"WNOWAIT","","Don't reap, just poll status.",124,N],[18,"__WNOTHREAD","","Don't wait on children of other threads in this group",124,N],[18,"__WALL","","Wait on all children, regardless of type",124,N],[18,"__WCLONE","","",124,N],[11,"empty","","Returns an empty set of flags.",124,[[],["waitpidflag"]]],[11,"all","","Returns the set containing all flags.",124,[[],["waitpidflag"]]],[11,"bits","","Returns the raw value of the flags currently stored.",124,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",124,[[["c_int"]],["option",["waitpidflag"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",124,[[["c_int"]],["waitpidflag"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",124,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",124,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",124,[[["self"],["waitpidflag"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",124,[[["self"],["waitpidflag"]]]],[11,"remove","","Removes the specified flags in-place.",124,[[["self"],["waitpidflag"]]]],[11,"toggle","","Toggles the specified flags in-place.",124,[[["self"],["waitpidflag"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",124,[[["self"],["waitpidflag"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",124,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"bitor_assign","","Adds the set of flags.",124,[[["self"],["waitpidflag"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",124,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"bitxor_assign","","Toggles the set of flags.",124,[[["self"],["waitpidflag"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",124,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",124,[[["self"],["waitpidflag"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",124,[[["self"],["waitpidflag"]],["waitpidflag"]]],[11,"sub_assign","","Disables all flags enabled in the set.",124,[[["self"],["waitpidflag"]]]],[11,"not","","Returns the complement of this set of flags.",124,[[["self"]],["waitpidflag"]]],[11,"extend","","",124,[[["self"],["t"]]]],[11,"from_iter","","",124,[[["t"]],["waitpidflag"]]],[11,"eq","","",123,[[["self"],["waitstatus"]],["bool"]]],[11,"ne","","",123,[[["self"],["waitstatus"]],["bool"]]],[11,"clone","","",123,[[["self"]],["waitstatus"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"pid","","Extracts the PID from the WaitStatus unless it equals StillAlive.",123,[[["self"]],["option",["pid"]]]],[11,"from_raw","","Convert a raw `wstatus` as returned by `waitpid`/`wait` into a `WaitStatus`",123,[[["pid"],["i32"]],["result",["waitstatus"]]]],[0,"mman","nix::sys","",N,N],[3,"ProtFlags","nix::sys::mman","Desired memory protection of a memory mapping.",N,N],[3,"MapFlags","","Additional parameters for `mmap()`.",N,N],[3,"MsFlags","","Configuration flags for `msync`.",N,N],[4,"MmapAdvise","","Usage information for a range of memory to allow for performance optimizations by the kernel.",N,N],[13,"MADV_NORMAL","","No further special treatment. This is the default.",125,N],[13,"MADV_RANDOM","","Expect random page references.",125,N],[13,"MADV_SEQUENTIAL","","Expect sequential page references.",125,N],[13,"MADV_WILLNEED","","Expect access in the near future.",125,N],[13,"MADV_DONTNEED","","Do not expect access in the near future.",125,N],[13,"MADV_REMOVE","","Free up a given range of pages and its associated backing store.",125,N],[13,"MADV_DONTFORK","","Do not make pages in this range available to the child after a `fork(2)`.",125,N],[13,"MADV_DOFORK","","Undo the effect of `MADV_DONTFORK`.",125,N],[13,"MADV_HWPOISON","","Poison the given pages.",125,N],[13,"MADV_MERGEABLE","","Enable Kernel Samepage Merging (KSM) for the given pages.",125,N],[13,"MADV_UNMERGEABLE","","Undo the effect of `MADV_MERGEABLE`",125,N],[13,"MADV_SOFT_OFFLINE","","Preserve the memory of each page but offline the original page.",125,N],[13,"MADV_HUGEPAGE","","Enable Transparent Huge Pages (THP) for pages in the given range.",125,N],[13,"MADV_NOHUGEPAGE","","Undo the effect of `MADV_HUGEPAGE`.",125,N],[13,"MADV_DONTDUMP","","Exclude the given range from a core dump.",125,N],[13,"MADV_DODUMP","","Undo the effect of an earlier `MADV_DONTDUMP`.",125,N],[13,"MADV_FREE","","Specify that the application no longer needs the pages in the given range.",125,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",N,N],[5,"munmap","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"shm_open","","",N,[[["p"],["oflag"],["mode"]],["result",["rawfd"]]]],[5,"shm_unlink","","",N,[[["p"]],["result"]]],[11,"eq","","",126,[[["self"],["protflags"]],["bool"]]],[11,"ne","","",126,[[["self"],["protflags"]],["bool"]]],[11,"clone","","",126,[[["self"]],["protflags"]]],[11,"partial_cmp","","",126,[[["self"],["protflags"]],["option",["ordering"]]]],[11,"lt","","",126,[[["self"],["protflags"]],["bool"]]],[11,"le","","",126,[[["self"],["protflags"]],["bool"]]],[11,"gt","","",126,[[["self"],["protflags"]],["bool"]]],[11,"ge","","",126,[[["self"],["protflags"]],["bool"]]],[11,"cmp","","",126,[[["self"],["protflags"]],["ordering"]]],[11,"hash","","",126,N],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[18,"PROT_NONE","","Pages cannot be accessed.",126,N],[18,"PROT_READ","","Pages can be read.",126,N],[18,"PROT_WRITE","","Pages can be written.",126,N],[18,"PROT_EXEC","","Pages can be executed",126,N],[18,"PROT_GROWSDOWN","","Apply protection up to the end of a mapping that grows upwards.",126,N],[18,"PROT_GROWSUP","","Apply protection down to the beginning of a mapping that grows downwards.",126,N],[11,"empty","","Returns an empty set of flags.",126,[[],["protflags"]]],[11,"all","","Returns the set containing all flags.",126,[[],["protflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",126,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",126,[[["c_int"]],["option",["protflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",126,[[["c_int"]],["protflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",126,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,[[["self"],["protflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,[[["self"],["protflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",126,[[["self"],["protflags"]]]],[11,"remove","","Removes the specified flags in-place.",126,[[["self"],["protflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",126,[[["self"],["protflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",126,[[["self"],["protflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",126,[[["self"],["protflags"]],["protflags"]]],[11,"bitor_assign","","Adds the set of flags.",126,[[["self"],["protflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",126,[[["self"],["protflags"]],["protflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",126,[[["self"],["protflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",126,[[["self"],["protflags"]],["protflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",126,[[["self"],["protflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",126,[[["self"],["protflags"]],["protflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",126,[[["self"],["protflags"]]]],[11,"not","","Returns the complement of this set of flags.",126,[[["self"]],["protflags"]]],[11,"extend","","",126,[[["self"],["t"]]]],[11,"from_iter","","",126,[[["t"]],["protflags"]]],[11,"eq","","",127,[[["self"],["mapflags"]],["bool"]]],[11,"ne","","",127,[[["self"],["mapflags"]],["bool"]]],[11,"clone","","",127,[[["self"]],["mapflags"]]],[11,"partial_cmp","","",127,[[["self"],["mapflags"]],["option",["ordering"]]]],[11,"lt","","",127,[[["self"],["mapflags"]],["bool"]]],[11,"le","","",127,[[["self"],["mapflags"]],["bool"]]],[11,"gt","","",127,[[["self"],["mapflags"]],["bool"]]],[11,"ge","","",127,[[["self"],["mapflags"]],["bool"]]],[11,"cmp","","",127,[[["self"],["mapflags"]],["ordering"]]],[11,"hash","","",127,N],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[18,"MAP_FILE","","Compatibility flag. Ignored.",127,N],[18,"MAP_SHARED","","Share this mapping. Mutually exclusive with `MAP_PRIVATE`.",127,N],[18,"MAP_PRIVATE","","Create a private copy-on-write mapping. Mutually exclusive with `MAP_SHARED`.",127,N],[18,"MAP_FIXED","","Place the mapping at exactly the address specified in `addr`.",127,N],[18,"MAP_ANON","","Synonym for `MAP_ANONYMOUS`.",127,N],[18,"MAP_ANONYMOUS","","The mapping is not backed by any file.",127,N],[18,"MAP_32BIT","","Put the mapping into the first 2GB of the process address space.",127,N],[18,"MAP_GROWSDOWN","","Used for stacks; indicates to the kernel that the mapping should extend downward in memory.",127,N],[18,"MAP_DENYWRITE","","Compatibility flag. Ignored.",127,N],[18,"MAP_EXECUTABLE","","Compatibility flag. Ignored.",127,N],[18,"MAP_LOCKED","","Mark the mmaped region to be locked in the same way as `mlock(2)`.",127,N],[18,"MAP_NORESERVE","","Do not reserve swap space for this mapping.",127,N],[18,"MAP_POPULATE","","Populate page tables for a mapping.",127,N],[18,"MAP_NONBLOCK","","Only meaningful when used with `MAP_POPULATE`. Don't perform read-ahead.",127,N],[18,"MAP_HUGETLB","","Allocate the mapping using \"huge pages.\"",127,N],[18,"MAP_STACK","","Region grows down, like a stack.",127,N],[11,"empty","","Returns an empty set of flags.",127,[[],["mapflags"]]],[11,"all","","Returns the set containing all flags.",127,[[],["mapflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",127,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",127,[[["c_int"]],["option",["mapflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",127,[[["c_int"]],["mapflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",127,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",127,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",127,[[["self"],["mapflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",127,[[["self"],["mapflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",127,[[["self"],["mapflags"]]]],[11,"remove","","Removes the specified flags in-place.",127,[[["self"],["mapflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",127,[[["self"],["mapflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",127,[[["self"],["mapflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",127,[[["self"],["mapflags"]],["mapflags"]]],[11,"bitor_assign","","Adds the set of flags.",127,[[["self"],["mapflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",127,[[["self"],["mapflags"]],["mapflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",127,[[["self"],["mapflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",127,[[["self"],["mapflags"]],["mapflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",127,[[["self"],["mapflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",127,[[["self"],["mapflags"]],["mapflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",127,[[["self"],["mapflags"]]]],[11,"not","","Returns the complement of this set of flags.",127,[[["self"]],["mapflags"]]],[11,"extend","","",127,[[["self"],["t"]]]],[11,"from_iter","","",127,[[["t"]],["mapflags"]]],[11,"clone","","",125,[[["self"]],["mmapadvise"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"hash","","",125,N],[11,"cmp","","",125,[[["self"],["mmapadvise"]],["ordering"]]],[11,"eq","","",125,[[["self"],["mmapadvise"]],["bool"]]],[11,"partial_cmp","","",125,[[["self"],["mmapadvise"]],["option",["ordering"]]]],[11,"eq","","",128,[[["self"],["msflags"]],["bool"]]],[11,"ne","","",128,[[["self"],["msflags"]],["bool"]]],[11,"clone","","",128,[[["self"]],["msflags"]]],[11,"partial_cmp","","",128,[[["self"],["msflags"]],["option",["ordering"]]]],[11,"lt","","",128,[[["self"],["msflags"]],["bool"]]],[11,"le","","",128,[[["self"],["msflags"]],["bool"]]],[11,"gt","","",128,[[["self"],["msflags"]],["bool"]]],[11,"ge","","",128,[[["self"],["msflags"]],["bool"]]],[11,"cmp","","",128,[[["self"],["msflags"]],["ordering"]]],[11,"hash","","",128,N],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[18,"MS_ASYNC","","Schedule an update but return immediately.",128,N],[18,"MS_INVALIDATE","","Invalidate all cached data.",128,N],[18,"MS_SYNC","","Perform an update and wait for it to complete.",128,N],[11,"empty","","Returns an empty set of flags.",128,[[],["msflags"]]],[11,"all","","Returns the set containing all flags.",128,[[],["msflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",128,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",128,[[["c_int"]],["option",["msflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",128,[[["c_int"]],["msflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",128,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",128,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",128,[[["self"],["msflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",128,[[["self"],["msflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",128,[[["self"],["msflags"]]]],[11,"remove","","Removes the specified flags in-place.",128,[[["self"],["msflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",128,[[["self"],["msflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",128,[[["self"],["msflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",128,[[["self"],["msflags"]],["msflags"]]],[11,"bitor_assign","","Adds the set of flags.",128,[[["self"],["msflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",128,[[["self"],["msflags"]],["msflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",128,[[["self"],["msflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",128,[[["self"],["msflags"]],["msflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",128,[[["self"],["msflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",128,[[["self"],["msflags"]],["msflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",128,[[["self"],["msflags"]]]],[11,"not","","Returns the complement of this set of flags.",128,[[["self"]],["msflags"]]],[11,"extend","","",128,[[["self"],["t"]]]],[11,"from_iter","","",128,[[["t"]],["msflags"]]],[0,"uio","nix::sys","",N,N],[3,"RemoteIoVec","nix::sys::uio","A slice of memory in a remote process, starting at address `base` and consisting of `len` bytes.",N,N],[12,"base","","The starting address of this slice (`iov_base`).",129,N],[12,"len","","The number of bytes in this slice (`iov_len`).",129,N],[3,"IoVec","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"pwrite","","",N,N],[5,"pread","","",N,N],[5,"process_vm_writev","","Write data directly to another process's virtual memory (see [`process_vm_writev`(2)]).",N,N],[5,"process_vm_readv","","Read data directly from another process's virtual memory (see [`process_vm_readv`(2)]).",N,N],[11,"as_slice","","",130,N],[11,"from_slice","","",130,N],[11,"from_mut_slice","","",130,N],[0,"time","nix::sys","",N,N],[3,"TimeSpec","nix::sys::time","",N,N],[3,"TimeVal","","",N,N],[8,"TimeValLike","","",N,N],[11,"zero","","",131,[[],["self"]]],[11,"hours","","",131,[[["i64"]],["self"]]],[11,"minutes","","",131,[[["i64"]],["self"]]],[10,"seconds","","",131,[[["i64"]],["self"]]],[10,"milliseconds","","",131,[[["i64"]],["self"]]],[10,"microseconds","","",131,[[["i64"]],["self"]]],[10,"nanoseconds","","",131,[[["i64"]],["self"]]],[11,"num_hours","","",131,[[["self"]],["i64"]]],[11,"num_minutes","","",131,[[["self"]],["i64"]]],[10,"num_seconds","","",131,[[["self"]],["i64"]]],[10,"num_milliseconds","","",131,[[["self"]],["i64"]]],[10,"num_microseconds","","",131,[[["self"]],["i64"]]],[10,"num_nanoseconds","","",131,[[["self"]],["i64"]]],[11,"clone","","",132,[[["self"]],["timespec"]]],[11,"as_ref","","",132,[[["self"]],["timespec"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"eq","","",132,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",132,[[["self"],["timespec"]],["ordering"]]],[11,"partial_cmp","","",132,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"seconds","","",132,[[["i64"]],["timespec"]]],[11,"milliseconds","","",132,[[["i64"]],["timespec"]]],[11,"microseconds","","Makes a new `TimeSpec` with given number of microseconds.",132,[[["i64"]],["timespec"]]],[11,"nanoseconds","","Makes a new `TimeSpec` with given number of nanoseconds.",132,[[["i64"]],["timespec"]]],[11,"num_seconds","","",132,[[["self"]],["i64"]]],[11,"num_milliseconds","","",132,[[["self"]],["i64"]]],[11,"num_microseconds","","",132,[[["self"]],["i64"]]],[11,"num_nanoseconds","","",132,[[["self"]],["i64"]]],[11,"tv_sec","","",132,[[["self"]],["time_t"]]],[11,"tv_nsec","","",132,[[["self"]],["c_long"]]],[11,"neg","","",132,[[["self"]],["timespec"]]],[11,"add","","",132,[[["self"],["timespec"]],["timespec"]]],[11,"sub","","",132,[[["self"],["timespec"]],["timespec"]]],[11,"mul","","",132,[[["self"],["i32"]],["timespec"]]],[11,"div","","",132,[[["self"],["i32"]],["timespec"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"clone","","",133,[[["self"]],["timeval"]]],[11,"as_ref","","",133,[[["self"]],["timeval"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"eq","","",133,[[["self"],["timeval"]],["bool"]]],[11,"cmp","","",133,[[["self"],["timeval"]],["ordering"]]],[11,"partial_cmp","","",133,[[["self"],["timeval"]],["option",["ordering"]]]],[11,"seconds","","",133,[[["i64"]],["timeval"]]],[11,"milliseconds","","",133,[[["i64"]],["timeval"]]],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",133,[[["i64"]],["timeval"]]],[11,"nanoseconds","","Makes a new `TimeVal` with given number of nanoseconds.  Some precision will be lost",133,[[["i64"]],["timeval"]]],[11,"num_seconds","","",133,[[["self"]],["i64"]]],[11,"num_milliseconds","","",133,[[["self"]],["i64"]]],[11,"num_microseconds","","",133,[[["self"]],["i64"]]],[11,"num_nanoseconds","","",133,[[["self"]],["i64"]]],[11,"tv_sec","","",133,[[["self"]],["time_t"]]],[11,"tv_usec","","",133,[[["self"]],["suseconds_t"]]],[11,"neg","","",133,[[["self"]],["timeval"]]],[11,"add","","",133,[[["self"],["timeval"]],["timeval"]]],[11,"sub","","",133,[[["self"],["timeval"]],["timeval"]]],[11,"mul","","",133,[[["self"],["i32"]],["timeval"]]],[11,"div","","",133,[[["self"],["i32"]],["timeval"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[0,"ptrace","nix::sys","For detailed description of the ptrace requests, consult `man ptrace`.",N,N],[3,"Options","nix::sys::ptrace","Ptrace options used in conjunction with the PTRACE_SETOPTIONS request. See `man ptrace` for more details.",N,N],[4,"Request","","Ptrace Request enum defining the action to be taken.",N,N],[13,"PTRACE_TRACEME","","",134,N],[13,"PTRACE_PEEKTEXT","","",134,N],[13,"PTRACE_PEEKDATA","","",134,N],[13,"PTRACE_PEEKUSER","","",134,N],[13,"PTRACE_POKETEXT","","",134,N],[13,"PTRACE_POKEDATA","","",134,N],[13,"PTRACE_POKEUSER","","",134,N],[13,"PTRACE_CONT","","",134,N],[13,"PTRACE_KILL","","",134,N],[13,"PTRACE_SINGLESTEP","","",134,N],[13,"PTRACE_GETREGS","","",134,N],[13,"PTRACE_SETREGS","","",134,N],[13,"PTRACE_GETFPREGS","","",134,N],[13,"PTRACE_SETFPREGS","","",134,N],[13,"PTRACE_ATTACH","","",134,N],[13,"PTRACE_DETACH","","",134,N],[13,"PTRACE_GETFPXREGS","","",134,N],[13,"PTRACE_SETFPXREGS","","",134,N],[13,"PTRACE_SYSCALL","","",134,N],[13,"PTRACE_SETOPTIONS","","",134,N],[13,"PTRACE_GETEVENTMSG","","",134,N],[13,"PTRACE_GETSIGINFO","","",134,N],[13,"PTRACE_SETSIGINFO","","",134,N],[13,"PTRACE_GETREGSET","","",134,N],[13,"PTRACE_SETREGSET","","",134,N],[13,"PTRACE_SEIZE","","",134,N],[13,"PTRACE_INTERRUPT","","",134,N],[13,"PTRACE_LISTEN","","",134,N],[13,"PTRACE_PEEKSIGINFO","","",134,N],[4,"Event","","Using the ptrace options the tracer can configure the tracee to stop at certain events. This enum is used to define those events as defined in `man ptrace`.",N,N],[13,"PTRACE_EVENT_FORK","","Event that stops before a return from fork or clone.",135,N],[13,"PTRACE_EVENT_VFORK","","Event that stops before a return from vfork or clone.",135,N],[13,"PTRACE_EVENT_CLONE","","Event that stops before a return from clone.",135,N],[13,"PTRACE_EVENT_EXEC","","Event that stops before a return from execve.",135,N],[13,"PTRACE_EVENT_VFORK_DONE","","Event for a return from vfork.",135,N],[13,"PTRACE_EVENT_EXIT","","Event for a stop before an exit. Unlike the waitpid Exit status program. registers can still be examined",135,N],[13,"PTRACE_EVENT_SECCOMP","","STop triggered by a seccomp rule on a tracee.",135,N],[5,"ptrace","","Performs a ptrace request. If the request in question is provided by a specialised function this function will return an unsupported operation error.",N,N],[5,"setoptions","","Set options, as with `ptrace(PTRACE_SETOPTIONS,...)`.",N,[[["pid"],["options"]],["result"]]],[5,"getevent","","Gets a ptrace event as described by `ptrace(PTRACE_GETEVENTMSG,...)`",N,[[["pid"]],["result",["c_long"]]]],[5,"getsiginfo","","Get siginfo as with `ptrace(PTRACE_GETSIGINFO,...)`",N,[[["pid"]],["result",["siginfo_t"]]]],[5,"setsiginfo","","Set siginfo as with `ptrace(PTRACE_SETSIGINFO,...)`",N,[[["pid"],["siginfo_t"]],["result"]]],[5,"traceme","","Sets the process as traceable, as with `ptrace(PTRACE_TRACEME, ...)`",N,[[],["result"]]],[5,"syscall","","Ask for next syscall, as with `ptrace(PTRACE_SYSCALL, ...)`",N,[[["pid"]],["result"]]],[5,"attach","","Attach to a running process, as with `ptrace(PTRACE_ATTACH, ...)`",N,[[["pid"]],["result"]]],[5,"detach","","Detaches the current running process, as with `ptrace(PTRACE_DETACH, ...)`",N,[[["pid"]],["result"]]],[5,"cont","","Restart the stopped tracee process, as with `ptrace(PTRACE_CONT, ...)`",N,[[["pid"],["t"]],["result"]]],[11,"clone","","",134,[[["self"]],["request"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"hash","","",134,N],[11,"cmp","","",134,[[["self"],["request"]],["ordering"]]],[11,"eq","","",134,[[["self"],["request"]],["bool"]]],[11,"partial_cmp","","",134,[[["self"],["request"]],["option",["ordering"]]]],[11,"clone","","",135,[[["self"]],["event"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"hash","","",135,N],[11,"cmp","","",135,[[["self"],["event"]],["ordering"]]],[11,"eq","","",135,[[["self"],["event"]],["bool"]]],[11,"partial_cmp","","",135,[[["self"],["event"]],["option",["ordering"]]]],[11,"eq","","",136,[[["self"],["options"]],["bool"]]],[11,"ne","","",136,[[["self"],["options"]],["bool"]]],[11,"clone","","",136,[[["self"]],["options"]]],[11,"partial_cmp","","",136,[[["self"],["options"]],["option",["ordering"]]]],[11,"lt","","",136,[[["self"],["options"]],["bool"]]],[11,"le","","",136,[[["self"],["options"]],["bool"]]],[11,"gt","","",136,[[["self"],["options"]],["bool"]]],[11,"ge","","",136,[[["self"],["options"]],["bool"]]],[11,"cmp","","",136,[[["self"],["options"]],["ordering"]]],[11,"hash","","",136,N],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[18,"PTRACE_O_TRACESYSGOOD","","When delivering system call traps set a bit to allow tracer to distinguish between normal stops or syscall stops. May not work on all systems.",136,N],[18,"PTRACE_O_TRACEFORK","","Stop tracee at next fork and start tracing the forked process.",136,N],[18,"PTRACE_O_TRACEVFORK","","Stop tracee at next vfork call and trace the vforked process.",136,N],[18,"PTRACE_O_TRACECLONE","","Stop tracee at next clone call and trace the cloned process.",136,N],[18,"PTRACE_O_TRACEEXEC","","Stop tracee at next execve call.",136,N],[18,"PTRACE_O_TRACEVFORKDONE","","Stop tracee at vfork completion.",136,N],[18,"PTRACE_O_TRACEEXIT","","Stop tracee at next exit call. Stops before exit commences allowing tracer to see location of exit and register states.",136,N],[18,"PTRACE_O_TRACESECCOMP","","Stop tracee when a SECCOMP_RET_TRACE rule is triggered. See `man seccomp` for more details.",136,N],[18,"PTRACE_O_EXITKILL","","Send a SIGKILL to the tracee if the tracer exits.  This is useful for ptrace jailers to prevent tracees from escaping their control.",136,N],[11,"empty","","Returns an empty set of flags.",136,[[],["options"]]],[11,"all","","Returns the set containing all flags.",136,[[],["options"]]],[11,"bits","","Returns the raw value of the flags currently stored.",136,[[["self"]],["c_int"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",136,[[["c_int"]],["option",["options"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",136,[[["c_int"]],["options"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",136,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",136,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",136,[[["self"],["options"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",136,[[["self"],["options"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",136,[[["self"],["options"]]]],[11,"remove","","Removes the specified flags in-place.",136,[[["self"],["options"]]]],[11,"toggle","","Toggles the specified flags in-place.",136,[[["self"],["options"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",136,[[["self"],["options"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",136,[[["self"],["options"]],["options"]]],[11,"bitor_assign","","Adds the set of flags.",136,[[["self"],["options"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",136,[[["self"],["options"]],["options"]]],[11,"bitxor_assign","","Toggles the set of flags.",136,[[["self"],["options"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",136,[[["self"],["options"]],["options"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",136,[[["self"],["options"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",136,[[["self"],["options"]],["options"]]],[11,"sub_assign","","Disables all flags enabled in the set.",136,[[["self"],["options"]]]],[11,"not","","Returns the complement of this set of flags.",136,[[["self"]],["options"]]],[11,"extend","","",136,[[["self"],["t"]]]],[11,"from_iter","","",136,[[["t"]],["options"]]],[0,"select","nix::sys","",N,N],[17,"FD_SETSIZE","nix::sys::select","",N,N],[3,"FdSet","","",N,N],[5,"select","","Monitors file descriptors for readiness",N,[[["n"],["r"],["w"],["e"],["t"]],["result",["c_int"]]]],[11,"new","","",137,[[],["fdset"]]],[11,"insert","","",137,[[["self"],["rawfd"]]]],[11,"remove","","",137,[[["self"],["rawfd"]]]],[11,"contains","","",137,[[["self"],["rawfd"]],["bool"]]],[11,"clear","","",137,[[["self"]]]],[11,"highest","","Finds the highest file descriptor in the set.",137,[[["self"]],["option",["rawfd"]]]],[0,"quota","nix::sys","Set and configure disk quotas for users, groups, or projects.",N,N],[3,"QuotaValidFlags","nix::sys::quota","Indicates the quota fields that are valid to read from.",N,N],[3,"Dqblk","","Wrapper type for `if_dqblk`",N,N],[4,"QuotaType","","The scope of the quota.",N,N],[13,"USRQUOTA","","Specify a user quota",138,N],[13,"GRPQUOTA","","Specify a group quota",138,N],[4,"QuotaFmt","","The type of quota format to use.",N,N],[13,"QFMT_VFS_OLD","","Use the original quota format.",139,N],[13,"QFMT_VFS_V0","","Use the standard VFS v0 quota format.",139,N],[13,"QFMT_VFS_V1","","Use the VFS v1 quota format.",139,N],[5,"quotactl_on","","Turn on disk quotas for a block device.",N,[[["quotatype"],["p"],["quotafmt"],["p"]],["result"]]],[5,"quotactl_off","","Disable disk quotas for a block device.",N,[[["quotatype"],["p"]],["result"]]],[5,"quotactl_sync","","Update the on-disk copy of quota usages for a filesystem.",N,[[["quotatype"],["option"]],["result"]]],[5,"quotactl_get","","Get disk quota limits and current usage for the given user/group id.",N,[[["quotatype"],["p"],["c_int"]],["result",["dqblk"]]]],[5,"quotactl_set","","Configure quota values for the specified fields for a given user/group id.",N,[[["quotatype"],["p"],["c_int"],["dqblk"],["quotavalidflags"]],["result"]]],[11,"clone","","",138,[[["self"]],["quotatype"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"hash","","",138,N],[11,"cmp","","",138,[[["self"],["quotatype"]],["ordering"]]],[11,"eq","","",138,[[["self"],["quotatype"]],["bool"]]],[11,"partial_cmp","","",138,[[["self"],["quotatype"]],["option",["ordering"]]]],[11,"clone","","",139,[[["self"]],["quotafmt"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"hash","","",139,N],[11,"cmp","","",139,[[["self"],["quotafmt"]],["ordering"]]],[11,"eq","","",139,[[["self"],["quotafmt"]],["bool"]]],[11,"partial_cmp","","",139,[[["self"],["quotafmt"]],["option",["ordering"]]]],[11,"eq","","",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"ne","","",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"clone","","",140,[[["self"]],["quotavalidflags"]]],[11,"partial_cmp","","",140,[[["self"],["quotavalidflags"]],["option",["ordering"]]]],[11,"lt","","",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"le","","",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"gt","","",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"ge","","",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"cmp","","",140,[[["self"],["quotavalidflags"]],["ordering"]]],[11,"hash","","",140,N],[11,"default","","",140,[[],["quotavalidflags"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[18,"QIF_BLIMITS","","The block hard & soft limit fields.",140,N],[18,"QIF_SPACE","","The current space field.",140,N],[18,"QIF_ILIMITS","","The inode hard & soft limit fields.",140,N],[18,"QIF_INODES","","The current inodes field.",140,N],[18,"QIF_BTIME","","The disk use time limit field.",140,N],[18,"QIF_ITIME","","The file quote time limit field.",140,N],[18,"QIF_LIMITS","","All block & inode limits.",140,N],[18,"QIF_USAGE","","The space & inodes usage fields.",140,N],[18,"QIF_TIMES","","The time limit fields.",140,N],[18,"QIF_ALL","","All fields.",140,N],[11,"empty","","Returns an empty set of flags.",140,[[],["quotavalidflags"]]],[11,"all","","Returns the set containing all flags.",140,[[],["quotavalidflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",140,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",140,[[["u32"]],["option",["quotavalidflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",140,[[["u32"]],["quotavalidflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",140,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",140,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",140,[[["self"],["quotavalidflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",140,[[["self"],["quotavalidflags"]]]],[11,"remove","","Removes the specified flags in-place.",140,[[["self"],["quotavalidflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",140,[[["self"],["quotavalidflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",140,[[["self"],["quotavalidflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",140,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"bitor_assign","","Adds the set of flags.",140,[[["self"],["quotavalidflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",140,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",140,[[["self"],["quotavalidflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",140,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",140,[[["self"],["quotavalidflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",140,[[["self"],["quotavalidflags"]],["quotavalidflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",140,[[["self"],["quotavalidflags"]]]],[11,"not","","Returns the complement of this set of flags.",140,[[["self"]],["quotavalidflags"]]],[11,"extend","","",140,[[["self"],["t"]]]],[11,"from_iter","","",140,[[["t"]],["quotavalidflags"]]],[11,"clone","","",141,[[["self"]],["dqblk"]]],[11,"default","","",141,[[],["dqblk"]]],[11,"blocks_hard_limit","","The absolute limit on disk quota blocks allocated.",141,[[["self"]],["option",["u64"]]]],[11,"set_blocks_hard_limit","","Set the absolute limit on disk quota blocks allocated.",141,[[["self"],["u64"]]]],[11,"blocks_soft_limit","","Preferred limit on disk quota blocks",141,[[["self"]],["option",["u64"]]]],[11,"set_blocks_soft_limit","","Set the preferred limit on disk quota blocks allocated.",141,[[["self"],["u64"]]]],[11,"occupied_space","","Current occupied space (bytes).",141,[[["self"]],["option",["u64"]]]],[11,"inodes_hard_limit","","Maximum number of allocated inodes.",141,[[["self"]],["option",["u64"]]]],[11,"set_inodes_hard_limit","","Set the maximum number of allocated inodes.",141,[[["self"],["u64"]]]],[11,"inodes_soft_limit","","Preferred inode limit",141,[[["self"]],["option",["u64"]]]],[11,"set_inodes_soft_limit","","Set the preferred limit of allocated inodes.",141,[[["self"],["u64"]]]],[11,"allocated_inodes","","Current number of allocated inodes.",141,[[["self"]],["option",["u64"]]]],[11,"block_time_limit","","Time limit for excessive disk use.",141,[[["self"]],["option",["u64"]]]],[11,"set_block_time_limit","","Set the time limit for excessive disk use.",141,[[["self"],["u64"]]]],[11,"inode_time_limit","","Time limit for excessive files.",141,[[["self"]],["option",["u64"]]]],[11,"set_inode_time_limit","","Set the time limit for excessive files.",141,[[["self"],["u64"]]]],[0,"statfs","nix::sys","",N,N],[5,"statfs","nix::sys::statfs","",N,[[["p"],["statfs"]],["result"]]],[5,"fstatfs","","",N,[[["t"],["statfs"]],["result"]]],[0,"statvfs","nix::sys","Get filesystem statistics",N,N],[3,"FsFlags","nix::sys::statvfs","File system mount Flags",N,N],[3,"Statvfs","","Wrapper around the POSIX `statvfs` struct",N,N],[5,"statvfs","","Return a `Statvfs` object with information about the `path`",N,[[["p"]],["result",["statvfs"]]]],[5,"fstatvfs","","Return a `Statvfs` object with information about `fd`",N,[[["t"]],["result",["statvfs"]]]],[11,"eq","","",142,[[["self"],["fsflags"]],["bool"]]],[11,"ne","","",142,[[["self"],["fsflags"]],["bool"]]],[11,"clone","","",142,[[["self"]],["fsflags"]]],[11,"partial_cmp","","",142,[[["self"],["fsflags"]],["option",["ordering"]]]],[11,"lt","","",142,[[["self"],["fsflags"]],["bool"]]],[11,"le","","",142,[[["self"],["fsflags"]],["bool"]]],[11,"gt","","",142,[[["self"],["fsflags"]],["bool"]]],[11,"ge","","",142,[[["self"],["fsflags"]],["bool"]]],[11,"cmp","","",142,[[["self"],["fsflags"]],["ordering"]]],[11,"hash","","",142,N],[11,"default","","",142,[[],["fsflags"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[18,"ST_RDONLY","","Read Only",142,N],[18,"ST_NOSUID","","Do not allow the set-uid bits to have an effect",142,N],[18,"ST_NODEV","","Do not interpret character or block-special devices",142,N],[18,"ST_NOEXEC","","Do not allow execution of binaries on the filesystem",142,N],[18,"ST_SYNCHRONOUS","","All IO should be done synchronously",142,N],[18,"ST_MANDLOCK","","Allow mandatory locks on the filesystem",142,N],[18,"ST_WRITE","","Write on file/directory/symlink",142,N],[18,"ST_APPEND","","Append-only file",142,N],[18,"ST_IMMUTABLE","","Immutable file",142,N],[18,"ST_NOATIME","","Do not update access times on files",142,N],[18,"ST_NODIRATIME","","Do not update access times on files",142,N],[18,"ST_RELATIME","","Update access time relative to modify/change time",142,N],[11,"empty","","Returns an empty set of flags.",142,[[],["fsflags"]]],[11,"all","","Returns the set containing all flags.",142,[[],["fsflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",142,[[["self"]],["c_ulong"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",142,[[["c_ulong"]],["option",["fsflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",142,[[["c_ulong"]],["fsflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",142,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",142,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",142,[[["self"],["fsflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",142,[[["self"],["fsflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",142,[[["self"],["fsflags"]]]],[11,"remove","","Removes the specified flags in-place.",142,[[["self"],["fsflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",142,[[["self"],["fsflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",142,[[["self"],["fsflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",142,[[["self"],["fsflags"]],["fsflags"]]],[11,"bitor_assign","","Adds the set of flags.",142,[[["self"],["fsflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",142,[[["self"],["fsflags"]],["fsflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",142,[[["self"],["fsflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",142,[[["self"],["fsflags"]],["fsflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",142,[[["self"],["fsflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",142,[[["self"],["fsflags"]],["fsflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",142,[[["self"],["fsflags"]]]],[11,"not","","Returns the complement of this set of flags.",142,[[["self"]],["fsflags"]]],[11,"extend","","",142,[[["self"],["t"]]]],[11,"from_iter","","",142,[[["t"]],["fsflags"]]],[11,"block_size","","get the file system block size",143,[[["self"]],["c_ulong"]]],[11,"fragment_size","","Get the fundamental file system block size",143,[[["self"]],["c_ulong"]]],[11,"blocks","","Get the number of blocks.",143,[[["self"]],["fsblkcnt_t"]]],[11,"blocks_free","","Get the number of free blocks in the file system",143,[[["self"]],["fsblkcnt_t"]]],[11,"blocks_available","","Get the number of free blocks for unprivileged users",143,[[["self"]],["fsblkcnt_t"]]],[11,"files","","Get the total number of file inodes",143,[[["self"]],["fsfilcnt_t"]]],[11,"files_free","","Get the number of free file inodes",143,[[["self"]],["fsfilcnt_t"]]],[11,"files_available","","Get the number of free file inodes for unprivileged users",143,[[["self"]],["fsfilcnt_t"]]],[11,"filesystem_id","","Get the file system id",143,[[["self"]],["c_ulong"]]],[11,"flags","","Get the mount flags",143,[[["self"]],["fsflags"]]],[11,"name_max","","Get the maximum filename length",143,[[["self"]],["c_ulong"]]],[0,"pthread","nix::sys","",N,N],[5,"pthread_self","nix::sys::pthread","Obtain ID of the calling thread (see `pthread_self(3)`",N,[[],["pthread"]]],[6,"Pthread","","",N,N],[0,"ucontext","nix","",N,N],[3,"UContext","nix::ucontext","",N,N],[11,"clone","","",144,[[["self"]],["ucontext"]]],[11,"get","","",144,[[],["result",["ucontext"]]]],[11,"set","","",144,[[["self"]],["result"]]],[11,"sigmask_mut","","",144,[[["self"]],["sigset"]]],[11,"sigmask","","",144,[[["self"]],["sigset"]]],[0,"unistd","nix","Safe wrappers around functions found in libc \"unistd.h\" header",N,N],[3,"Uid","nix::unistd","User identifier",N,N],[3,"Gid","","Group identifier",N,N],[3,"Pid","","Process identifier",N,N],[4,"ForkResult","","Represents the successful result of calling `fork`",N,N],[13,"Parent","","",145,N],[12,"child","nix::unistd::ForkResult","",145,N],[13,"Child","nix::unistd","",145,N],[4,"Whence","","Directive that tells [`lseek`] and [`lseek64`] what the offset is relative to.",N,N],[13,"SeekSet","","Specify an offset relative to the start of the file.",146,N],[13,"SeekCur","","Specify an offset relative to the current file location.",146,N],[13,"SeekEnd","","Specify an offset relative to the end of the file.",146,N],[13,"SeekData","","Specify an offset relative to the next location in the file greater than or equal to offset that contains some data. If offset points to some data, then the file offset is set to offset.",146,N],[13,"SeekHole","","Specify an offset relative to the next hole in the file greater than or equal to offset. If offset points into the middle of a hole, then the file offset should be set to offset. If there is no hole past offset, then the file offset should be adjusted to the end of the file (i.e., there is an implicit hole at the end of any file).",146,N],[4,"PathconfVar","","Variable names for `pathconf`",N,N],[13,"FILESIZEBITS","","Minimum number of bits needed to represent, as a signed integer value, the maximum size of a regular file allowed in the specified directory.",147,N],[13,"LINK_MAX","","Maximum number of links to a single file.",147,N],[13,"MAX_CANON","","Maximum number of bytes in a terminal canonical input line.",147,N],[13,"MAX_INPUT","","Minimum number of bytes for which space is available in a terminal input queue; therefore, the maximum number of bytes a conforming application may require to be typed as input before reading them.",147,N],[13,"NAME_MAX","","Maximum number of bytes in a filename (not including the terminating null of a filename string).",147,N],[13,"PATH_MAX","","Maximum number of bytes the implementation will store as a pathname in a user-supplied buffer of unspecified size, including the terminating null character. Minimum number the implementation will accept as the maximum number of bytes in a pathname.",147,N],[13,"PIPE_BUF","","Maximum number of bytes that is guaranteed to be atomic when writing to a pipe.",147,N],[13,"POSIX2_SYMLINKS","","Symbolic links can be created.",147,N],[13,"POSIX_ALLOC_SIZE_MIN","","Minimum number of bytes of storage actually allocated for any portion of a file.",147,N],[13,"POSIX_REC_INCR_XFER_SIZE","","Recommended increment for file transfer sizes between the `POSIX_REC_MIN_XFER_SIZE` and `POSIX_REC_MAX_XFER_SIZE` values.",147,N],[13,"POSIX_REC_MAX_XFER_SIZE","","Maximum recommended file transfer size.",147,N],[13,"POSIX_REC_MIN_XFER_SIZE","","Minimum recommended file transfer size.",147,N],[13,"POSIX_REC_XFER_ALIGN","","Recommended file transfer buffer alignment.",147,N],[13,"SYMLINK_MAX","","Maximum number of bytes in a symbolic link.",147,N],[13,"_POSIX_CHOWN_RESTRICTED","","The use of `chown` and `fchown` is restricted to a process with appropriate privileges, and to changing the group ID of a file only to the effective group ID of the process or to one of its supplementary group IDs.",147,N],[13,"_POSIX_NO_TRUNC","","Pathname components longer than {NAME_MAX} generate an error.",147,N],[13,"_POSIX_VDISABLE","","This symbol shall be defined to be the value of a character that shall disable terminal special character handling.",147,N],[13,"_POSIX_ASYNC_IO","","Asynchronous input or output operations may be performed for the associated file.",147,N],[13,"_POSIX_PRIO_IO","","Prioritized input or output operations may be performed for the associated file.",147,N],[13,"_POSIX_SYNC_IO","","Synchronized input or output operations may be performed for the associated file.",147,N],[4,"SysconfVar","","Variable names for `sysconf`",N,N],[13,"AIO_LISTIO_MAX","","Maximum number of I/O operations in a single list I/O call supported by the implementation.",148,N],[13,"AIO_MAX","","Maximum number of outstanding asynchronous I/O operations supported by the implementation.",148,N],[13,"AIO_PRIO_DELTA_MAX","","The maximum amount by which a process can decrease its asynchronous I/O priority level from its own scheduling priority.",148,N],[13,"ARG_MAX","","Maximum length of argument to the exec functions including environment data.",148,N],[13,"ATEXIT_MAX","","Maximum number of functions that may be registered with `atexit`.",148,N],[13,"BC_BASE_MAX","","Maximum obase values allowed by the bc utility.",148,N],[13,"BC_DIM_MAX","","Maximum number of elements permitted in an array by the bc utility.",148,N],[13,"BC_SCALE_MAX","","Maximum scale value allowed by the bc utility.",148,N],[13,"BC_STRING_MAX","","Maximum length of a string constant accepted by the bc utility.",148,N],[13,"CHILD_MAX","","Maximum number of simultaneous processes per real user ID.",148,N],[13,"COLL_WEIGHTS_MAX","","Maximum number of weights that can be assigned to an entry of the LC_COLLATE order keyword in the locale definition file",148,N],[13,"DELAYTIMER_MAX","","Maximum number of timer expiration overruns.",148,N],[13,"EXPR_NEST_MAX","","Maximum number of expressions that can be nested within parentheses by the expr utility.",148,N],[13,"HOST_NAME_MAX","","Maximum length of a host name (not including the terminating null) as returned from the `gethostname` function",148,N],[13,"IOV_MAX","","Maximum number of iovec structures that one process has available for use with `readv` or `writev`.",148,N],[13,"LINE_MAX","","Unless otherwise noted, the maximum length, in bytes, of a utility's input line (either standard input or another file), when the utility is described as processing text files. The length includes room for the trailing .",148,N],[13,"LOGIN_NAME_MAX","","Maximum length of a login name.",148,N],[13,"NGROUPS_MAX","","Maximum number of simultaneous supplementary group IDs per process.",148,N],[13,"GETGR_R_SIZE_MAX","","Initial size of `getgrgid_r` and `getgrnam_r` data buffers",148,N],[13,"GETPW_R_SIZE_MAX","","Initial size of `getpwuid_r` and `getpwnam_r` data buffers",148,N],[13,"MQ_OPEN_MAX","","The maximum number of open message queue descriptors a process may hold.",148,N],[13,"MQ_PRIO_MAX","","The maximum number of message priorities supported by the implementation.",148,N],[13,"OPEN_MAX","","A value one greater than the maximum value that the system may assign to a newly-created file descriptor.",148,N],[13,"_POSIX_ADVISORY_INFO","","The implementation supports the Advisory Information option.",148,N],[13,"_POSIX_BARRIERS","","The implementation supports barriers.",148,N],[13,"_POSIX_ASYNCHRONOUS_IO","","The implementation supports asynchronous input and output.",148,N],[13,"_POSIX_CLOCK_SELECTION","","The implementation supports clock selection.",148,N],[13,"_POSIX_CPUTIME","","The implementation supports the Process CPU-Time Clocks option.",148,N],[13,"_POSIX_FSYNC","","The implementation supports the File Synchronization option.",148,N],[13,"_POSIX_IPV6","","The implementation supports the IPv6 option.",148,N],[13,"_POSIX_JOB_CONTROL","","The implementation supports job control.",148,N],[13,"_POSIX_MAPPED_FILES","","The implementation supports memory mapped Files.",148,N],[13,"_POSIX_MEMLOCK","","The implementation supports the Process Memory Locking option.",148,N],[13,"_POSIX_MEMLOCK_RANGE","","The implementation supports the Range Memory Locking option.",148,N],[13,"_POSIX_MEMORY_PROTECTION","","The implementation supports memory protection.",148,N],[13,"_POSIX_MESSAGE_PASSING","","The implementation supports the Message Passing option.",148,N],[13,"_POSIX_MONOTONIC_CLOCK","","The implementation supports the Monotonic Clock option.",148,N],[13,"_POSIX_PRIORITIZED_IO","","The implementation supports the Prioritized Input and Output option.",148,N],[13,"_POSIX_PRIORITY_SCHEDULING","","The implementation supports the Process Scheduling option.",148,N],[13,"_POSIX_RAW_SOCKETS","","The implementation supports the Raw Sockets option.",148,N],[13,"_POSIX_READER_WRITER_LOCKS","","The implementation supports read-write locks.",148,N],[13,"_POSIX_REALTIME_SIGNALS","","The implementation supports realtime signals.",148,N],[13,"_POSIX_REGEXP","","The implementation supports the Regular Expression Handling option.",148,N],[13,"_POSIX_SAVED_IDS","","Each process has a saved set-user-ID and a saved set-group-ID.",148,N],[13,"_POSIX_SEMAPHORES","","The implementation supports semaphores.",148,N],[13,"_POSIX_SHARED_MEMORY_OBJECTS","","The implementation supports the Shared Memory Objects option.",148,N],[13,"_POSIX_SHELL","","The implementation supports the POSIX shell.",148,N],[13,"_POSIX_SPAWN","","The implementation supports the Spawn option.",148,N],[13,"_POSIX_SPIN_LOCKS","","The implementation supports spin locks.",148,N],[13,"_POSIX_SPORADIC_SERVER","","The implementation supports the Process Sporadic Server option.",148,N],[13,"_POSIX_SS_REPL_MAX","","",148,N],[13,"_POSIX_SYNCHRONIZED_IO","","The implementation supports the Synchronized Input and Output option.",148,N],[13,"_POSIX_THREAD_ATTR_STACKADDR","","The implementation supports the Thread Stack Address Attribute option.",148,N],[13,"_POSIX_THREAD_ATTR_STACKSIZE","","The implementation supports the Thread Stack Size Attribute option.",148,N],[13,"_POSIX_THREAD_CPUTIME","","The implementation supports the Thread CPU-Time Clocks option.",148,N],[13,"_POSIX_THREAD_PRIO_INHERIT","","The implementation supports the Non-Robust Mutex Priority Inheritance option.",148,N],[13,"_POSIX_THREAD_PRIO_PROTECT","","The implementation supports the Non-Robust Mutex Priority Protection option.",148,N],[13,"_POSIX_THREAD_PRIORITY_SCHEDULING","","The implementation supports the Thread Execution Scheduling option.",148,N],[13,"_POSIX_THREAD_PROCESS_SHARED","","The implementation supports the Thread Process-Shared Synchronization option.",148,N],[13,"_POSIX_THREAD_ROBUST_PRIO_INHERIT","","The implementation supports the Robust Mutex Priority Inheritance option.",148,N],[13,"_POSIX_THREAD_ROBUST_PRIO_PROTECT","","The implementation supports the Robust Mutex Priority Protection option.",148,N],[13,"_POSIX_THREAD_SAFE_FUNCTIONS","","The implementation supports thread-safe functions.",148,N],[13,"_POSIX_THREAD_SPORADIC_SERVER","","The implementation supports the Thread Sporadic Server option.",148,N],[13,"_POSIX_THREADS","","The implementation supports threads.",148,N],[13,"_POSIX_TIMEOUTS","","The implementation supports timeouts.",148,N],[13,"_POSIX_TIMERS","","The implementation supports timers.",148,N],[13,"_POSIX_TRACE","","The implementation supports the Trace option.",148,N],[13,"_POSIX_TRACE_EVENT_FILTER","","The implementation supports the Trace Event Filter option.",148,N],[13,"_POSIX_TRACE_EVENT_NAME_MAX","","",148,N],[13,"_POSIX_TRACE_INHERIT","","The implementation supports the Trace Inherit option.",148,N],[13,"_POSIX_TRACE_LOG","","The implementation supports the Trace Log option.",148,N],[13,"_POSIX_TRACE_NAME_MAX","","",148,N],[13,"_POSIX_TRACE_SYS_MAX","","",148,N],[13,"_POSIX_TRACE_USER_EVENT_MAX","","",148,N],[13,"_POSIX_TYPED_MEMORY_OBJECTS","","The implementation supports the Typed Memory Objects option.",148,N],[13,"_POSIX_VERSION","","Integer value indicating version of this standard (C-language binding) to which the implementation conforms. For implementations conforming to POSIX.1-2008, the value shall be 200809L.",148,N],[13,"_POSIX_V6_ILP32_OFF32","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, `pointer`, and `off_t` types.",148,N],[13,"_POSIX_V6_ILP32_OFFBIG","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, and pointer types and an `off_t` type using at least 64 bits.",148,N],[13,"_POSIX_V6_LP64_OFF64","","The implementation provides a C-language compilation environment with 32-bit `int` and 64-bit `long`, `pointer`, and `off_t` types.",148,N],[13,"_POSIX_V6_LPBIG_OFFBIG","","The implementation provides a C-language compilation environment with an `int` type using at least 32 bits and `long`, pointer, and `off_t` types using at least 64 bits.",148,N],[13,"_POSIX2_C_BIND","","The implementation supports the C-Language Binding option.",148,N],[13,"_POSIX2_C_DEV","","The implementation supports the C-Language Development Utilities option.",148,N],[13,"_POSIX2_CHAR_TERM","","The implementation supports the Terminal Characteristics option.",148,N],[13,"_POSIX2_FORT_DEV","","The implementation supports the FORTRAN Development Utilities option.",148,N],[13,"_POSIX2_FORT_RUN","","The implementation supports the FORTRAN Runtime Utilities option.",148,N],[13,"_POSIX2_LOCALEDEF","","The implementation supports the creation of locales by the localedef utility.",148,N],[13,"_POSIX2_PBS","","The implementation supports the Batch Environment Services and Utilities option.",148,N],[13,"_POSIX2_PBS_ACCOUNTING","","The implementation supports the Batch Accounting option.",148,N],[13,"_POSIX2_PBS_CHECKPOINT","","The implementation supports the Batch Checkpoint/Restart option.",148,N],[13,"_POSIX2_PBS_LOCATE","","The implementation supports the Locate Batch Job Request option.",148,N],[13,"_POSIX2_PBS_MESSAGE","","The implementation supports the Batch Job Message Request option.",148,N],[13,"_POSIX2_PBS_TRACK","","The implementation supports the Track Batch Job Request option.",148,N],[13,"_POSIX2_SW_DEV","","The implementation supports the Software Development Utilities option.",148,N],[13,"_POSIX2_UPE","","The implementation supports the User Portability Utilities option.",148,N],[13,"_POSIX2_VERSION","","Integer value indicating version of the Shell and Utilities volume of POSIX.1 to which the implementation conforms.",148,N],[13,"PAGE_SIZE","","The size of a system page in bytes.",148,N],[13,"PTHREAD_DESTRUCTOR_ITERATIONS","","",148,N],[13,"PTHREAD_KEYS_MAX","","",148,N],[13,"PTHREAD_STACK_MIN","","",148,N],[13,"PTHREAD_THREADS_MAX","","",148,N],[13,"RE_DUP_MAX","","",148,N],[13,"RTSIG_MAX","","",148,N],[13,"SEM_NSEMS_MAX","","",148,N],[13,"SEM_VALUE_MAX","","",148,N],[13,"SIGQUEUE_MAX","","",148,N],[13,"STREAM_MAX","","",148,N],[13,"SYMLOOP_MAX","","",148,N],[13,"TIMER_MAX","","",148,N],[13,"TTY_NAME_MAX","","",148,N],[13,"TZNAME_MAX","","",148,N],[13,"_XOPEN_CRYPT","","The implementation supports the X/Open Encryption Option Group.",148,N],[13,"_XOPEN_ENH_I18N","","The implementation supports the Issue 4, Version 2 Enhanced Internationalization Option Group.",148,N],[13,"_XOPEN_LEGACY","","",148,N],[13,"_XOPEN_REALTIME","","The implementation supports the X/Open Realtime Option Group.",148,N],[13,"_XOPEN_REALTIME_THREADS","","The implementation supports the X/Open Realtime Threads Option Group.",148,N],[13,"_XOPEN_SHM","","The implementation supports the Issue 4, Version 2 Shared Memory Option Group.",148,N],[13,"_XOPEN_STREAMS","","The implementation supports the XSI STREAMS Option Group.",148,N],[13,"_XOPEN_UNIX","","The implementation supports the XSI option",148,N],[13,"_XOPEN_VERSION","","Integer value indicating version of the X/Open Portability Guide to which the implementation conforms.",148,N],[5,"pivot_root","","",N,[[["p1"],["p2"]],["result"]]],[5,"setresuid","","Sets the real, effective, and saved uid. (see setresuid(2))",N,[[["uid"],["uid"],["uid"]],["result"]]],[5,"setresgid","","Sets the real, effective, and saved gid. (see setresuid(2))",N,[[["gid"],["gid"],["gid"]],["result"]]],[5,"fork","","Create a new child process duplicating the parent process (see fork(2)).",N,[[],["result",["forkresult"]]]],[5,"getpid","","Get the pid of this process (see getpid(2)).",N,[[],["pid"]]],[5,"getppid","","Get the pid of this processes' parent (see getpid(2)).",N,[[],["pid"]]],[5,"setpgid","","Set a process group ID (see setpgid(2)).",N,[[["pid"],["pid"]],["result"]]],[5,"getpgid","","",N,[[["option",["pid"]]],["result",["pid"]]]],[5,"setsid","","Create new session and set process group id (see setsid(2)).",N,[[],["result",["pid"]]]],[5,"tcgetpgrp","","Get the terminal foreground process group (see tcgetpgrp(3)).",N,[[["c_int"]],["result",["pid"]]]],[5,"tcsetpgrp","","Set the terminal foreground process group (see tcgetpgrp(3)).",N,[[["c_int"],["pid"]],["result"]]],[5,"getpgrp","","Get the group id of the calling process (see getpgrp(3)).",N,[[],["pid"]]],[5,"gettid","","Get the caller's thread ID (see gettid(2).",N,[[],["pid"]]],[5,"dup","","Create a copy of the specified file descriptor (see dup(2)).",N,[[["rawfd"]],["result",["rawfd"]]]],[5,"dup2","","Create a copy of the specified file descriptor using the specified fd (see dup(2)).",N,[[["rawfd"],["rawfd"]],["result",["rawfd"]]]],[5,"dup3","","Create a new copy of the specified file descriptor using the specified fd and flags (see dup(2)).",N,[[["rawfd"],["rawfd"],["oflag"]],["result",["rawfd"]]]],[5,"chdir","","Change the current working directory of the calling process (see chdir(2)).",N,[[["p"]],["result"]]],[5,"fchdir","","Change the current working directory of the process to the one given as an open file descriptor (see fchdir(2)).",N,[[["rawfd"]],["result"]]],[5,"mkdir","","Creates new directory `path` with access rights `mode`.  (see mkdir(2))",N,[[["p"],["mode"]],["result"]]],[5,"mkfifo","","Creates new fifo special file (named pipe) with path `path` and access rights `mode`.",N,[[["p"],["mode"]],["result"]]],[5,"getcwd","","Returns the current directory as a `PathBuf`",N,[[],["result",["pathbuf"]]]],[5,"chown","","Change the ownership of the file at `path` to be owned by the specified `owner` (user) and `group` (see chown(2)).",N,[[["p"],["option",["uid"]],["option",["gid"]]],["result"]]],[5,"execv","","Replace the current process image with a new one (see exec(3)).",N,N],[5,"execve","","Replace the current process image with a new one (see execve(2)).",N,N],[5,"execvp","","Replace the current process image with a new one and replicate shell `PATH` searching behavior (see exec(3)).",N,N],[5,"fexecve","","Replace the current process image with a new one (see fexecve(2)).",N,N],[5,"execveat","","Execute program relative to a directory file descriptor (see execveat(2)).",N,N],[5,"daemon","","Daemonize this process by detaching from the controlling terminal (see daemon(3)).",N,[[["bool"],["bool"]],["result"]]],[5,"sethostname","","Set the system host name (see sethostname(2)).",N,[[["s"]],["result"]]],[5,"gethostname","","Get the host name and store it in the provided buffer, returning a pointer the `CStr` in that buffer on success (see gethostname(2)).",N,N],[5,"close","","Close a raw file descriptor",N,[[["rawfd"]],["result"]]],[5,"read","","Read from a raw file descriptor.",N,N],[5,"write","","Write to a raw file descriptor.",N,N],[5,"lseek","","Move the read/write file offset.",N,[[["rawfd"],["off_t"],["whence"]],["result",["off_t"]]]],[5,"lseek64","","",N,[[["rawfd"],["off64_t"],["whence"]],["result",["off64_t"]]]],[5,"pipe","","Create an interprocess channel.",N,[[],["result"]]],[5,"pipe2","","Like `pipe`, but allows setting certain file descriptor flags.",N,[[["oflag"]],["result"]]],[5,"ftruncate","","Truncate a file to a specified length",N,[[["rawfd"],["off_t"]],["result"]]],[5,"isatty","","",N,[[["rawfd"]],["result",["bool"]]]],[5,"unlink","","Remove a directory entry",N,[[["p"]],["result"]]],[5,"chroot","","",N,[[["p"]],["result"]]],[5,"fsync","","Synchronize changes to a file",N,[[["rawfd"]],["result"]]],[5,"fdatasync","","Synchronize the data of a file",N,[[["rawfd"]],["result"]]],[5,"getuid","","Get a real user ID",N,[[],["uid"]]],[5,"geteuid","","Get the effective user ID",N,[[],["uid"]]],[5,"getgid","","Get the real group ID",N,[[],["gid"]]],[5,"getegid","","Get the effective group ID",N,[[],["gid"]]],[5,"setuid","","Set the user ID",N,[[["uid"]],["result"]]],[5,"setgid","","Set the user ID",N,[[["gid"]],["result"]]],[5,"getgroups","","Get the list of supplementary group IDs of the calling process.",N,[[],["result",["vec"]]]],[5,"setgroups","","Set the list of supplementary group IDs for the calling process.",N,N],[5,"getgrouplist","","Calculate the supplementary group access list.",N,[[["cstr"],["gid"]],["result",["vec"]]]],[5,"initgroups","","Initialize the supplementary group access list.",N,[[["cstr"],["gid"]],["result"]]],[5,"pause","","Suspend the thread until a signal is received.",N,[[]]],[5,"sleep","","Suspend execution for an interval of time",N,[[["c_uint"]],["c_uint"]]],[5,"mkstemp","","Creates a regular file which persists even after process termination",N,[[["p"]],["result"]]],[5,"fpathconf","","Like `pathconf`, but works with file descriptors instead of paths (see fpathconf(2))",N,[[["rawfd"],["pathconfvar"]],["result",["option"]]]],[5,"pathconf","","Get path-dependent configurable system variables (see pathconf(2))",N,[[["p"],["pathconfvar"]],["result",["option"]]]],[5,"sysconf","","Get configurable system variables (see sysconf(3))",N,[[["sysconfvar"]],["result",["option"]]]],[17,"ROOT","","Constant for UID = 0",N,N],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"clone","","",149,[[["self"]],["uid"]]],[11,"eq","","",149,[[["self"],["uid"]],["bool"]]],[11,"ne","","",149,[[["self"],["uid"]],["bool"]]],[11,"hash","","",149,N],[11,"from_raw","","Creates `Uid` from raw `uid_t`.",149,[[["uid_t"]],["self"]]],[11,"current","","Returns Uid of calling process. This is practically a more Rusty alias for `getuid`.",149,[[],["self"]]],[11,"effective","","Returns effective Uid of calling process. This is practically a more Rusty alias for `geteuid`.",149,[[],["self"]]],[11,"is_root","","Returns true if the `Uid` represents privileged user - root. (If it equals zero.)",149,[[["self"]],["bool"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"clone","","",150,[[["self"]],["gid"]]],[11,"eq","","",150,[[["self"],["gid"]],["bool"]]],[11,"ne","","",150,[[["self"],["gid"]],["bool"]]],[11,"hash","","",150,N],[11,"from_raw","","Creates `Gid` from raw `gid_t`.",150,[[["gid_t"]],["self"]]],[11,"current","","Returns Gid of calling process. This is practically a more Rusty alias for `getgid`.",150,[[],["self"]]],[11,"effective","","Returns effective Gid of calling process. This is practically a more Rusty alias for `getgid`.",150,[[],["self"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"clone","","",151,[[["self"]],["pid"]]],[11,"eq","","",151,[[["self"],["pid"]],["bool"]]],[11,"ne","","",151,[[["self"],["pid"]],["bool"]]],[11,"hash","","",151,N],[11,"from_raw","","Creates `Pid` from raw `pid_t`.",151,[[["pid_t"]],["self"]]],[11,"this","","Returns PID of calling process",151,[[],["self"]]],[11,"parent","","Returns PID of parent of calling process",151,[[],["self"]]],[11,"from","","",152,[[["pid"]],["self"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"clone","","",145,[[["self"]],["forkresult"]]],[11,"is_child","","Return `true` if this is the child process of the `fork()`",145,[[["self"]],["bool"]]],[11,"is_parent","","Returns `true` if this is the parent process of the `fork()`",145,[[["self"]],["bool"]]],[11,"clone","","",147,[[["self"]],["pathconfvar"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"hash","","",147,N],[11,"eq","","",147,[[["self"],["pathconfvar"]],["bool"]]],[11,"clone","","",148,[[["self"]],["sysconfvar"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"hash","","",148,N],[11,"eq","","",148,[[["self"],["sysconfvar"]],["bool"]]],[6,"Result","nix","Nix Result Type",N,N],[8,"NixPath","","",N,N],[10,"len","","",153,[[["self"]],["usize"]]],[10,"with_nix_path","","",153,[[["self"],["f"]],["result"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from_errno","","Create a nix Error from a given errno",0,[[["errno"]],["error"]]],[11,"last","","Get the current errno and convert it to a nix Error",0,[[],["error"]]],[11,"invalid_argument","","Create a new invalid argument error (`EINVAL`)",0,[[],["error"]]],[11,"from","","",0,[[["errno"]],["error"]]],[11,"from","","",0,[[["fromutf8error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"ioctl","","Generates ioctl functions. See `::sys::ioctl`.",N,N],[11,"clone","nix::sys::socket","",52,[[["self"]],["sockaddr"]]],[11,"clone","","",50,[[["self"]],["cmsghdr"]]],[11,"clone","","",55,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",56,[[["self"]],["sockaddr_un"]]],[11,"clone","","",53,[[["self"]],["sockaddr_in"]]],[11,"clone","","",51,[[["self"]],["msghdr"]]],[11,"clone","nix::sys::stat","",108,[[["self"]],["stat"]]],[11,"clone","nix::sys::socket","",54,[[["self"]],["sockaddr_in6"]]],[11,"clone","nix::pty","",16,[[["self"]],["winsize"]]],[11,"clone","nix::sys::signalfd","",47,[[["self"]],["signalfd_siginfo"]]]],"paths":[[4,"Error"],[4,"Errno"],[8,"ErrnoSentinel"],[4,"FcntlArg"],[4,"FlockArg"],[3,"AtFlags"],[3,"OFlag"],[3,"SealFlag"],[3,"FdFlag"],[3,"SpliceFFlags"],[3,"FallocateFlags"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"Winsize"],[3,"OpenptyResult"],[3,"PtyMaster"],[3,"PollFd"],[3,"EventFlags"],[3,"InterfaceFlags"],[3,"InterfaceAddress"],[3,"InterfaceAddressIterator"],[3,"CloneFlags"],[3,"CpuSet"],[4,"AioFsyncMode"],[4,"LioOpcode"],[4,"LioMode"],[4,"AioCancelStat"],[4,"Buffer"],[3,"AioCb"],[4,"EpollOp"],[3,"EpollFlags"],[3,"EpollCreateFlags"],[3,"EpollEvent"],[3,"EfdFlags"],[3,"MemFdCreateFlag"],[4,"Signal"],[4,"SigmaskHow"],[4,"SigHandler"],[4,"SigevNotify"],[3,"SigEvent"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigSet"],[3,"SigAction"],[3,"siginfo"],[3,"SfdFlags"],[3,"SignalFd"],[3,"cmsghdr"],[3,"msghdr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_storage"],[3,"sockaddr_un"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"LinkAddr"],[3,"NetlinkAddr"],[3,"RecvMsg"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockProtocol"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"OriginalDst"],[3,"ReceiveTimestamp"],[3,"IpTransparent"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"MsgFlags"],[3,"UnixCredentials"],[3,"IpMembershipRequest"],[3,"Ipv6MembershipRequest"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[4,"RebootMode"],[3,"Termios"],[4,"BaudRate"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[4,"SpecialCharacterIndices"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[4,"MmapAdvise"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MsFlags"],[3,"RemoteIoVec"],[3,"IoVec"],[8,"TimeValLike"],[3,"TimeSpec"],[3,"TimeVal"],[4,"Request"],[4,"Event"],[3,"Options"],[3,"FdSet"],[4,"QuotaType"],[4,"QuotaFmt"],[3,"QuotaValidFlags"],[3,"Dqblk"],[3,"FsFlags"],[3,"Statvfs"],[3,"UContext"],[4,"ForkResult"],[4,"Whence"],[4,"PathconfVar"],[4,"SysconfVar"],[3,"Uid"],[3,"Gid"],[3,"Pid"],[6,"SessionId"],[8,"NixPath"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer -- see Roots::sqrt.",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer -- see Roots::cbrt.",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer -- see Roots::nth_root.",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube root, and arbitrary `n`th root.",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,N],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",2,[[["t"]],["iterbinomial"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer -- `⌊√x⌋`",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer -- `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"fmt","num_traits","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordered_float"]={"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[12,"0","","",0,N],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",N,N],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["orderedfloat"]]],[11,"clone","","",0,[[["self"]],["orderedfloat"]]],[11,"into_inner","","Get the value out.",0,[[["self"]],["t"]]],[11,"as_ref","","",0,[[["self"]],["t"]]],[11,"as_mut","","",0,[[["self"]],["t"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["orderedfloat"]],["bool"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"into","","",0,[[["self"]],["f32"]]],[11,"into","","",0,[[["self"]],["f64"]]],[11,"from","","",0,[[["t"]],["self"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"partial_cmp","","",1,[[["self"],["notnan"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"le","","",1,[[["self"],["notnan"]],["bool"]]],[11,"gt","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ge","","",1,[[["self"],["notnan"]],["bool"]]],[11,"eq","","",1,[[["self"],["notnan"]],["bool"]]],[11,"ne","","",1,[[["self"],["notnan"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["notnan"]]],[11,"clone","","",1,[[["self"]],["notnan"]]],[11,"new","","Create a NotNaN value.",1,[[["t"]],["result",["floatisnan"]]]],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,[[["t"]],["self"]]],[11,"into_inner","","Get the value out.",1,[[["self"]],["t"]]],[11,"as_ref","","",1,[[["self"]],["t"]]],[11,"cmp","","",1,[[["self"],["notnan"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"into","","",1,[[["self"]],["f32"]]],[11,"into","","",1,[[["self"]],["f64"]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"deref","","",1,N],[11,"add","","",1,[[["self"],["self"]],["self"]]],[11,"add","","",1,[[["self"],["t"]],["self"]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["self"]]]],[11,"add_assign","","",1,[[["self"],["f64"]]]],[11,"add_assign","","",1,[[["self"],["f32"]]]],[11,"sub","","",1,[[["self"],["self"]],["self"]]],[11,"sub","","",1,[[["self"],["t"]],["self"]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["f64"]]]],[11,"sub_assign","","",1,[[["self"],["f32"]]]],[11,"mul","","",1,[[["self"],["self"]],["self"]]],[11,"mul","","",1,[[["self"],["t"]],["self"]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["f64"]]]],[11,"mul_assign","","",1,[[["self"],["f32"]]]],[11,"div","","",1,[[["self"],["self"]],["self"]]],[11,"div","","",1,[[["self"],["t"]],["self"]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["self"]]]],[11,"div_assign","","",1,[[["self"],["f64"]]]],[11,"div_assign","","",1,[[["self"],["f32"]]]],[11,"rem","","",1,[[["self"],["self"]],["self"]]],[11,"rem","","",1,[[["self"],["t"]],["self"]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["f64"]]]],[11,"rem_assign","","",1,[[["self"],["f32"]]]],[11,"neg","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["floatisnan"]]],[11,"eq","","",2,[[["self"],["floatisnan"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"into","","",2,[[["self"]],["error"]]]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["os_balloon"]={"doc":"OpenStratos balloon software.","items":[[5,"run","os_balloon","The main logic of the program.",N,[[],["result",["error"]]]],[5,"initialize_data_filesystem","","Initializes the data file system for videos and images.",N,[[],["result",["error"]]]],[5,"generate_error_string","","Generates a stack trace string of an error.",N,[[["error"],["s"]],["string"]]],[5,"init_loggers","","Initializes all loggers.",N,[[],["result",["handle","error"]]]],[0,"config","","Configuration module.",N,N],[3,"CONFIG","os_balloon::config","Configuration object.",N,N],[3,"Config","","Configuration object.",N,N],[3,"Flight","","Flight configuration structure.",N,N],[3,"Battery","","Battery configuration structure.",N,N],[3,"Video","","Video configuration structure.",N,N],[3,"Picture","","Picture configuration structure.",N,N],[3,"Gps","","GPS configuration structure.",N,N],[3,"Fona","","Fona configuration structure",N,N],[3,"PhoneNumber","","Phone number representation.",N,N],[3,"Telemetry","","Telemetry configuration structure.",N,N],[4,"Exposure","","Exposure setting.",N,N],[13,"Off","","Turns off exposure control.",0,N],[13,"Auto","","Use automatic exposure mode.",0,N],[13,"Night","","Select setting for night shooting.",0,N],[13,"NightPreview","","Night preview mode.",0,N],[13,"BackLight","","Select setting for back-lit subject.",0,N],[13,"SpotLight","","Spot light mode.",0,N],[13,"Sports","","Select setting for sports (fast shutter etc.).",0,N],[13,"Snow","","Select setting optimized for snowy scenery.",0,N],[13,"Beach","","Select setting optimized for beach.",0,N],[13,"VeryLong","","Select setting for long exposures.",0,N],[13,"FixedFps","","Constrain fps to a fixed value.",0,N],[13,"AntiShake","","Antishake mode.",0,N],[13,"Fireworks","","Select setting optimized for fireworks.",0,N],[4,"WhiteBalance","","Exposure setting.",N,N],[13,"Off","","Turn off white balance calculation.",1,N],[13,"Auto","","Automatic mode (default).",1,N],[13,"Sun","","Sunny mode.",1,N],[13,"CloudShade","","Cloudy mode.",1,N],[13,"Tungsten","","Tungsten lighting mode.",1,N],[13,"Fluorescent","","Fluorescent lighting mode.",1,N],[13,"Incandescent","","Incandescent lighting mode.",1,N],[13,"Flash","","Flash mode.",1,N],[13,"Horizon","","Horizon mode.",1,N],[11,"deref","","",2,[[["self"]],["config"]]],[11,"initialize","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"debug","","Gets wether OpenStratos should run in debug mode.",3,[[["self"]],["bool"]]],[11,"flight","","Gets the flight information.",3,[[["self"]],["flight"]]],[11,"battery","","Gets battery configuration",3,[[["self"]],["battery"]]],[11,"video","","Gets the configuration for video.",3,[[["self"]],["video"]]],[11,"picture","","Gets the configuration for pictures.",3,[[["self"]],["picture"]]],[11,"gps","","Gets the GPS configuration.",3,[[["self"]],["gps"]]],[11,"fona","","Gets the FONA module configuration.",3,[[["self"]],["fona"]]],[11,"telemetry","","Gets the telemetry configuration.",3,[[["self"]],["telemetry"]]],[11,"data_dir","","Gets the configured data directory.",3,[[["self"]],["path"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["flight"]]],[11,"length","","Gets the approximate expected flight length, in minutes.",4,[[["self"]],["u32"]]],[11,"expected_max_height","","Gets the approximate expected maximum height, in meters.",4,[[["self"]],["u32"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["battery"]]],[11,"main_min","","Gets the minimum voltage for the main battery when empty, at 0%, in volts (`V`).",5,[[["self"]],["f32"]]],[11,"main_max","","Gets the maximum voltage for the main battery when full, at 100%, in volts (`V`).",5,[[["self"]],["f32"]]],[11,"fona_min","","Gets the minimum voltage for the FONA battery when empty, at 0%, in volts (`V`).",5,[[["self"]],["f32"]]],[11,"fona_max","","Gets the maximum voltage for the FONA battery when full, at 0%, in volts (`V`).",5,[[["self"]],["f32"]]],[11,"main_min_percent","","Gets the minimum admisible percentage for main battery for the launch.",5,[[["self"]],["f32"]]],[11,"fona_min_percent","","Gets the minimum admisible percentage for FONA battery for the launch.",5,[[["self"]],["f32"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["video"]]],[11,"height","","Gets the configured video height for the camera, in pixels.",6,[[["self"]],["u16"]]],[11,"width","","Gets the configured video width for the camera, in pixels.",6,[[["self"]],["u16"]]],[11,"rotation","","Gets the configured picture rotation for the camera, in degrees (°).",6,[[["self"]],["option",["u16"]]]],[11,"fps","","Gets the configured video framerate for the camera, in frames per second.",6,[[["self"]],["u8"]]],[11,"bitrate","","Gets the configured bitrate for videos.",6,[[["self"]],["u32"]]],[11,"exposure","","Gets the configured exposure for videos.",6,[[["self"]],["option",["exposure"]]]],[11,"brightness","","Gets the configured brightness for videos.",6,[[["self"]],["option",["u8"]]]],[11,"contrast","","Gets the configured contrast for videos.",6,[[["self"]],["option",["i8"]]]],[11,"sharpness","","Gets the configured sharpness for videos.",6,[[["self"]],["option",["i8"]]]],[11,"saturation","","Gets the configured saturation for videos.",6,[[["self"]],["option",["i8"]]]],[11,"iso","","Gets the configured ISO for videos.",6,[[["self"]],["option",["u16"]]]],[11,"stabilization","","Gets if video stabilization needs to be turned on.",6,[[["self"]],["bool"]]],[11,"ev","","Gets the configured EV compensation for videos.",6,[[["self"]],["option",["i8"]]]],[11,"white_balance","","Gets the configured automatic white balance for videos.",6,[[["self"]],["option",["whitebalance"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["picture"]]],[11,"height","","Gets the configured picture height for the camera, in pixels.",7,[[["self"]],["u16"]]],[11,"width","","Gets the configured picture width for the camera, in pixels.",7,[[["self"]],["u16"]]],[11,"rotation","","Gets the configured picture rotation for the camera, in degrees (°).",7,[[["self"]],["option",["u16"]]]],[11,"quality","","Gets the configured picture quality for the camera.",7,[[["self"]],["u8"]]],[11,"exif","","Gets wether the camera should add available EXIF information to pictures.",7,[[["self"]],["bool"]]],[11,"raw","","Gets wether the camera should add raw sensor data to pictures as JPEG metadata.",7,[[["self"]],["bool"]]],[11,"exposure","","Gets the configured exposure for pictures.",7,[[["self"]],["option",["exposure"]]]],[11,"brightness","","Gets the configured brightness for pictures.",7,[[["self"]],["option",["u8"]]]],[11,"contrast","","Gets the configured contrast for pictures.",7,[[["self"]],["option",["i8"]]]],[11,"sharpness","","Gets the configured sharpness for pictures.",7,[[["self"]],["option",["i8"]]]],[11,"saturation","","Gets the configured saturation for pictures.",7,[[["self"]],["option",["i8"]]]],[11,"iso","","Gets the configured ISO for pictures.",7,[[["self"]],["option",["u16"]]]],[11,"ev","","Gets the configured EV compensation for pictures.",7,[[["self"]],["option",["i8"]]]],[11,"white_balance","","Gets the configured automatic white balance for pictures.",7,[[["self"]],["option",["whitebalance"]]]],[11,"interval","","Gets the interval between pictures during flight.",7,[[["self"]],["u32"]]],[11,"repeat","","Gets the timeout for repeated picture.",7,[[["self"]],["option",["u32"]]]],[11,"first_timeout","","Gets the timeout for first picture after launch, in seconds.",7,[[["self"]],["u32"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["exposure"]]],[11,"eq","","",0,[[["self"],["exposure"]],["bool"]]],[11,"as_ref","","",0,[[["self"]],["osstr"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["whitebalance"]]],[11,"eq","","",1,[[["self"],["whitebalance"]],["bool"]]],[11,"as_ref","","",1,[[["self"]],["osstr"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"uart","","Gets the UART serial console path.",8,[[["self"]],["path"]]],[11,"baud_rate","","Gets the serial console baud rate.",8,[[["self"]],["u32"]]],[11,"power_gpio","","Gets the power GPIO pin.",8,[[["self"]],["pin"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"uart","","Gets the UART serial console path.",9,[[["self"]],["path"]]],[11,"baud_rate","","Gets the serial console baud rate.",9,[[["self"]],["u32"]]],[11,"power_gpio","","Gets the power GPIO pin.",9,[[["self"]],["pin"]]],[11,"status_gpio","","Gets the status GPIO pin.",9,[[["self"]],["pin"]]],[11,"sms_phone","","Gets the phone number for SMSs.",9,[[["self"]],["phonenumber"]]],[11,"location_service","","Gets the location service for GSM location retrieval.",9,[[["self"]],["str"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"as_str","","Gets the phone number as a string.",10,[[["self"]],["str"]]],[11,"deserialize","","",10,[[["d"]],["result",["phonenumber"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"uart","","Gets the UART serial console path.",11,[[["self"]],["path"]]],[11,"baud_rate","","Gets the serial console baud rate.",11,[[["self"]],["u32"]]],[0,"error","os_balloon","Error module.",N,N],[4,"Logic","os_balloon::error","Errors that happened in a certain part of the logic.",N,N],[13,"Init","","Initialization error.",12,N],[4,"Gps","","GPS errors.",N,N],[13,"Init","","GPS initialization error.",13,N],[13,"AlreadyInitialized","","The GPS was already initialized when trying to initialize it.",13,N],[13,"InvalidStatus","","Invalid GPS status code.",13,N],[12,"status","os_balloon::error::Gps","The invalid GPS status code that was received",13,N],[4,"Config","os_balloon::error","Configuration errors.",N,N],[13,"Open","","Error opening the configuration file.",14,N],[12,"path","os_balloon::error::Config","The path of the configuration file.",14,N],[13,"Read","os_balloon::error","Error reading the configuration file.",14,N],[12,"path","os_balloon::error::Config","The path of the configuration file.",14,N],[13,"InvalidToml","os_balloon::error","Invalid TOML found in the configuration file.",14,N],[12,"path","os_balloon::error::Config","The path of the configuration file.",14,N],[13,"Invalid","os_balloon::error","Invalid configuration options.",14,N],[12,"errors","os_balloon::error::Config","The list of errors in the configuration.",14,N],[4,"Fs","os_balloon::error","Errors dealing with the file system.",N,N],[13,"DataInit","","Error initializing the `data` filesystem.",15,N],[13,"DirectoryCreation","","Error creating a directory.",15,N],[12,"path","os_balloon::error::Fs","Path to the directory meant to be greated.",15,N],[4,"Log","os_balloon::error","Errors handling loggers and logs.",N,N],[13,"Appender","","Error creating a log appender.",16,N],[12,"name","os_balloon::error::Log","The name of the log appender.",16,N],[13,"Build","os_balloon::error","Error building the logger.",16,N],[4,"LastState","","Errors related to reading and modifying the last known state.",N,N],[13,"FileOpen","","Error opening the last state file.",17,N],[13,"FileRead","","Error reading the last state file.",17,N],[13,"FileWrite","","Error writing the last state file.",17,N],[13,"Read","","Error reading the last state.",17,N],[13,"Invalid","","Invalid last state found.",17,N],[12,"state","os_balloon::error::LastState","The invalid state found.",17,N],[4,"Fona","os_balloon::error","Errors related to the use of the Adafruit FONA module.",N,N],[13,"Init","","Error initializing the FONA module.",18,N],[13,"PowerOn","","Error turning the FONA module on.",18,N],[13,"EchoOff","","Error turning the FONA module's \"echo\" functionality off.",18,N],[13,"NoSerial","","There was no open serial connection when trying to send a command to the FONA module.",18,N],[13,"SerialEnd","","`EOF` was found in the FONA serial.",18,N],[13,"LongSms","","SMS was too long to be sent.",18,N],[13,"SmsAtCmgf","","Error sending SMS on `AT+CMGF=1` response.",18,N],[13,"SmsAtCmgs","","Error sending `AT+CMGS` message when sending an SMS.",18,N],[13,"SmsCmgs","","Error reading `+CMGS` response sending SMS.",18,N],[13,"SmsOk","","No OK received after sending SMS.",18,N],[13,"LocAtCmgf","","Error getting location on `AT+CMGF=1` response.",18,N],[13,"LocAtCgatt","","Error getting location on `AT+CGATT=1` response.",18,N],[13,"LocAtSapbr","","Error getting location on `AT+SAPBR=1,1` response.",18,N],[13,"LocAtSapbrContype","","Error getting location on `AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"` response.",18,N],[13,"LocAtSapbrApn","","Error getting location on `AT+SAPBR=3,1,\"APN\",\"{fona.location_service}\"` response.",18,N],[13,"LocAtCipgsmloc","","Error getting location on `AT+CIPGSMLOC=1,1` response.",18,N],[13,"LocAtGprsDown","","Error turning GPRS down.",18,N],[13,"LocLon","","Error getting longitude via GPRS.",18,N],[13,"LocLat","","Error getting latitude via GPRS.",18,N],[13,"SendCommandCrlf","","Error reading CRLF (\\r\\n) after sending command to FONA.",18,N],[13,"PartialResponse","","FONA serial found EOF.",18,N],[12,"response","os_balloon::error::Fona","Contents of the partial response.",18,N],[13,"Command","os_balloon::error","Error sending command to FONA.",18,N],[13,"CBCInvalidResponse","","Invalid response to AT+CBC (battery charge) command.",18,N],[13,"CADCInvalidResponse","","Invalid response to AT+CADC? (read ADC) command.",18,N],[4,"Raspicam","","Errors related to the Raspicam camera.",N,N],[13,"AlreadyRecording","","Camera was already recording.",19,N],[13,"FileExists","","Camera output file already exists.",19,N],[12,"file","os_balloon::error::Raspicam","File that wasn't supposed to exist.",19,N],[13,"Test","os_balloon::error","Camera testing error.",19,N],[13,"TestRemove","","Error removing camera test file.",19,N],[12,"test_file","os_balloon::error::Raspicam","Output file for the test.",19,N],[4,"Init","os_balloon::error","Errors related to logic initialization.",N,N],[13,"GpsInit","","Error initializing GPS module.",20,N],[13,"FonaInit","","Error initializing FONA module.",20,N],[13,"CheckGsmConnectivity","","Error checking GSM connectivity.",20,N],[13,"CheckBatteries","","Error checking battery status.",20,N],[13,"NotEnoughBattery","","Not enough battery for the flight.",20,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["logic"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["gps"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["log"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["laststate"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["init"]]],[0,"fona","os_balloon","Adafruit FONA GSM module.",N,N],[3,"FONA","os_balloon::fona","The FONA module control structure.",N,N],[3,"Fona","","Adafruit FONA control structure.",N,N],[3,"Location","","Structure representing the location of the probe as obtained by the FONA module.",N,N],[11,"deref","","",21,[[["self"]],["mutex"]]],[11,"initialize","","",21,[[["self"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"initialize","","Initializes the Adafruit FONA module.",22,[[["self"]],["result",["error"]]]],[11,"is_on","","Checks if the FONA module is on.",22,[[["self"]],["result",["bool","error"]]]],[11,"turn_on","","Turns on the FONA module.",22,[[["self"]],["result",["error"]]]],[11,"turn_off","","Tuns off the FONA module.",22,[[["self"]],["result",["error"]]]],[11,"send_sms","","Sends an SMS with the given text to the given phone number.",22,[[["self"],["m"]],["result",["error"]]]],[11,"location","","Gets the current location using GPRS.",22,[[["self"]],["result",["location","error"]]]],[11,"battery_percent","","Checks the FONA battery level, in percentage.",22,[[["self"]],["result",["f32","error"]]]],[11,"battery_voltage","","Checks the FONA battery voltage, in volts (`V`).",22,[[["self"]],["result",["f32","error"]]]],[11,"adc_voltage","","Gets the ADC (Analog-Digital converter) voltage of the FONA, in volts (`V`).",22,[[["self"]],["result",["f32","error"]]]],[11,"has_connectivity","","Checks if the FONA module has GSM connectivity.",22,[[["self"]],["result",["bool","error"]]]],[11,"drop","","",22,[[["self"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["location"]]],[11,"latitude","","Gets the latitude of the location, in degrees (°).",23,[[["self"]],["f32"]]],[11,"longitude","","Gets the longitude of the location, in degrees (°).",23,[[["self"]],["f32"]]],[0,"gps","os_balloon","GPS module.",N,N],[3,"GPS","os_balloon::gps","GPS data for concurrent check.",N,N],[3,"Gps","","GPS information structure.",N,N],[4,"FixStatus","","GPS fix status.",N,N],[13,"Active","","GPS fix active.",24,N],[13,"Void","","GPS fix not valid.",24,N],[11,"deref","","",25,[[["self"]],["mutex"]]],[11,"initialize","","",25,[[["self"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"initialize","","Initializes the GPS.",26,[[["self"]],["result",["error"]]]],[11,"fix_time","","Gets the time of the current fix.",26,[[["self"]],["datetime",["utc"]]]],[11,"status","","Gets the GPS fix status.",26,[[["self"]],["fixstatus"]]],[11,"satellites","","Gets the number of satellites connected.",26,[[["self"]],["u8"]]],[11,"latitude","","Gets the latitude of the GPS antenna, in ° (degrees).",26,[[["self"]],["f32"]]],[11,"longitude","","Gets the longitude of the GPS antenna, in ° (degrees).",26,[[["self"]],["f32"]]],[11,"altitude","","Gets the altitude of the GPS antenna from sea level, in m.",26,[[["self"]],["f32"]]],[11,"pdop","","Gets the position dilution of precision (3D).",26,[[["self"]],["f32"]]],[11,"hdop","","Gets the horizontal dilution of precision (2D).",26,[[["self"]],["f32"]]],[11,"vdop","","Gets the vertical dilution of precision (1D).",26,[[["self"]],["f32"]]],[11,"speed","","Gets the speed of the velocity vector, in m/s.",26,[[["self"]],["f32"]]],[11,"course","","Gets the course of the velocity vector, in ° (degrees).",26,[[["self"]],["f32"]]],[11,"drop","","",26,[[["self"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["fixstatus"]]],[11,"eq","","",24,[[["self"],["fixstatus"]],["bool"]]],[11,"from_str","","",24,[[["str"]],["result",["fixstatus"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[0,"logic","os_balloon","Logic module.",N,N],[3,"OpenStratos","os_balloon::logic","Main OpenStratos state machine",N,N],[3,"Init","","Initialization state.",N,N],[3,"AcquiringFix","","Acquiring fix state.",N,N],[3,"FixAcquired","","Fix acquired state.",N,N],[3,"WaitingLaunch","","Waiting launch state.",N,N],[3,"GoingUp","","Going up state.",N,N],[3,"GoingDown","","Going down state.",N,N],[3,"Landed","","Landed state.",N,N],[3,"ShutDown","","Shut down state.",N,N],[3,"SafeMode","","Safe mode state.",N,N],[4,"State","","States of the onboard computer.",N,N],[13,"Init","","Initialization.",27,N],[13,"AcquiringFix","","Acquiring GPS fix.",27,N],[13,"FixAcquired","","GPS fix has been acquired.",27,N],[13,"WaitingLaunch","","Waiting for balloon launch.",27,N],[13,"GoingUp","","Going up.",27,N],[13,"GoingDown","","Going down.",27,N],[13,"Landed","","Probe landed.",27,N],[13,"ShutDown","","Shutting computer down.",27,N],[13,"SafeMode","","Safe mode operation.",27,N],[5,"init","","Initializes a new state machine.",N,[[],["result",["openstratos","error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[11,"main_logic","","",28,[[["self"]],["result",["error"]]]],[11,"execute","","",28,[[["self"]],["result",["error"]]]],[8,"StateMachine","","Trait representing a state machine.",N,N],[16,"Next","","The logic to run after the current state.",29,N],[10,"execute","","Executes this state and returns the next one.",29,[[["self"]],["result",["error"]]]],[8,"GetState","","Trait to get the current state in the `State` enum for the current state in the state machine.",N,N],[10,"get_state","","Gets the state enumeration variant for the current state.",30,[[["self"]],["state"]]],[8,"MainLogic","","Trait implementing the main logic of the program.",N,N],[10,"main_logic","","Performs the main logic of the state.",31,[[["self"]],["result",["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["openstratos"]]],[11,"get_state","","",28,[[["self"]],["state"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["state"]]],[11,"eq","","",27,[[["self"],["state"]],["bool"]]],[11,"get_last","","Gets the last state of the application if there is one.",27,[[],["result",["option","error"]]]],[11,"as_str","","Gets the state as a string to be stored in the `LAST_STATE` file.",27,[[["self"]],["str"]]],[11,"from_str","","",27,[[["str"]],["result",["state"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["init"]]],[11,"get_state","","",32,[[["self"]],["state"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["acquiringfix"]]],[11,"get_state","","",33,[[["self"]],["state"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["fixacquired"]]],[11,"get_state","","",34,[[["self"]],["state"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["waitinglaunch"]]],[11,"get_state","","",35,[[["self"]],["state"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["goingup"]]],[11,"get_state","","",36,[[["self"]],["state"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["goingdown"]]],[11,"get_state","","",37,[[["self"]],["state"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["landed"]]],[11,"get_state","","",38,[[["self"]],["state"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["shutdown"]]],[11,"get_state","","",39,[[["self"]],["state"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["safemode"]]],[11,"get_state","","",40,[[["self"]],["state"]]],[0,"raspicam","os_balloon","Raspberry Pi camera module.",N,N],[3,"CAMERA","os_balloon::raspicam","Shared static camera object.",N,N],[3,"Camera","","Camera structure.",N,N],[3,"ExifData","","Structure representing EXIF data for a picture.",N,N],[17,"VIDEO_DIR","","Video directory inside data directory.",N,N],[17,"IMG_DIR","","Image directory inside data directory.",N,N],[11,"deref","","",41,[[["self"]],["mutex"]]],[11,"initialize","","",41,[[["self"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"record","","Starts recording video with the camera.",42,[[["self"],["t"],["fn"]],["result",["error"]]]],[11,"stop_recording","","Stops the video recording.",42,[[["self"]],["result",["error"]]]],[11,"is_recording","","Checks if the camera is recording.",42,[[["self"]],["bool"]]],[11,"take_picture","","Takes a picture with the camera.",42,[[["self"],["fn"]],["result",["error"]]]],[11,"drop","","",42,[[["self"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["exifdata"]]],[11,"to_string","","",43,[[["self"]],["string"]]],[0,"telemetry","os_balloon","Transparent serial telemetry module.",N,N],[17,"CONFIG_FILE","","Configuration file.",N,N],[17,"STATE_FILE","","Last state file, in the `data` directory.",N,N]],"paths":[[4,"Exposure"],[4,"WhiteBalance"],[3,"CONFIG"],[3,"Config"],[3,"Flight"],[3,"Battery"],[3,"Video"],[3,"Picture"],[3,"Gps"],[3,"Fona"],[3,"PhoneNumber"],[3,"Telemetry"],[4,"Logic"],[4,"Gps"],[4,"Config"],[4,"Fs"],[4,"Log"],[4,"LastState"],[4,"Fona"],[4,"Raspicam"],[4,"Init"],[3,"FONA"],[3,"Fona"],[3,"Location"],[4,"FixStatus"],[3,"GPS"],[3,"Gps"],[4,"State"],[3,"OpenStratos"],[8,"StateMachine"],[8,"GetState"],[8,"MainLogic"],[3,"Init"],[3,"AcquiringFix"],[3,"FixAcquired"],[3,"WaitingLaunch"],[3,"GoingUp"],[3,"GoingDown"],[3,"Landed"],[3,"ShutDown"],[3,"SafeMode"],[3,"CAMERA"],[3,"Camera"],[3,"ExifData"]]};
searchIndex["owning_ref"]={"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N],[3,"OwningRef","","An owning reference.",N,N],[3,"OwningRefMut","","An mutable owning reference.",N,N],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",N,N],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",N,N],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",N,N],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",N,N],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",N,N],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",N,N],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",N,N],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",N,N],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",N,N],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",N,N],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",N,N],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",N,N],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",N,N],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",N,N],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",N,N],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,N],[10,"into_erased","","Perform the type erasure.",0,N],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",N,N],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,N],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,N],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",N,N],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,N],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,N],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["owningref"]]],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["result",["owningref"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,[[["self"],["f"]],["owningref"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,[[["self"]],["owningref",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,[[["self"]],["owningref"]]],[11,"owner","","A getter for the underlying owner.",3,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",3,[[["self"]],["o"]]],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningref"]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningref"]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningrefmut"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,[[["self"]],["owningrefmut",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,[[["self"]],["owningrefmut"]]],[11,"owner","","A getter for the underlying owner.",4,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",4,[[["self"]],["o"]]],[11,"deref","","",5,N],[11,"deref_mut","","",5,N],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,[[["o"]],["self"]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,[[["o"]],["self"]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["self"]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["result"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref_mut","","",4,[[["self"]],["t"]]],[11,"as_ref","","",3,[[["self"]],["t"]]],[11,"as_ref","","",4,[[["self"]],["t"]]],[11,"as_mut","","",4,[[["self"]],["t"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"from","","",3,[[["o"]],["self"]]],[11,"from","","",4,[[["o"]],["self"]]],[11,"from","","",3,[[["owningrefmut"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"]={"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Condvar","parking_lot","A Condition Variable",N,N],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Once","","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",N,N],[3,"RawMutex","","Raw mutex type backed by the parking lot.",N,N],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",N,N],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.",N,N],[4,"OnceState","","Current state of a `Once`.",N,N],[13,"New","","A closure has not been executed yet",0,N],[13,"Poisoned","","A closure was executed but panicked.",0,N],[13,"InProgress","","A thread is currently executing a closure.",0,N],[13,"Done","","A closure has completed sucessfully.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"clone","","",1,[[["self"]],["waittimeoutresult"]]],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,[[],["condvar"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,[[["self"]]]],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,[[["self"],["mutexguard"]]]],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,[[["self"],["mutexguard"],["instant"]],["waittimeoutresult"]]],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,[[["self"],["mutexguard"],["duration"]],["waittimeoutresult"]]],[11,"default","","",2,[[],["condvar"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["oncestate"]]],[11,"eq","","",0,[[["self"],["oncestate"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,[[["self"]],["bool"]]],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,[[["self"]],["bool"]]],[11,"new","","Creates a new `Once` value.",3,[[],["once"]]],[11,"state","","Returns the current state of this `Once`.",3,[[["self"]],["oncestate"]]],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",3,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",3,[[["self"],["f"]]]],[11,"default","","",3,[[],["once"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"lock","","",4,[[["self"]]]],[11,"try_lock","","",4,[[["self"]],["bool"]]],[11,"unlock","","",4,[[["self"]]]],[11,"unlock_fair","","",4,[[["self"]]]],[11,"bump","","",4,[[["self"]]]],[11,"try_lock_until","","",4,[[["self"],["instant"]],["bool"]]],[11,"try_lock_for","","",4,[[["self"],["duration"]],["bool"]]],[11,"lock_exclusive","","",5,[[["self"]]]],[11,"try_lock_exclusive","","",5,[[["self"]],["bool"]]],[11,"unlock_exclusive","","",5,[[["self"]]]],[11,"lock_shared","","",5,[[["self"]]]],[11,"try_lock_shared","","",5,[[["self"]],["bool"]]],[11,"unlock_shared","","",5,[[["self"]]]],[11,"unlock_shared_fair","","",5,[[["self"]]]],[11,"unlock_exclusive_fair","","",5,[[["self"]]]],[11,"bump_shared","","",5,[[["self"]]]],[11,"bump_exclusive","","",5,[[["self"]]]],[11,"downgrade","","",5,[[["self"]]]],[11,"try_lock_shared_for","","",5,N],[11,"try_lock_shared_until","","",5,N],[11,"try_lock_exclusive_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_lock_exclusive_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"lock_shared_recursive","","",5,[[["self"]]]],[11,"try_lock_shared_recursive","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_for","","",5,N],[11,"try_lock_shared_recursive_until","","",5,N],[11,"lock_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable","","",5,[[["self"]]]],[11,"upgrade","","",5,[[["self"]]]],[11,"try_upgrade","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable_fair","","",5,[[["self"]]]],[11,"bump_upgradable","","",5,[[["self"]]]],[11,"downgrade_upgradable","","",5,[[["self"]]]],[11,"downgrade_to_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_lock_upgradable_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_upgrade_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_upgrade_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"nonzero_thread_id","","",6,[[["self"]],["usize"]]],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"RwLock","","A reader-writer lock",N,N],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[17,"ONCE_INIT","","Initialization value for static `Once` values.",N,N]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"]={"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",N,N],[12,"0","","",0,N],[3,"UnparkResult","","Result of an unpark operation.",N,N],[12,"unparked_threads","","The number of threads that were unparked.",1,N],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,N],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,N],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",N,N],[12,"0","","",2,N],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",N,N],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",N,N],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,N],[4,"ParkResult","","Result of a park operation.",N,N],[13,"Unparked","","We were unparked by another thread with the given token.",4,N],[13,"Invalid","","The validation callback returned false.",4,N],[13,"TimedOut","","The timeout expired.",4,N],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",N,N],[13,"Abort","","Abort the operation without doing anything.",5,N],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,N],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,N],[5,"park","","Parks the current thread in the queue associated with the given key.",N,[[["usize"],["v"],["b"],["t"],["parktoken"],["option",["instant"]]],["parkresult"]]],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",N,[[["usize"],["unparktoken"]],["usize"]]],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",N,[[["usize"],["f"],["c"]],["unparkresult"]]],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",N,[[["usize"],["c"]],["unparkresult"]]],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",N,[[["usize"],["usize"],["v"],["c"]],["unparkresult"]]],[11,"clone","","",4,[[["self"]],["parkresult"]]],[11,"eq","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,[[["self"]],["bool"]]],[11,"clone","","",1,[[["self"]],["unparkresult"]]],[11,"eq","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["requeueop"]]],[11,"eq","","",5,[[["self"],["requeueop"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["filterop"]]],[11,"eq","","",3,[[["self"],["filterop"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["unparktoken"]]],[11,"eq","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"ne","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["parktoken"]]],[11,"eq","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"ne","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `SpinWait`.",6,[[],["spinwait"]]],[11,"reset","","Resets a `SpinWait` to its initial state.",6,[[["self"]]]],[11,"spin","","Spins until the sleep threshold has been reached.",6,[[["self"]],["bool"]]],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,[[["self"]]]],[11,"default","","",6,[[],["spinwait"]]],[0,"deadlock","","[Experimental] Deadlock detection",N,N],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",N,[[["usize"]]]],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",N,[[["usize"]]]],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",N,N],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",N,N]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",N,N],[3,"LexError","","Error returned from `TokenStream::from_str`.",N,N],[3,"Span","","A region of source code, along with macro expansion information.",N,N],[3,"Group","","A delimited token stream.",N,N],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",N,N],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",N,N],[13,"Group","","A token stream surrounded by bracket delimiters.",0,N],[13,"Ident","","An identifier.",0,N],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,N],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,N],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",N,N],[13,"Parenthesis","","`( ... )`",1,N],[13,"Brace","","`{ ... }`",1,N],[13,"Bracket","","`[ ... ]`",1,N],[13,"None","","`Ø ... Ø`",1,N],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",N,N],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,N],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,N],[11,"from","","",3,[[["span"]],["span"]]],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",N,N],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",N,N],[11,"next","","",4,[[["self"]],["option",["tokentree"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_iter","proc_macro2","",5,[[["self"]],["intoiter"]]],[11,"clone","","",5,[[["self"]],["tokenstream"]]],[11,"new","","Returns an empty `TokenStream` containing no token trees.",5,[[],["tokenstream"]]],[11,"empty","","",5,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",5,[[["self"]],["bool"]]],[11,"default","","",5,[[],["self"]]],[11,"from_str","","",5,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from","","",5,[[["tokenstream"]],["tokenstream"]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"extend","","",5,[[["self"],["i"]]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"from_iter","","",5,[[["i"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["span"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",3,[[],["span"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,[[["delimiter"],["tokenstream"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",7,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,[[["self"],["span"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",8,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",8,[[["self"],["span"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["ident"]]],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",9,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,[[["self"],["span"]]]],[11,"eq","","",9,[[["self"],["ident"]],["bool"]]],[11,"eq","","",9,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",9,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["literal"]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["u64"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["i64"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","",10,[[["f64"]],["literal"]]],[11,"f64_suffixed","","",10,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,[[["f32"]],["literal"]]],[11,"f32_suffixed","","",10,[[["f32"]],["literal"]]],[11,"string","","",10,[[["str"]],["literal"]]],[11,"character","","",10,[[["char"]],["literal"]]],[11,"byte_string","","",10,N],[11,"span","","",10,[[["self"]],["span"]]],[11,"set_span","","",10,[[["self"],["span"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"Span"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quick_error"]={"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",N,N],[12,"0","","",0,N],[12,"1","","",0,N],[8,"ResultExt","","Result extension trait adding a `context` method",N,N],[10,"context","","The method is use to add context information to current operation",1,[[["self"],["x"]],["result",["context"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"quick_error","","Main macro that does all the work",N,N]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",N,N],[10,"append","","",0,[[["self"],["u"]]]],[10,"append_all","","",0,[[["self"],["i"]]]],[10,"append_separated","","",0,[[["self"],["i"],["u"]]]],[10,"append_terminated","","",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,[[["self"],["tokenstream"]]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,[[["self"]],["tokenstream"]]]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,N],[10,"from_seed","","Create a new PRNG using the given seed.",1,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",1,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],["result",["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",2,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",3,N],[12,"msg","","The error message",3,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",N,[[],["threadrng"]]],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",N,[[],["xorshiftrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Generating random samples from probability distributions.",N,N],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",N,N],[3,"Uniform","","Sample values uniformly between two bounds.",N,N],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",N,N],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",N,N],[3,"Pareto","","Samples floating-point numbers according to the Pareto distribution",N,N],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",N,N],[3,"Bernoulli","","The Bernoulli distribution.",N,N],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",N,N],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",4,N],[12,"item","","The actual item which is being weighted",4,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",N,N],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",N,N],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",N,N],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",N,N],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",N,N],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,N],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",N,N],[16,"X","","The type sampled by this implementation.",6,N],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,N],[10,"sample","","Sample a value.",6,N],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[11,"clone","","",7,[[["self"]],["uniform"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,[[["x"],["x"]],["uniform"]]],[11,"sample","","",7,[[["self"],["r"]],["x"]]],[11,"from","","",7,[[["range"]],["uniform"]]],[11,"clone","","",8,[[["self"]],["uniformint"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"clone","","",9,[[["self"]],["uniformfloat"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"clone","","",10,[[["self"]],["uniformduration"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"new_inclusive","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"sample","","",10,[[["self"],["r"]],["duration"]]],[11,"clone","rand::distributions","",11,[[["self"]],["gamma"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",11,[[["f64"],["f64"]],["gamma"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"clone","","",12,[[["self"]],["chisquared"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",12,[[["f64"]],["chisquared"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"clone","","",13,[[["self"]],["fisherf"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",13,[[["f64"],["f64"]],["fisherf"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"clone","","",14,[[["self"]],["studentt"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",14,[[["f64"]],["studentt"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"clone","","",15,[[["self"]],["standardnormal"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"clone","","",16,[[["self"]],["normal"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",16,[[["f64"],["f64"]],["normal"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"clone","","",17,[[["self"]],["lognormal"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",17,[[["f64"],["f64"]],["lognormal"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"clone","","",18,[[["self"]],["exp1"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"sample","","",18,[[["self"],["r"]],["f64"]]],[11,"clone","","",19,[[["self"]],["exp"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",19,[[["f64"]],["exp"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"clone","","",20,[[["self"]],["pareto"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and `shape`.",20,[[["f64"],["f64"]],["pareto"]]],[11,"sample","","",20,[[["self"],["r"]],["f64"]]],[11,"clone","","",21,[[["self"]],["poisson"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",21,[[["f64"]],["poisson"]]],[11,"sample","","",21,[[["self"],["r"]],["u64"]]],[11,"clone","","",22,[[["self"]],["binomial"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",22,[[["u64"],["f64"]],["binomial"]]],[11,"sample","","",22,[[["self"],["r"]],["u64"]]],[11,"clone","","",23,[[["self"]],["bernoulli"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",23,[[["f64"]],["bernoulli"]]],[11,"sample","","",23,[[["self"],["r"]],["bool"]]],[11,"clone","","",24,[[["self"]],["cauchy"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters `median` the peak location and `scale` the scale factor. Panics if `scale <= 0`.",24,[[["f64"],["f64"]],["cauchy"]]],[11,"sample","","",24,[[["self"],["r"]],["f64"]]],[11,"clone","","",25,[[["self"]],["openclosed01"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["open01"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["f32"]]],[11,"sample","","",25,[[["self"],["r"]],["f32"]]],[11,"sample","","",26,[[["self"],["r"]],["f32"]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",26,[[["self"],["r"]],["f64"]]],[11,"sample","","",27,[[["self"],["r"]],["u8"]]],[11,"sample","","",27,[[["self"],["r"]],["u16"]]],[11,"sample","","",27,[[["self"],["r"]],["u32"]]],[11,"sample","","",27,[[["self"],["r"]],["u64"]]],[11,"sample","","",27,[[["self"],["r"]],["usize"]]],[11,"sample","","",27,[[["self"],["r"]],["i8"]]],[11,"sample","","",27,[[["self"],["r"]],["i16"]]],[11,"sample","","",27,[[["self"],["r"]],["i32"]]],[11,"sample","","",27,[[["self"],["r"]],["i64"]]],[11,"sample","","",27,[[["self"],["r"]],["isize"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["char"]]],[11,"sample","","",28,[[["self"],["r"]],["char"]]],[11,"sample","","",27,[[["self"],["r"]],["bool"]]],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,[[["self"],["r"]],["option"]]],[11,"sample","","",27,[[["self"],["r"]],["wrapping"]]],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",N,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",29,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",7,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions","",19,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",16,[[["self"],["r"]],["f64"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",17,[[["self"],["r"]],["f64"]]],[8,"Sample","","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",30,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",31,[[["self"],["r"]],["support"]]],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",N,N],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["distiter"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"clone","","",27,[[["self"]],["standard"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `WeightedChoice`.",29,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"prng","","Pseudo-random number generators.",N,N],[3,"XorShiftRng","rand::prng","An Xorshift random number generator.",N,N],[0,"chacha","","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",N,N],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",N,N],[11,"clone","","",34,[[["self"]],["chacharng"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,N],[11,"try_fill_bytes","","",34,N],[11,"from_seed","","",34,N],[11,"from_rng","","",34,[[["r"]],["result",["error"]]]],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",34,[[],["chacharng"]]],[11,"set_stream","","Set the stream number.",34,[[["self"],["u64"]]]],[11,"clone","","",35,[[["self"]],["chachacore"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"generate","","",35,N],[11,"from_seed","","",35,N],[11,"from","","",34,[[["chachacore"]],["self"]]],[0,"hc128","rand::prng","The HC-128 random number generator.",N,N],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",N,N],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",N,N],[11,"clone","","",36,[[["self"]],["hc128rng"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",36,[[["self"]],["u32"]]],[11,"next_u64","","",36,[[["self"]],["u64"]]],[11,"fill_bytes","","",36,N],[11,"try_fill_bytes","","",36,N],[11,"from_seed","","",36,N],[11,"from_rng","","",36,[[["r"]],["result",["error"]]]],[11,"clone","","",37,[[["self"]],["hc128core"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"generate","","",37,N],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",37,N],[0,"isaac","rand::prng","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",N,N],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",N,N],[11,"clone","","",38,[[["self"]],["isaacrng"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",38,[[["self"]],["u32"]]],[11,"next_u64","","",38,[[["self"]],["u64"]]],[11,"fill_bytes","","",38,N],[11,"try_fill_bytes","","",38,N],[11,"from_seed","","",38,N],[11,"from_rng","","",38,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",38,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",38,[[["u64"]],["self"]]],[11,"clone","","",39,[[["self"]],["isaaccore"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",39,[[["self"],["isaacarray"]]]],[11,"from_seed","","",39,N],[11,"from_rng","","",39,[[["r"]],["result",["error"]]]],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",N,N],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",N,N],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",N,N],[11,"clone","","",40,[[["self"]],["isaac64rng"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",40,[[["self"]],["u32"]]],[11,"next_u64","","",40,[[["self"]],["u64"]]],[11,"fill_bytes","","",40,N],[11,"try_fill_bytes","","",40,N],[11,"from_seed","","",40,N],[11,"from_rng","","",40,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",40,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",40,[[["u64"]],["self"]]],[11,"clone","","",41,[[["self"]],["isaac64core"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",41,[[["self"],["isaacarray"]]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",41,[[["u64"]],["self"]]],[11,"from_seed","","",41,N],[11,"from_rng","","",41,[[["r"]],["result",["error"]]]],[11,"clone","rand::prng","",42,[[["self"]],["xorshiftrng"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",42,[[],["xorshiftrng"]]],[11,"next_u32","","",42,[[["self"]],["u32"]]],[11,"next_u64","","",42,[[["self"]],["u64"]]],[11,"fill_bytes","","",42,N],[11,"try_fill_bytes","","",42,N],[11,"from_seed","","",42,N],[11,"from_rng","","",42,[[["r"]],["result",["error"]]]],[0,"rngs","rand","Random number generators and adapters for common usage:",N,N],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",N,N],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",N,N],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",N,N],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",N,N],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",N,N],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",N,N],[13,"NoTimer","","No timer available.",43,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",43,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",43,N],[13,"TinyVariantions","","Variations of deltas of time too small.",43,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",43,N],[0,"adapter","","Wrappers / adapters forming RNGs",N,N],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",N,N],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReadRng` from a `Read`.",44,[[["r"]],["readrng"]]],[11,"next_u32","","",44,[[["self"]],["u32"]]],[11,"next_u64","","",44,[[["self"]],["u64"]]],[11,"fill_bytes","","",44,N],[11,"try_fill_bytes","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",45,[[["r"],["u64"],["rsdr"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",45,[[["self"]],["result",["error"]]]],[11,"next_u32","","",45,[[["self"]],["u32"]]],[11,"next_u64","","",45,[[["self"]],["u64"]]],[11,"fill_bytes","","",45,N],[11,"try_fill_bytes","","",45,N],[11,"clone","","",45,[[["self"]],["reseedingrng"]]],[11,"fmt","rand::rngs","",46,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `EntropyRng`.",46,[[],["self"]]],[11,"default","","",46,[[],["self"]]],[11,"next_u32","","",46,[[["self"]],["u32"]]],[11,"next_u64","","",46,[[["self"]],["u64"]]],[11,"fill_bytes","","",46,N],[11,"try_fill_bytes","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["jitterrng"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["timererror"]]],[11,"eq","","",43,[[["self"],["timererror"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"new","rand::rngs","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",47,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",47,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",47,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",47,[[["self"]],["result",["u8","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",47,[[["self"],["bool"]],["i64"]]],[11,"next_u32","","",47,[[["self"]],["u32"]]],[11,"next_u64","","",47,[[["self"]],["u64"]]],[11,"fill_bytes","","",47,N],[11,"try_fill_bytes","","",47,N],[0,"mock","","Mock random number generator",N,N],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",N,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["steprng"]]],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",48,[[["u64"],["u64"]],["self"]]],[11,"next_u32","","",48,[[["self"]],["u32"]]],[11,"next_u64","","",48,[[["self"]],["u64"]]],[11,"fill_bytes","","",48,N],[11,"try_fill_bytes","","",48,N],[11,"clone","rand::rngs","",49,[[["self"]],["smallrng"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",49,[[["self"]],["u32"]]],[11,"next_u64","","",49,[[["self"]],["u64"]]],[11,"fill_bytes","","",49,N],[11,"try_fill_bytes","","",49,N],[11,"from_seed","","",49,N],[11,"from_rng","","",49,[[["r"]],["result",["error"]]]],[11,"clone","","",50,[[["self"]],["stdrng"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",50,[[["self"]],["u32"]]],[11,"next_u64","","",50,[[["self"]],["u64"]]],[11,"fill_bytes","","",50,N],[11,"try_fill_bytes","","",50,N],[11,"from_seed","","",50,N],[11,"from_rng","","",50,[[["r"]],["result",["error"]]]],[11,"clone","","",51,[[["self"]],["threadrng"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",51,[[["self"]],["u32"]]],[11,"next_u64","","",51,[[["self"]],["u64"]]],[11,"fill_bytes","","",51,N],[11,"try_fill_bytes","","",51,N],[11,"clone","","",52,[[["self"]],["osrng"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `OsRng`.",52,[[],["result",["osrng","error"]]]],[11,"next_u32","","",52,[[["self"]],["u32"]]],[11,"next_u64","","",52,[[["self"]],["u64"]]],[11,"fill_bytes","","",52,N],[11,"try_fill_bytes","","",52,N],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",53,[[["r"]],["self"]]],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",N,N],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",54,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",54,[[["self"],["t"],["t"]],["t"]]],[11,"sample","","Sample a new value, using the given distribution.",54,[[["self"],["d"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",54,[[["self"],["d"]],["distiter"]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]],["result",["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",54,[[["self"],["f64"]],["bool"]]],[11,"choose","","Return a random element from `values`.",54,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",54,N],[11,"shuffle","","Shuffle a mutable slice in place.",54,N],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",54,[[["self"]],["generator"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",54,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",54,[[["self"]],["asciigenerator"]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",55,N],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",55,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",N,N],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",56,[[],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"next","","",57,[[["self"]],["option"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"next","","",58,[[["self"]],["option",["char"]]]],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"read","","",0,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",2,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",2,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,[[["self"]],["option",["box"]]]]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"Cauchy"],[3,"OpenClosed01"],[3,"Open01"],[3,"Standard"],[3,"Alphanumeric"],[3,"WeightedChoice"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"DistIter"],[3,"ChaChaRng"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacRng"],[3,"IsaacCore"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[4,"ErrorKind","rand_core","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",0,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",0,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",0,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",0,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",1,N],[12,"msg","","The error message",1,N],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",2,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",2,N],[10,"generate","","Generate a new block of results.",2,N],[3,"BlockRng","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",4,N],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",6,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",0,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",0,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",0,[[["self"]],["str"]]],[11,"clone","rand_core::block","",4,[[["self"]],["blockrng64"]]],[11,"clone","","",3,[[["self"]],["blockrng"]]],[11,"clone","rand_core","",0,[[["self"]],["errorkind"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core::block","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"from_seed","rand_core::block","",3,N],[11,"seed_from_u64","","",3,[[["u64"]],["blockrng"]]],[11,"from_rng","","",3,[[["s"]],["result",["blockrng","error"]]]],[11,"from_seed","","",4,N],[11,"seed_from_u64","","",4,[[["u64"]],["blockrng64"]]],[11,"from_rng","","",4,[[["s"]],["result",["blockrng64","error"]]]],[11,"next_u32","","",4,[[["self"]],["u32"]]],[11,"next_u64","","",4,[[["self"]],["u64"]]],[11,"fill_bytes","","",4,N],[11,"try_fill_bytes","","",4,N],[11,"next_u32","","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"read","rand_core","",5,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"new","","Create a new instance, with specified kind and a message.",1,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",1,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",1,[[["self"]],["option",["box"]]]],[11,"new","rand_core::block","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,N],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",4,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",4,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",4,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",4,N]],"paths":[[4,"ErrorKind"],[3,"Error"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["rustc_demangle"]={"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",N,N],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",N,N],[5,"demangle","","De-mangles a Rust symbol into a more readable version",N,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",N,[[["str"]],["result",["demangle","trydemangleerror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["trydemangleerror"]]],[11,"as_str","","Returns the underlying string that's being demangled.",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_value"]={"doc":"","items":[[3,"ValueVisitor","serde_value","",N,N],[4,"Unexpected","","",N,N],[13,"Bool","","",0,N],[13,"Unsigned","","",0,N],[13,"Signed","","",0,N],[13,"Float","","",0,N],[13,"Char","","",0,N],[13,"Str","","",0,N],[13,"Bytes","","",0,N],[13,"Unit","","",0,N],[13,"Option","","",0,N],[13,"NewtypeStruct","","",0,N],[13,"Seq","","",0,N],[13,"Map","","",0,N],[13,"Enum","","",0,N],[13,"UnitVariant","","",0,N],[13,"NewtypeVariant","","",0,N],[13,"TupleVariant","","",0,N],[13,"StructVariant","","",0,N],[13,"Other","","",0,N],[4,"DeserializerError","","",N,N],[13,"Custom","","",1,N],[13,"InvalidType","","",1,N],[13,"InvalidValue","","",1,N],[13,"InvalidLength","","",1,N],[13,"UnknownVariant","","",1,N],[13,"UnknownField","","",1,N],[13,"MissingField","","",1,N],[13,"DuplicateField","","",1,N],[4,"SerializerError","","",N,N],[13,"Custom","","",2,N],[4,"Value","","",N,N],[13,"Bool","","",3,N],[13,"U8","","",3,N],[13,"U16","","",3,N],[13,"U32","","",3,N],[13,"U64","","",3,N],[13,"I8","","",3,N],[13,"I16","","",3,N],[13,"I32","","",3,N],[13,"I64","","",3,N],[13,"F32","","",3,N],[13,"F64","","",3,N],[13,"Char","","",3,N],[13,"String","","",3,N],[13,"Unit","","",3,N],[13,"Option","","",3,N],[13,"Newtype","","",3,N],[13,"Seq","","",3,N],[13,"Map","","",3,N],[13,"Bytes","","",3,N],[5,"to_value","","",N,[[["t"]],["result",["value","serializererror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["unexpected"]],["unexpected"]]],[11,"to_unexpected","","",0,[[["self"]],["unexpected"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"invalid_type","","",1,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","",1,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","",1,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","",1,N],[11,"unknown_field","","",1,N],[11,"missing_field","","",1,[[["str"]],["self"]]],[11,"duplicate_field","","",1,[[["str"]],["self"]]],[11,"to_error","","",1,[[["self"]],["e"]]],[11,"into_error","","",1,[[["self"]],["e"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["error"]],["deserializererror"]]],[11,"expecting","","",4,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",4,[[["self"],["bool"]],["result",["value"]]]],[11,"visit_i8","","",4,[[["self"],["i8"]],["result",["value"]]]],[11,"visit_i16","","",4,[[["self"],["i16"]],["result",["value"]]]],[11,"visit_i32","","",4,[[["self"],["i32"]],["result",["value"]]]],[11,"visit_i64","","",4,[[["self"],["i64"]],["result",["value"]]]],[11,"visit_u8","","",4,[[["self"],["u8"]],["result",["value"]]]],[11,"visit_u16","","",4,[[["self"],["u16"]],["result",["value"]]]],[11,"visit_u32","","",4,[[["self"],["u32"]],["result",["value"]]]],[11,"visit_u64","","",4,[[["self"],["u64"]],["result",["value"]]]],[11,"visit_f32","","",4,[[["self"],["f32"]],["result",["value"]]]],[11,"visit_f64","","",4,[[["self"],["f64"]],["result",["value"]]]],[11,"visit_char","","",4,[[["self"],["char"]],["result",["value"]]]],[11,"visit_str","","",4,[[["self"],["str"]],["result",["value"]]]],[11,"visit_string","","",4,[[["self"],["string"]],["result",["value"]]]],[11,"visit_unit","","",4,[[["self"]],["result",["value"]]]],[11,"visit_none","","",4,[[["self"]],["result",["value"]]]],[11,"visit_some","","",4,[[["self"],["d"]],["result",["value"]]]],[11,"visit_newtype_struct","","",4,[[["self"],["d"]],["result",["value"]]]],[11,"visit_seq","","",4,[[["self"],["v"]],["result",["value"]]]],[11,"visit_map","","",4,[[["self"],["v"]],["result",["value"]]]],[11,"visit_bytes","","",4,N],[11,"visit_byte_buf","","",4,[[["self"],["vec",["u8"]]],["result",["value"]]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"into_deserializer","","",3,[[["self"]],["value"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",3,N],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"custom","","",2,[[["t"]],["serializererror"]]],[11,"serialize","","",3,[[["self"],["s"]],["result"]]],[11,"clone","","",3,[[["self"]],["value"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"deserialize_into","","",3,[[["self"]],["result",["deserializererror"]]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]]],"paths":[[4,"Unexpected"],[4,"DeserializerError"],[4,"SerializerError"],[4,"Value"],[3,"ValueVisitor"]]};
searchIndex["serialport"]={"doc":"serialport-rs is a cross-platform serial port library.","items":[[3,"Error","serialport","An error type for serial port operations.",N,N],[12,"kind","","The kind of error this is",0,N],[12,"description","","A description of the error suitable for end-users",0,N],[3,"SerialPortSettings","","A struct containing all serial port settings",N,N],[12,"baud_rate","","The baud rate in symbols-per-second",1,N],[12,"data_bits","","Number of bits used to represent a character sent on the line",1,N],[12,"flow_control","","The type of signalling to use for controlling data transfer",1,N],[12,"parity","","The type of parity to use for error checking",1,N],[12,"stop_bits","","Number of bits to use to signal the end of a character",1,N],[12,"timeout","","Amount of time to wait to receive data before timing out",1,N],[3,"UsbPortInfo","","Contains all possible USB information about a `SerialPort`",N,N],[12,"vid","","Vendor ID",2,N],[12,"pid","","Product ID",2,N],[12,"serial_number","","Serial number (arbitrary string)",2,N],[12,"manufacturer","","Manufacturer (arbitrary string)",2,N],[12,"product","","Product name (arbitrary string)",2,N],[3,"SerialPortInfo","","A device-independent implementation of serial port information.",N,N],[12,"port_name","","The short name of the serial port",3,N],[12,"port_type","","The hardware device type that exposes this port",3,N],[4,"ErrorKind","","Categories of errors that can occur when interacting with serial ports.",N,N],[13,"NoDevice","","The device is not available.",4,N],[13,"InvalidInput","","A parameter was incorrect.",4,N],[13,"Unknown","","An unknown error occurred.",4,N],[13,"Io","","An I/O error occurred.",4,N],[4,"DataBits","","Number of bits per character.",N,N],[13,"Five","","5 bits per character",5,N],[13,"Six","","6 bits per character",5,N],[13,"Seven","","7 bits per character",5,N],[13,"Eight","","8 bits per character",5,N],[4,"Parity","","Parity checking modes.",N,N],[13,"None","","No parity bit.",6,N],[13,"Odd","","Parity bit sets odd number of 1 bits.",6,N],[13,"Even","","Parity bit sets even number of 1 bits.",6,N],[4,"StopBits","","Number of stop bits.",N,N],[13,"One","","One stop bit.",7,N],[13,"Two","","Two stop bits.",7,N],[4,"FlowControl","","Flow control modes.",N,N],[13,"None","","No flow control.",8,N],[13,"Software","","Flow control using XON/XOFF bytes.",8,N],[13,"Hardware","","Flow control using RTS/CTS signals.",8,N],[4,"SerialPortType","","The physical type of a `SerialPort`",N,N],[13,"UsbPort","","The serial port is connected via USB",9,N],[13,"PciPort","","The serial port is connected via PCI (permanent port)",9,N],[13,"BluetoothPort","","The serial port is connected via Bluetooth",9,N],[13,"Unknown","","It can't be determined how the serial port is connected",9,N],[5,"open","","Opens the serial port specified by the device path using default settings.",N,[[["t"]],["result",["box"]]]],[5,"open_with_settings","","Opens the serial port specified by the device path with the given settings.",N,[[["t"],["serialportsettings"]],["result",["box"]]]],[5,"available_ports","","Returns a list of all serial ports on system",N,[[],["result",["vec"]]]],[0,"prelude","","A module that exports types that are useful to have in scope.",N,N],[0,"posix","","The implementation of serialport for POSIX-based systems (Linux, BSD, Mac)",N,N],[3,"TTYPort","serialport::posix","A TTY-based serial port implementation.",N,N],[5,"available_ports","","Scans the system for serial ports and returns a list of them. The `SerialPortInfo` struct contains the name of the port which can be used for opening it.",N,[[],["result",["vec"]]]],[11,"from","serialport","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"fmt","serialport::posix","",10,[[["self"],["formatter"]],["result"]]],[11,"open","","Opens a TTY device as a serial port.",10,[[["path"],["serialportsettings"]],["result",["ttyport"]]]],[11,"exclusive","","Returns the exclusivity of the port",10,[[["self"]],["bool"]]],[11,"set_exclusive","","Sets the exclusivity of the port",10,[[["self"],["bool"]],["result"]]],[11,"pair","","Create a pair of pseudo serial terminals",10,[[],["result"]]],[11,"drop","","",10,[[["self"]]]],[11,"as_raw_fd","","",10,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",10,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",10,[[["rawfd"]],["self"]]],[11,"read","","",10,N],[11,"write","","",10,N],[11,"flush","","",10,[[["self"]],["result"]]],[11,"name","","",10,[[["self"]],["option",["string"]]]],[11,"settings","","Returns a struct with all port settings",10,[[["self"]],["serialportsettings"]]],[11,"baud_rate","","Returns the port's baud rate",10,[[["self"]],["result",["u32"]]]],[11,"data_bits","","",10,[[["self"]],["result",["databits"]]]],[11,"flow_control","","",10,[[["self"]],["result",["flowcontrol"]]]],[11,"parity","","",10,[[["self"]],["result",["parity"]]]],[11,"stop_bits","","",10,[[["self"]],["result",["stopbits"]]]],[11,"timeout","","",10,[[["self"]],["duration"]]],[11,"set_all","","",10,[[["self"],["serialportsettings"]],["result"]]],[11,"set_baud_rate","","",10,[[["self"],["u32"]],["result"]]],[11,"set_flow_control","","",10,[[["self"],["flowcontrol"]],["result"]]],[11,"set_parity","","",10,[[["self"],["parity"]],["result"]]],[11,"set_data_bits","","",10,[[["self"],["databits"]],["result"]]],[11,"set_stop_bits","","",10,[[["self"],["stopbits"]],["result"]]],[11,"set_timeout","","",10,[[["self"],["duration"]],["result"]]],[11,"write_request_to_send","","",10,[[["self"],["bool"]],["result"]]],[11,"write_data_terminal_ready","","",10,[[["self"],["bool"]],["result"]]],[11,"read_clear_to_send","","",10,[[["self"]],["result",["bool"]]]],[11,"read_data_set_ready","","",10,[[["self"]],["result",["bool"]]]],[11,"read_ring_indicator","","",10,[[["self"]],["result",["bool"]]]],[11,"read_carrier_detect","","",10,[[["self"]],["result",["bool"]]]],[11,"try_clone","","",10,[[["self"]],["result",["box"]]]],[6,"Result","serialport","A type for results generated by interacting with serial ports.",N,N],[8,"SerialPort","","A trait for serial port devices",N,N],[10,"name","","Returns the name of this port if it exists.",11,[[["self"]],["option",["string"]]]],[10,"settings","","Returns a struct with the current port settings",11,[[["self"]],["serialportsettings"]]],[10,"baud_rate","","Returns the current baud rate.",11,[[["self"]],["result",["u32"]]]],[10,"data_bits","","Returns the character size.",11,[[["self"]],["result",["databits"]]]],[10,"flow_control","","Returns the flow control mode.",11,[[["self"]],["result",["flowcontrol"]]]],[10,"parity","","Returns the parity-checking mode.",11,[[["self"]],["result",["parity"]]]],[10,"stop_bits","","Returns the number of stop bits.",11,[[["self"]],["result",["stopbits"]]]],[10,"timeout","","Returns the current timeout.",11,[[["self"]],["duration"]]],[10,"set_all","","Applies all settings for a struct. This isn't guaranteed to involve only a single call into the driver, though that may be done on some platforms.",11,[[["self"],["serialportsettings"]],["result"]]],[10,"set_baud_rate","","Sets the baud rate.",11,[[["self"],["u32"]],["result"]]],[10,"set_data_bits","","Sets the character size.",11,[[["self"],["databits"]],["result"]]],[10,"set_flow_control","","Sets the flow control mode.",11,[[["self"],["flowcontrol"]],["result"]]],[10,"set_parity","","Sets the parity-checking mode.",11,[[["self"],["parity"]],["result"]]],[10,"set_stop_bits","","Sets the number of stop bits.",11,[[["self"],["stopbits"]],["result"]]],[10,"set_timeout","","Sets the timeout for future I/O operations.",11,[[["self"],["duration"]],["result"]]],[10,"write_request_to_send","","Sets the state of the RTS (Request To Send) control signal.",11,[[["self"],["bool"]],["result"]]],[10,"write_data_terminal_ready","","Writes to the Data Terminal Ready pin",11,[[["self"],["bool"]],["result"]]],[10,"read_clear_to_send","","Reads the state of the CTS (Clear To Send) control signal.",11,[[["self"]],["result",["bool"]]]],[10,"read_data_set_ready","","Reads the state of the Data Set Ready control signal.",11,[[["self"]],["result",["bool"]]]],[10,"read_ring_indicator","","Reads the state of the Ring Indicator control signal.",11,[[["self"]],["result",["bool"]]]],[10,"read_carrier_detect","","Reads the state of the Carrier Detect control signal.",11,[[["self"]],["result",["bool"]]]],[10,"try_clone","","Attempts to clone the `SerialPort`. This allow you to write and read simultaneously from the same serial connection. Please note that if you want a real asynchronous serial port you should look at mio-serial or tokio-serial.",11,[[["self"]],["result",["box"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["errorkind"]]],[11,"eq","","",4,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",4,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Instantiates a new error",0,[[["errorkind"],["t"]],["self"]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",0,[[["self"]],["errorkind"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["databits"]]],[11,"eq","","",5,[[["self"],["databits"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["parity"]]],[11,"eq","","",6,[[["self"],["parity"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["stopbits"]]],[11,"eq","","",7,[[["self"],["stopbits"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["flowcontrol"]]],[11,"eq","","",8,[[["self"],["flowcontrol"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["serialportsettings"]]],[11,"eq","","",1,[[["self"],["serialportsettings"]],["bool"]]],[11,"ne","","",1,[[["self"],["serialportsettings"]],["bool"]]],[11,"default","","",1,[[],["serialportsettings"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["usbportinfo"]]],[11,"eq","","",2,[[["self"],["usbportinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["usbportinfo"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["serialporttype"]]],[11,"eq","","",9,[[["self"],["serialporttype"]],["bool"]]],[11,"ne","","",9,[[["self"],["serialporttype"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["serialportinfo"]]],[11,"eq","","",3,[[["self"],["serialportinfo"]],["bool"]]],[11,"ne","","",3,[[["self"],["serialportinfo"]],["bool"]]]],"paths":[[3,"Error"],[3,"SerialPortSettings"],[3,"UsbPortInfo"],[3,"SerialPortInfo"],[4,"ErrorKind"],[4,"DataBits"],[4,"Parity"],[4,"StopBits"],[4,"FlowControl"],[4,"SerialPortType"],[3,"TTYPort"],[8,"SerialPort"]]};
searchIndex["slab"]={"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",N,N],[3,"VacantEntry","","A handle to a vacant entry in a `Slab`.",N,N],[3,"Iter","","An iterator over the values stored in the `Slab`",N,N],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",N,N],[11,"clone","","",0,[[["self"]],["slab"]]],[11,"default","","",0,[[],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new, empty `Slab`.",0,[[],["slab"]]],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,[[["usize"]],["slab"]]],[11,"capacity","","Return the number of values the slab can store without reallocating.",0,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more values to be stored without allocating.",0,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minimum capacity required to store exactly `additional` more values.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the slab as much as possible.",0,[[["self"]]]],[11,"clear","","Clear the slab of all values.",0,[[["self"]]]],[11,"len","","Return the number of stored values.",0,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there are no values stored in the slab.",0,[[["self"]],["bool"]]],[11,"iter","","Return an iterator over the slab.",0,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator that allows modifying each value.",0,[[["self"]],["itermut"]]],[11,"get","","Return a reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Return a mutable reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_unchecked","","Return a reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"get_unchecked_mut","","Return a mutable reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert a value in the slab, returning key assigned to the value.",0,[[["self"],["t"]],["usize"]]],[11,"vacant_entry","","Return a handle to a vacant entry allowing for further manipulation.",0,[[["self"]],["vacantentry"]]],[11,"remove","","Remove and return the value associated with the given key.",0,[[["self"],["usize"]],["t"]]],[11,"contains","","Return `true` if a value is associated with the given key.",0,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retain only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,[[["self"],["t"]],["t"]]],[11,"key","","Return the key associated with this entry.",1,[[["self"]],["usize"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Construct an empty vector",4,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",4,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",4,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",4,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",4,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",4,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,N],[11,"clear","","Remove all elements from the vector.",4,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",4,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",4,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"write","","",4,N],[11,"write_all","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"from","","",4,N],[11,"from","","",4,[[["vec"]],["smallvec"]]],[11,"from","","",4,[[["a"]],["smallvec"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"extend_from_slice","","",4,N],[11,"push","","",4,N],[11,"from_iter","","",4,[[["i"]],["smallvec"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"clone","","",4,[[["self"]],["smallvec"]]],[11,"eq","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["smallvec"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",4,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"]={"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N]],"paths":[]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",N,N],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `crate`.",N,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprAsync","","An async block: `async { ... }`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[12,"attrs","","",13,N],[12,"base","","",13,N],[12,"dot_token","","",13,N],[12,"member","","",13,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",14,N],[12,"expr","","",14,N],[12,"bracket_token","","",14,N],[12,"index","","",14,N],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",N,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",15,N],[12,"lit","","",15,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",16,N],[12,"paren_token","","",16,N],[12,"expr","","",16,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",17,N],[12,"qself","","",17,N],[12,"path","","",17,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTryBlock","","A try block: `try { ... }`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",18,N],[12,"op","","",18,N],[12,"expr","","",18,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",19,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",20,N],[12,"span","","",20,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",21,N],[12,"lt_token","","",21,N],[12,"lifetimes","","",21,N],[12,"gt_token","","",21,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",22,N],[12,"const_token","","",22,N],[12,"ident","","",22,N],[12,"colon_token","","",22,N],[12,"ty","","",22,N],[12,"eq_token","","",22,N],[12,"default","","",22,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",23,N],[12,"params","","",23,N],[12,"gt_token","","",23,N],[12,"where_clause","","",23,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",24,N],[12,"lifetime","","",24,N],[12,"colon_token","","",24,N],[12,"bounds","","",24,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",25,N],[12,"eq_token","","",25,N],[12,"rhs_ty","","",25,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",26,N],[12,"colon_token","","",26,N],[12,"bounds","","",26,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",27,N],[12,"bounded_ty","","The type being bounded",27,N],[12,"colon_token","","",27,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",27,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"paren_token","","",28,N],[12,"modifier","","",28,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",28,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",28,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",29,N],[12,"ident","","",29,N],[12,"colon_token","","",29,N],[12,"bounds","","",29,N],[12,"eq_token","","",29,N],[12,"default","","",29,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",30,N],[12,"predicates","","",30,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"apostrophe","","",31,N],[12,"ident","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",33,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",34,N],[12,"bang_token","","",34,N],[12,"delimiter","","",34,N],[12,"tts","","",34,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",35,N],[12,"brace_token","","",35,N],[12,"variants","","",35,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",36,N],[12,"fields","","",36,N],[12,"semi_token","","",36,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",37,N],[12,"fields","","",37,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",38,N],[12,"vis","","Visibility of the struct or enum.",38,N],[12,"ident","","Name of the struct or enum.",38,N],[12,"generics","","Generics required to complete the definition.",38,N],[12,"data","","Data within the struct or enum.",38,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",39,N],[12,"name","","",39,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",40,N],[12,"ty","","",40,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",41,N],[12,"elem","","",41,N],[12,"semi_token","","",41,N],[12,"len","","",41,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"lifetimes","","",42,N],[12,"unsafety","","",42,N],[12,"abi","","",42,N],[12,"fn_token","","",42,N],[12,"paren_token","","",42,N],[12,"inputs","","",42,N],[12,"variadic","","",42,N],[12,"output","","",42,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",43,N],[12,"elem","","",43,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",44,N],[12,"bounds","","",44,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",45,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",46,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",47,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",48,N],[12,"elem","","",48,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",49,N],[12,"path","","",49,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",50,N],[12,"const_token","","",50,N],[12,"mutability","","",50,N],[12,"elem","","",50,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",51,N],[12,"lifetime","","",51,N],[12,"mutability","","",51,N],[12,"elem","","",51,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",52,N],[12,"elem","","",52,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",53,N],[12,"bounds","","",53,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",54,N],[12,"elems","","",54,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",55,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",56,N],[12,"lt_token","","",56,N],[12,"args","","",56,N],[12,"gt_token","","",56,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",57,N],[12,"eq_token","","",57,N],[12,"ty","","",57,N],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",N,N],[12,"ident","","",58,N],[12,"colon_token","","",58,N],[12,"bounds","","",58,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",59,N],[12,"inputs","","`(A, B)`",59,N],[12,"output","","`C`",59,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",60,N],[12,"segments","","",60,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",61,N],[12,"arguments","","",61,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",62,N],[12,"ty","","",62,N],[12,"position","","",62,N],[12,"as_token","","",62,N],[12,"gt_token","","",62,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",63,N],[13,"Inner","","",63,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",64,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",64,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",64,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",65,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",65,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",66,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",66,N],[13,"Unit","","Unit struct or unit variant such as `None`.",66,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",67,N],[13,"Crate","","A crate-level visibility: `crate`.",67,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",67,N],[13,"Inherited","","An inherited visibility, which usually means private.",67,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",68,N],[13,"InPlace","","A placement expression: `place <- value`.",68,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",68,N],[13,"Call","","A function call expression: `invoke(a, b)`.",68,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",68,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",68,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",68,N],[13,"Unary","","A unary operation: `!x`, `*x`.",68,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",68,N],[13,"Cast","","A cast expression: `foo as f64`.",68,N],[13,"Type","","A type ascription expression: `foo: f64`.",68,N],[13,"Let","","A `let` guard: `let Some(x) = opt`.",68,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",68,N],[13,"While","","A while loop: `while expr { ... }`.",68,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",68,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",68,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",68,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",68,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",68,N],[13,"Block","","A blocked scope: `{ ... }`.",68,N],[13,"Assign","","An assignment expression: `a = compute()`.",68,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",68,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",68,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",68,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",68,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",68,N],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",68,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",68,N],[13,"Continue","","A `continue`, with an optional label.",68,N],[13,"Return","","A `return`, with an optional value to be returned.",68,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",68,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",68,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",68,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",68,N],[13,"Group","","An expression contained within invisible delimiters.",68,N],[13,"Try","","A try-expression: `expr?`.",68,N],[13,"Async","","An async block: `async { ... }`.",68,N],[13,"TryBlock","","A try block: `try { ... }`.",68,N],[13,"Yield","","A yield expression: `yield expr`.",68,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",68,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",69,N],[13,"Unnamed","","An unnamed field like `self.0`.",69,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",70,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",70,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",70,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",71,N],[13,"Maybe","","",71,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",72,N],[13,"Lifetime","","",72,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",73,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",73,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",73,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",74,N],[13,"F64","","",74,N],[13,"None","","",74,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",75,N],[13,"I16","","",75,N],[13,"I32","","",75,N],[13,"I64","","",75,N],[13,"I128","","",75,N],[13,"Isize","","",75,N],[13,"U8","","",75,N],[13,"U16","","",75,N],[13,"U32","","",75,N],[13,"U64","","",75,N],[13,"U128","","",75,N],[13,"Usize","","",75,N],[13,"None","","",75,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",76,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",76,N],[13,"Byte","","A byte literal: `b'f'`.",76,N],[13,"Char","","A character literal: `'a'`.",76,N],[13,"Int","","An integer literal: `1` or `1u16`.",76,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",76,N],[13,"Bool","","A boolean literal: `true` or `false`.",76,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",76,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",77,N],[13,"Raw","","A raw string like `r##\"data\"##`.",77,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",78,N],[13,"Brace","","",78,N],[13,"Bracket","","",78,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",79,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",79,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",79,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",80,N],[13,"Sub","","The `-` operator (subtraction)",80,N],[13,"Mul","","The `*` operator (multiplication)",80,N],[13,"Div","","The `/` operator (division)",80,N],[13,"Rem","","The `%` operator (modulus)",80,N],[13,"And","","The `&&` operator (logical and)",80,N],[13,"Or","","The `||` operator (logical or)",80,N],[13,"BitXor","","The `^` operator (bitwise xor)",80,N],[13,"BitAnd","","The `&` operator (bitwise and)",80,N],[13,"BitOr","","The `|` operator (bitwise or)",80,N],[13,"Shl","","The `<<` operator (shift left)",80,N],[13,"Shr","","The `>>` operator (shift right)",80,N],[13,"Eq","","The `==` operator (equality)",80,N],[13,"Lt","","The `<` operator (less than)",80,N],[13,"Le","","The `<=` operator (less than or equal to)",80,N],[13,"Ne","","The `!=` operator (not equal to)",80,N],[13,"Ge","","The `>=` operator (greater than or equal to)",80,N],[13,"Gt","","The `>` operator (greater than)",80,N],[13,"AddEq","","The `+=` operator",80,N],[13,"SubEq","","The `-=` operator",80,N],[13,"MulEq","","The `*=` operator",80,N],[13,"DivEq","","The `/=` operator",80,N],[13,"RemEq","","The `%=` operator",80,N],[13,"BitXorEq","","The `^=` operator",80,N],[13,"BitAndEq","","The `&=` operator",80,N],[13,"BitOrEq","","The `|=` operator",80,N],[13,"ShlEq","","The `<<=` operator",80,N],[13,"ShrEq","","The `>>=` operator",80,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",81,N],[13,"Not","","The `!` operator for logical inversion",81,N],[13,"Neg","","The `-` operator for negation",81,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",82,N],[13,"Wild","","Argument not given a name, matched with `_`.",82,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",83,N],[13,"Type","","A particular type is returned.",83,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",84,N],[13,"Array","","A fixed size array type: `[T; n]`.",84,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",84,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",84,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",84,N],[13,"Never","","The never type: `!`.",84,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",84,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",84,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",84,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",84,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",84,N],[13,"Group","","A type contained within invisible delimiters.",84,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",84,N],[13,"Macro","","A macro in the type position.",84,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",84,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",85,N],[13,"Type","","A type argument.",85,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",85,N],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",85,N],[13,"Const","","A const expression. Must be inside of a block.",85,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",86,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",86,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",86,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["error"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["error"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Underscore","syn::token","`_`",N,N],[12,"spans","","",87,N],[3,"Abstract","","`abstract`",N,N],[12,"span","","",88,N],[3,"As","","`as`",N,N],[12,"span","","",89,N],[3,"Async","","`async`",N,N],[12,"span","","",90,N],[3,"Auto","","`auto`",N,N],[12,"span","","",91,N],[3,"Become","","`become`",N,N],[12,"span","","",92,N],[3,"Box","","`box`",N,N],[12,"span","","",93,N],[3,"Break","","`break`",N,N],[12,"span","","",94,N],[3,"CapSelf","","`Self`",N,N],[12,"span","","",95,N],[3,"Const","","`const`",N,N],[12,"span","","",96,N],[3,"Continue","","`continue`",N,N],[12,"span","","",97,N],[3,"Crate","","`crate`",N,N],[12,"span","","",98,N],[3,"Default","","`default`",N,N],[12,"span","","",99,N],[3,"Do","","`do`",N,N],[12,"span","","",100,N],[3,"Dyn","","`dyn`",N,N],[12,"span","","",101,N],[3,"Else","","`else`",N,N],[12,"span","","",102,N],[3,"Enum","","`enum`",N,N],[12,"span","","",103,N],[3,"Existential","","`existential`",N,N],[12,"span","","",104,N],[3,"Extern","","`extern`",N,N],[12,"span","","",105,N],[3,"Final","","`final`",N,N],[12,"span","","",106,N],[3,"Fn","","`fn`",N,N],[12,"span","","",107,N],[3,"For","","`for`",N,N],[12,"span","","",108,N],[3,"If","","`if`",N,N],[12,"span","","",109,N],[3,"Impl","","`impl`",N,N],[12,"span","","",110,N],[3,"In","","`in`",N,N],[12,"span","","",111,N],[3,"Let","","`let`",N,N],[12,"span","","",112,N],[3,"Loop","","`loop`",N,N],[12,"span","","",113,N],[3,"Macro","","`macro`",N,N],[12,"span","","",114,N],[3,"Match","","`match`",N,N],[12,"span","","",115,N],[3,"Mod","","`mod`",N,N],[12,"span","","",116,N],[3,"Move","","`move`",N,N],[12,"span","","",117,N],[3,"Mut","","`mut`",N,N],[12,"span","","",118,N],[3,"Override","","`override`",N,N],[12,"span","","",119,N],[3,"Priv","","`priv`",N,N],[12,"span","","",120,N],[3,"Pub","","`pub`",N,N],[12,"span","","",121,N],[3,"Ref","","`ref`",N,N],[12,"span","","",122,N],[3,"Return","","`return`",N,N],[12,"span","","",123,N],[3,"Self_","","`self`",N,N],[12,"span","","",124,N],[3,"Static","","`static`",N,N],[12,"span","","",125,N],[3,"Struct","","`struct`",N,N],[12,"span","","",126,N],[3,"Super","","`super`",N,N],[12,"span","","",127,N],[3,"Trait","","`trait`",N,N],[12,"span","","",128,N],[3,"Try","","`try`",N,N],[12,"span","","",129,N],[3,"Type","","`type`",N,N],[12,"span","","",130,N],[3,"Typeof","","`typeof`",N,N],[12,"span","","",131,N],[3,"Union","","`union`",N,N],[12,"span","","",132,N],[3,"Unsafe","","`unsafe`",N,N],[12,"span","","",133,N],[3,"Unsized","","`unsized`",N,N],[12,"span","","",134,N],[3,"Use","","`use`",N,N],[12,"span","","",135,N],[3,"Virtual","","`virtual`",N,N],[12,"span","","",136,N],[3,"Where","","`where`",N,N],[12,"span","","",137,N],[3,"While","","`while`",N,N],[12,"span","","",138,N],[3,"Yield","","`yield`",N,N],[12,"span","","",139,N],[3,"Add","","`+`",N,N],[12,"spans","","",140,N],[3,"AddEq","","`+=`",N,N],[12,"spans","","",141,N],[3,"And","","`&`",N,N],[12,"spans","","",142,N],[3,"AndAnd","","`&&`",N,N],[12,"spans","","",143,N],[3,"AndEq","","`&=`",N,N],[12,"spans","","",144,N],[3,"At","","`@`",N,N],[12,"spans","","",145,N],[3,"Bang","","`!`",N,N],[12,"spans","","",146,N],[3,"Caret","","`^`",N,N],[12,"spans","","",147,N],[3,"CaretEq","","`^=`",N,N],[12,"spans","","",148,N],[3,"Colon","","`:`",N,N],[12,"spans","","",149,N],[3,"Colon2","","`::`",N,N],[12,"spans","","",150,N],[3,"Comma","","`,`",N,N],[12,"spans","","",151,N],[3,"Div","","`/`",N,N],[12,"spans","","",152,N],[3,"DivEq","","`/=`",N,N],[12,"spans","","",153,N],[3,"Dollar","","`$`",N,N],[12,"spans","","",154,N],[3,"Dot","","`.`",N,N],[12,"spans","","",155,N],[3,"Dot2","","`..`",N,N],[12,"spans","","",156,N],[3,"Dot3","","`...`",N,N],[12,"spans","","",157,N],[3,"DotDotEq","","`..=`",N,N],[12,"spans","","",158,N],[3,"Eq","","`=`",N,N],[12,"spans","","",159,N],[3,"EqEq","","`==`",N,N],[12,"spans","","",160,N],[3,"Ge","","`>=`",N,N],[12,"spans","","",161,N],[3,"Gt","","`>`",N,N],[12,"spans","","",162,N],[3,"Le","","`<=`",N,N],[12,"spans","","",163,N],[3,"Lt","","`<`",N,N],[12,"spans","","",164,N],[3,"MulEq","","`*=`",N,N],[12,"spans","","",165,N],[3,"Ne","","`!=`",N,N],[12,"spans","","",166,N],[3,"Or","","`|`",N,N],[12,"spans","","",167,N],[3,"OrEq","","`|=`",N,N],[12,"spans","","",168,N],[3,"OrOr","","`||`",N,N],[12,"spans","","",169,N],[3,"Pound","","`#`",N,N],[12,"spans","","",170,N],[3,"Question","","`?`",N,N],[12,"spans","","",171,N],[3,"RArrow","","`->`",N,N],[12,"spans","","",172,N],[3,"LArrow","","`<-`",N,N],[12,"spans","","",173,N],[3,"Rem","","`%`",N,N],[12,"spans","","",174,N],[3,"RemEq","","`%=`",N,N],[12,"spans","","",175,N],[3,"FatArrow","","`=>`",N,N],[12,"spans","","",176,N],[3,"Semi","","`;`",N,N],[12,"spans","","",177,N],[3,"Shl","","`<<`",N,N],[12,"spans","","",178,N],[3,"ShlEq","","`<<=`",N,N],[12,"spans","","",179,N],[3,"Shr","","`>>`",N,N],[12,"spans","","",180,N],[3,"ShrEq","","`>>=`",N,N],[12,"spans","","",181,N],[3,"Star","","`*`",N,N],[12,"spans","","",182,N],[3,"Sub","","`-`",N,N],[12,"spans","","",183,N],[3,"SubEq","","`-=`",N,N],[12,"spans","","",184,N],[3,"Tilde","","`~`",N,N],[12,"spans","","",185,N],[3,"Brace","","`{...}`",N,N],[12,"span","","",186,N],[3,"Bracket","","`[...]`",N,N],[12,"span","","",187,N],[3,"Paren","","`(...)`",N,N],[12,"span","","",188,N],[3,"Group","","None-delimited group",N,N],[12,"span","","",189,N],[8,"Token","","Marker trait for types that represent single tokens.",N,N],[11,"peek","syn","",31,[[["cursor"]],["bool"]]],[11,"display","","",31,[[],["str"]]],[11,"peek","","",76,[[["cursor"]],["bool"]]],[11,"display","","",76,[[],["str"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",32,[[["cursor"]],["bool"]]],[11,"display","","",32,[[],["str"]]],[11,"clone","syn::token","",87,[[["self"]],["underscore"]]],[11,"default","","",87,[[],["self"]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"peek","","",87,[[["cursor"]],["bool"]]],[11,"display","","",87,[[],["str"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"clone","","",88,[[["self"]],["abstract"]]],[11,"default","","",88,[[],["self"]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"peek","","",88,[[["cursor"]],["bool"]]],[11,"display","","",88,[[],["str"]]],[11,"clone","","",89,[[["self"]],["as"]]],[11,"default","","",89,[[],["self"]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"parse","","",89,[[["parsestream"]],["result"]]],[11,"peek","","",89,[[["cursor"]],["bool"]]],[11,"display","","",89,[[],["str"]]],[11,"clone","","",90,[[["self"]],["async"]]],[11,"default","","",90,[[],["self"]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"peek","","",90,[[["cursor"]],["bool"]]],[11,"display","","",90,[[],["str"]]],[11,"clone","","",91,[[["self"]],["auto"]]],[11,"default","","",91,[[],["self"]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"peek","","",91,[[["cursor"]],["bool"]]],[11,"display","","",91,[[],["str"]]],[11,"clone","","",92,[[["self"]],["become"]]],[11,"default","","",92,[[],["self"]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"peek","","",92,[[["cursor"]],["bool"]]],[11,"display","","",92,[[],["str"]]],[11,"clone","","",93,[[["self"]],["box"]]],[11,"default","","",93,[[],["self"]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"peek","","",93,[[["cursor"]],["bool"]]],[11,"display","","",93,[[],["str"]]],[11,"clone","","",94,[[["self"]],["break"]]],[11,"default","","",94,[[],["self"]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"parse","","",94,[[["parsestream"]],["result"]]],[11,"peek","","",94,[[["cursor"]],["bool"]]],[11,"display","","",94,[[],["str"]]],[11,"clone","","",95,[[["self"]],["capself"]]],[11,"default","","",95,[[],["self"]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"parse","","",95,[[["parsestream"]],["result"]]],[11,"peek","","",95,[[["cursor"]],["bool"]]],[11,"display","","",95,[[],["str"]]],[11,"clone","","",96,[[["self"]],["const"]]],[11,"default","","",96,[[],["self"]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"parse","","",96,[[["parsestream"]],["result"]]],[11,"peek","","",96,[[["cursor"]],["bool"]]],[11,"display","","",96,[[],["str"]]],[11,"clone","","",97,[[["self"]],["continue"]]],[11,"default","","",97,[[],["self"]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"parse","","",97,[[["parsestream"]],["result"]]],[11,"peek","","",97,[[["cursor"]],["bool"]]],[11,"display","","",97,[[],["str"]]],[11,"clone","","",98,[[["self"]],["crate"]]],[11,"default","","",98,[[],["self"]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"parse","","",98,[[["parsestream"]],["result"]]],[11,"peek","","",98,[[["cursor"]],["bool"]]],[11,"display","","",98,[[],["str"]]],[11,"clone","","",99,[[["self"]],["default"]]],[11,"default","","",99,[[],["self"]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"peek","","",99,[[["cursor"]],["bool"]]],[11,"display","","",99,[[],["str"]]],[11,"clone","","",100,[[["self"]],["do"]]],[11,"default","","",100,[[],["self"]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"clone","","",101,[[["self"]],["dyn"]]],[11,"default","","",101,[[],["self"]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"clone","","",102,[[["self"]],["else"]]],[11,"default","","",102,[[],["self"]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"peek","","",102,[[["cursor"]],["bool"]]],[11,"display","","",102,[[],["str"]]],[11,"clone","","",103,[[["self"]],["enum"]]],[11,"default","","",103,[[],["self"]]],[11,"to_tokens","","",103,[[["self"],["tokenstream"]]]],[11,"parse","","",103,[[["parsestream"]],["result"]]],[11,"peek","","",103,[[["cursor"]],["bool"]]],[11,"display","","",103,[[],["str"]]],[11,"clone","","",104,[[["self"]],["existential"]]],[11,"default","","",104,[[],["self"]]],[11,"to_tokens","","",104,[[["self"],["tokenstream"]]]],[11,"parse","","",104,[[["parsestream"]],["result"]]],[11,"peek","","",104,[[["cursor"]],["bool"]]],[11,"display","","",104,[[],["str"]]],[11,"clone","","",105,[[["self"]],["extern"]]],[11,"default","","",105,[[],["self"]]],[11,"to_tokens","","",105,[[["self"],["tokenstream"]]]],[11,"parse","","",105,[[["parsestream"]],["result"]]],[11,"peek","","",105,[[["cursor"]],["bool"]]],[11,"display","","",105,[[],["str"]]],[11,"clone","","",106,[[["self"]],["final"]]],[11,"default","","",106,[[],["self"]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"peek","","",106,[[["cursor"]],["bool"]]],[11,"display","","",106,[[],["str"]]],[11,"clone","","",107,[[["self"]],["fn"]]],[11,"default","","",107,[[],["self"]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"peek","","",107,[[["cursor"]],["bool"]]],[11,"display","","",107,[[],["str"]]],[11,"clone","","",108,[[["self"]],["for"]]],[11,"default","","",108,[[],["self"]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"parse","","",108,[[["parsestream"]],["result"]]],[11,"peek","","",108,[[["cursor"]],["bool"]]],[11,"display","","",108,[[],["str"]]],[11,"clone","","",109,[[["self"]],["if"]]],[11,"default","","",109,[[],["self"]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"peek","","",109,[[["cursor"]],["bool"]]],[11,"display","","",109,[[],["str"]]],[11,"clone","","",110,[[["self"]],["impl"]]],[11,"default","","",110,[[],["self"]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"peek","","",110,[[["cursor"]],["bool"]]],[11,"display","","",110,[[],["str"]]],[11,"clone","","",111,[[["self"]],["in"]]],[11,"default","","",111,[[],["self"]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"peek","","",111,[[["cursor"]],["bool"]]],[11,"display","","",111,[[],["str"]]],[11,"clone","","",112,[[["self"]],["let"]]],[11,"default","","",112,[[],["self"]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"peek","","",112,[[["cursor"]],["bool"]]],[11,"display","","",112,[[],["str"]]],[11,"clone","","",113,[[["self"]],["loop"]]],[11,"default","","",113,[[],["self"]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"parse","","",113,[[["parsestream"]],["result"]]],[11,"peek","","",113,[[["cursor"]],["bool"]]],[11,"display","","",113,[[],["str"]]],[11,"clone","","",114,[[["self"]],["macro"]]],[11,"default","","",114,[[],["self"]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"parse","","",114,[[["parsestream"]],["result"]]],[11,"peek","","",114,[[["cursor"]],["bool"]]],[11,"display","","",114,[[],["str"]]],[11,"clone","","",115,[[["self"]],["match"]]],[11,"default","","",115,[[],["self"]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"peek","","",115,[[["cursor"]],["bool"]]],[11,"display","","",115,[[],["str"]]],[11,"clone","","",116,[[["self"]],["mod"]]],[11,"default","","",116,[[],["self"]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"peek","","",116,[[["cursor"]],["bool"]]],[11,"display","","",116,[[],["str"]]],[11,"clone","","",117,[[["self"]],["move"]]],[11,"default","","",117,[[],["self"]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"peek","","",117,[[["cursor"]],["bool"]]],[11,"display","","",117,[[],["str"]]],[11,"clone","","",118,[[["self"]],["mut"]]],[11,"default","","",118,[[],["self"]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"peek","","",118,[[["cursor"]],["bool"]]],[11,"display","","",118,[[],["str"]]],[11,"clone","","",119,[[["self"]],["override"]]],[11,"default","","",119,[[],["self"]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"parse","","",119,[[["parsestream"]],["result"]]],[11,"peek","","",119,[[["cursor"]],["bool"]]],[11,"display","","",119,[[],["str"]]],[11,"clone","","",120,[[["self"]],["priv"]]],[11,"default","","",120,[[],["self"]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"parse","","",120,[[["parsestream"]],["result"]]],[11,"peek","","",120,[[["cursor"]],["bool"]]],[11,"display","","",120,[[],["str"]]],[11,"clone","","",121,[[["self"]],["pub"]]],[11,"default","","",121,[[],["self"]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"parse","","",121,[[["parsestream"]],["result"]]],[11,"peek","","",121,[[["cursor"]],["bool"]]],[11,"display","","",121,[[],["str"]]],[11,"clone","","",122,[[["self"]],["ref"]]],[11,"default","","",122,[[],["self"]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"parse","","",122,[[["parsestream"]],["result"]]],[11,"peek","","",122,[[["cursor"]],["bool"]]],[11,"display","","",122,[[],["str"]]],[11,"clone","","",123,[[["self"]],["return"]]],[11,"default","","",123,[[],["self"]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"parse","","",123,[[["parsestream"]],["result"]]],[11,"peek","","",123,[[["cursor"]],["bool"]]],[11,"display","","",123,[[],["str"]]],[11,"clone","","",124,[[["self"]],["self_"]]],[11,"default","","",124,[[],["self"]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"parse","","",124,[[["parsestream"]],["result"]]],[11,"peek","","",124,[[["cursor"]],["bool"]]],[11,"display","","",124,[[],["str"]]],[11,"clone","","",125,[[["self"]],["static"]]],[11,"default","","",125,[[],["self"]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"parse","","",125,[[["parsestream"]],["result"]]],[11,"peek","","",125,[[["cursor"]],["bool"]]],[11,"display","","",125,[[],["str"]]],[11,"clone","","",126,[[["self"]],["struct"]]],[11,"default","","",126,[[],["self"]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"parse","","",126,[[["parsestream"]],["result"]]],[11,"peek","","",126,[[["cursor"]],["bool"]]],[11,"display","","",126,[[],["str"]]],[11,"clone","","",127,[[["self"]],["super"]]],[11,"default","","",127,[[],["self"]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"parse","","",127,[[["parsestream"]],["result"]]],[11,"peek","","",127,[[["cursor"]],["bool"]]],[11,"display","","",127,[[],["str"]]],[11,"clone","","",128,[[["self"]],["trait"]]],[11,"default","","",128,[[],["self"]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"parse","","",128,[[["parsestream"]],["result"]]],[11,"peek","","",128,[[["cursor"]],["bool"]]],[11,"display","","",128,[[],["str"]]],[11,"clone","","",129,[[["self"]],["try"]]],[11,"default","","",129,[[],["self"]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"parse","","",129,[[["parsestream"]],["result"]]],[11,"peek","","",129,[[["cursor"]],["bool"]]],[11,"display","","",129,[[],["str"]]],[11,"clone","","",130,[[["self"]],["type"]]],[11,"default","","",130,[[],["self"]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"parse","","",130,[[["parsestream"]],["result"]]],[11,"peek","","",130,[[["cursor"]],["bool"]]],[11,"display","","",130,[[],["str"]]],[11,"clone","","",131,[[["self"]],["typeof"]]],[11,"default","","",131,[[],["self"]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"parse","","",131,[[["parsestream"]],["result"]]],[11,"peek","","",131,[[["cursor"]],["bool"]]],[11,"display","","",131,[[],["str"]]],[11,"clone","","",132,[[["self"]],["union"]]],[11,"default","","",132,[[],["self"]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"parse","","",132,[[["parsestream"]],["result"]]],[11,"peek","","",132,[[["cursor"]],["bool"]]],[11,"display","","",132,[[],["str"]]],[11,"clone","","",133,[[["self"]],["unsafe"]]],[11,"default","","",133,[[],["self"]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"parse","","",133,[[["parsestream"]],["result"]]],[11,"peek","","",133,[[["cursor"]],["bool"]]],[11,"display","","",133,[[],["str"]]],[11,"clone","","",134,[[["self"]],["unsized"]]],[11,"default","","",134,[[],["self"]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"parse","","",134,[[["parsestream"]],["result"]]],[11,"peek","","",134,[[["cursor"]],["bool"]]],[11,"display","","",134,[[],["str"]]],[11,"clone","","",135,[[["self"]],["use"]]],[11,"default","","",135,[[],["self"]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"parse","","",135,[[["parsestream"]],["result"]]],[11,"peek","","",135,[[["cursor"]],["bool"]]],[11,"display","","",135,[[],["str"]]],[11,"clone","","",136,[[["self"]],["virtual"]]],[11,"default","","",136,[[],["self"]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"parse","","",136,[[["parsestream"]],["result"]]],[11,"peek","","",136,[[["cursor"]],["bool"]]],[11,"display","","",136,[[],["str"]]],[11,"clone","","",137,[[["self"]],["where"]]],[11,"default","","",137,[[],["self"]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"parse","","",137,[[["parsestream"]],["result"]]],[11,"peek","","",137,[[["cursor"]],["bool"]]],[11,"display","","",137,[[],["str"]]],[11,"clone","","",138,[[["self"]],["while"]]],[11,"default","","",138,[[],["self"]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"parse","","",138,[[["parsestream"]],["result"]]],[11,"peek","","",138,[[["cursor"]],["bool"]]],[11,"display","","",138,[[],["str"]]],[11,"clone","","",139,[[["self"]],["yield"]]],[11,"default","","",139,[[],["self"]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"parse","","",139,[[["parsestream"]],["result"]]],[11,"peek","","",139,[[["cursor"]],["bool"]]],[11,"display","","",139,[[],["str"]]],[11,"clone","","",140,[[["self"]],["add"]]],[11,"default","","",140,[[],["self"]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"parse","","",140,[[["parsestream"]],["result"]]],[11,"peek","","",140,[[["cursor"]],["bool"]]],[11,"display","","",140,[[],["str"]]],[11,"clone","","",141,[[["self"]],["addeq"]]],[11,"default","","",141,[[],["self"]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"parse","","",141,[[["parsestream"]],["result"]]],[11,"peek","","",141,[[["cursor"]],["bool"]]],[11,"display","","",141,[[],["str"]]],[11,"clone","","",142,[[["self"]],["and"]]],[11,"default","","",142,[[],["self"]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"peek","","",142,[[["cursor"]],["bool"]]],[11,"display","","",142,[[],["str"]]],[11,"clone","","",143,[[["self"]],["andand"]]],[11,"default","","",143,[[],["self"]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"peek","","",143,[[["cursor"]],["bool"]]],[11,"display","","",143,[[],["str"]]],[11,"clone","","",144,[[["self"]],["andeq"]]],[11,"default","","",144,[[],["self"]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"peek","","",144,[[["cursor"]],["bool"]]],[11,"display","","",144,[[],["str"]]],[11,"clone","","",145,[[["self"]],["at"]]],[11,"default","","",145,[[],["self"]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"peek","","",145,[[["cursor"]],["bool"]]],[11,"display","","",145,[[],["str"]]],[11,"clone","","",146,[[["self"]],["bang"]]],[11,"default","","",146,[[],["self"]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"peek","","",146,[[["cursor"]],["bool"]]],[11,"display","","",146,[[],["str"]]],[11,"clone","","",147,[[["self"]],["caret"]]],[11,"default","","",147,[[],["self"]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"peek","","",147,[[["cursor"]],["bool"]]],[11,"display","","",147,[[],["str"]]],[11,"clone","","",148,[[["self"]],["careteq"]]],[11,"default","","",148,[[],["self"]]],[11,"to_tokens","","",148,[[["self"],["tokenstream"]]]],[11,"parse","","",148,[[["parsestream"]],["result"]]],[11,"peek","","",148,[[["cursor"]],["bool"]]],[11,"display","","",148,[[],["str"]]],[11,"clone","","",149,[[["self"]],["colon"]]],[11,"default","","",149,[[],["self"]]],[11,"to_tokens","","",149,[[["self"],["tokenstream"]]]],[11,"parse","","",149,[[["parsestream"]],["result"]]],[11,"peek","","",149,[[["cursor"]],["bool"]]],[11,"display","","",149,[[],["str"]]],[11,"clone","","",150,[[["self"]],["colon2"]]],[11,"default","","",150,[[],["self"]]],[11,"to_tokens","","",150,[[["self"],["tokenstream"]]]],[11,"parse","","",150,[[["parsestream"]],["result"]]],[11,"peek","","",150,[[["cursor"]],["bool"]]],[11,"display","","",150,[[],["str"]]],[11,"clone","","",151,[[["self"]],["comma"]]],[11,"default","","",151,[[],["self"]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"peek","","",151,[[["cursor"]],["bool"]]],[11,"display","","",151,[[],["str"]]],[11,"clone","","",152,[[["self"]],["div"]]],[11,"default","","",152,[[],["self"]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"parse","","",152,[[["parsestream"]],["result"]]],[11,"peek","","",152,[[["cursor"]],["bool"]]],[11,"display","","",152,[[],["str"]]],[11,"clone","","",153,[[["self"]],["diveq"]]],[11,"default","","",153,[[],["self"]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"peek","","",153,[[["cursor"]],["bool"]]],[11,"display","","",153,[[],["str"]]],[11,"clone","","",154,[[["self"]],["dollar"]]],[11,"default","","",154,[[],["self"]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"parse","","",154,[[["parsestream"]],["result"]]],[11,"peek","","",154,[[["cursor"]],["bool"]]],[11,"display","","",154,[[],["str"]]],[11,"clone","","",155,[[["self"]],["dot"]]],[11,"default","","",155,[[],["self"]]],[11,"to_tokens","","",155,[[["self"],["tokenstream"]]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"peek","","",155,[[["cursor"]],["bool"]]],[11,"display","","",155,[[],["str"]]],[11,"clone","","",156,[[["self"]],["dot2"]]],[11,"default","","",156,[[],["self"]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"peek","","",156,[[["cursor"]],["bool"]]],[11,"display","","",156,[[],["str"]]],[11,"clone","","",157,[[["self"]],["dot3"]]],[11,"default","","",157,[[],["self"]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"parse","","",157,[[["parsestream"]],["result"]]],[11,"peek","","",157,[[["cursor"]],["bool"]]],[11,"display","","",157,[[],["str"]]],[11,"clone","","",158,[[["self"]],["dotdoteq"]]],[11,"default","","",158,[[],["self"]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"parse","","",158,[[["parsestream"]],["result"]]],[11,"peek","","",158,[[["cursor"]],["bool"]]],[11,"display","","",158,[[],["str"]]],[11,"clone","","",159,[[["self"]],["eq"]]],[11,"default","","",159,[[],["self"]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"peek","","",159,[[["cursor"]],["bool"]]],[11,"display","","",159,[[],["str"]]],[11,"clone","","",160,[[["self"]],["eqeq"]]],[11,"default","","",160,[[],["self"]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"peek","","",160,[[["cursor"]],["bool"]]],[11,"display","","",160,[[],["str"]]],[11,"clone","","",161,[[["self"]],["ge"]]],[11,"default","","",161,[[],["self"]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"parse","","",161,[[["parsestream"]],["result"]]],[11,"peek","","",161,[[["cursor"]],["bool"]]],[11,"display","","",161,[[],["str"]]],[11,"clone","","",162,[[["self"]],["gt"]]],[11,"default","","",162,[[],["self"]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"peek","","",162,[[["cursor"]],["bool"]]],[11,"display","","",162,[[],["str"]]],[11,"clone","","",163,[[["self"]],["le"]]],[11,"default","","",163,[[],["self"]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"peek","","",163,[[["cursor"]],["bool"]]],[11,"display","","",163,[[],["str"]]],[11,"clone","","",164,[[["self"]],["lt"]]],[11,"default","","",164,[[],["self"]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"peek","","",164,[[["cursor"]],["bool"]]],[11,"display","","",164,[[],["str"]]],[11,"clone","","",165,[[["self"]],["muleq"]]],[11,"default","","",165,[[],["self"]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"parse","","",165,[[["parsestream"]],["result"]]],[11,"peek","","",165,[[["cursor"]],["bool"]]],[11,"display","","",165,[[],["str"]]],[11,"clone","","",166,[[["self"]],["ne"]]],[11,"default","","",166,[[],["self"]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"peek","","",166,[[["cursor"]],["bool"]]],[11,"display","","",166,[[],["str"]]],[11,"clone","","",167,[[["self"]],["or"]]],[11,"default","","",167,[[],["self"]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"parse","","",167,[[["parsestream"]],["result"]]],[11,"peek","","",167,[[["cursor"]],["bool"]]],[11,"display","","",167,[[],["str"]]],[11,"clone","","",168,[[["self"]],["oreq"]]],[11,"default","","",168,[[],["self"]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"clone","","",169,[[["self"]],["oror"]]],[11,"default","","",169,[[],["self"]]],[11,"to_tokens","","",169,[[["self"],["tokenstream"]]]],[11,"parse","","",169,[[["parsestream"]],["result"]]],[11,"peek","","",169,[[["cursor"]],["bool"]]],[11,"display","","",169,[[],["str"]]],[11,"clone","","",170,[[["self"]],["pound"]]],[11,"default","","",170,[[],["self"]]],[11,"to_tokens","","",170,[[["self"],["tokenstream"]]]],[11,"parse","","",170,[[["parsestream"]],["result"]]],[11,"peek","","",170,[[["cursor"]],["bool"]]],[11,"display","","",170,[[],["str"]]],[11,"clone","","",171,[[["self"]],["question"]]],[11,"default","","",171,[[],["self"]]],[11,"to_tokens","","",171,[[["self"],["tokenstream"]]]],[11,"parse","","",171,[[["parsestream"]],["result"]]],[11,"peek","","",171,[[["cursor"]],["bool"]]],[11,"display","","",171,[[],["str"]]],[11,"clone","","",172,[[["self"]],["rarrow"]]],[11,"default","","",172,[[],["self"]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"peek","","",172,[[["cursor"]],["bool"]]],[11,"display","","",172,[[],["str"]]],[11,"clone","","",173,[[["self"]],["larrow"]]],[11,"default","","",173,[[],["self"]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"peek","","",173,[[["cursor"]],["bool"]]],[11,"display","","",173,[[],["str"]]],[11,"clone","","",174,[[["self"]],["rem"]]],[11,"default","","",174,[[],["self"]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"peek","","",174,[[["cursor"]],["bool"]]],[11,"display","","",174,[[],["str"]]],[11,"clone","","",175,[[["self"]],["remeq"]]],[11,"default","","",175,[[],["self"]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"peek","","",175,[[["cursor"]],["bool"]]],[11,"display","","",175,[[],["str"]]],[11,"clone","","",176,[[["self"]],["fatarrow"]]],[11,"default","","",176,[[],["self"]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"peek","","",176,[[["cursor"]],["bool"]]],[11,"display","","",176,[[],["str"]]],[11,"clone","","",177,[[["self"]],["semi"]]],[11,"default","","",177,[[],["self"]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"peek","","",177,[[["cursor"]],["bool"]]],[11,"display","","",177,[[],["str"]]],[11,"clone","","",178,[[["self"]],["shl"]]],[11,"default","","",178,[[],["self"]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"parse","","",178,[[["parsestream"]],["result"]]],[11,"peek","","",178,[[["cursor"]],["bool"]]],[11,"display","","",178,[[],["str"]]],[11,"clone","","",179,[[["self"]],["shleq"]]],[11,"default","","",179,[[],["self"]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"parse","","",179,[[["parsestream"]],["result"]]],[11,"peek","","",179,[[["cursor"]],["bool"]]],[11,"display","","",179,[[],["str"]]],[11,"clone","","",180,[[["self"]],["shr"]]],[11,"default","","",180,[[],["self"]]],[11,"to_tokens","","",180,[[["self"],["tokenstream"]]]],[11,"parse","","",180,[[["parsestream"]],["result"]]],[11,"peek","","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"clone","","",181,[[["self"]],["shreq"]]],[11,"default","","",181,[[],["self"]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"clone","","",182,[[["self"]],["star"]]],[11,"default","","",182,[[],["self"]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"parse","","",182,[[["parsestream"]],["result"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"clone","","",183,[[["self"]],["sub"]]],[11,"default","","",183,[[],["self"]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"parse","","",183,[[["parsestream"]],["result"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"clone","","",184,[[["self"]],["subeq"]]],[11,"default","","",184,[[],["self"]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"parse","","",184,[[["parsestream"]],["result"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"clone","","",185,[[["self"]],["tilde"]]],[11,"default","","",185,[[],["self"]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"clone","","",186,[[["self"]],["brace"]]],[11,"default","","",186,[[],["self"]]],[11,"surround","","",186,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",187,[[["self"]],["bracket"]]],[11,"default","","",187,[[],["self"]]],[11,"surround","","",187,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",188,[[["self"]],["paren"]]],[11,"default","","",188,[[],["self"]]],[11,"surround","","",188,[[["self"],["tokenstream"],["f"]]]],[11,"clone","","",189,[[["self"]],["group"]]],[11,"default","","",189,[[],["self"]]],[11,"surround","","",189,[[["self"],["tokenstream"],["f"]]]],[11,"parse","syn","",196,[[["parsestream"]],["result"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"from","","",196,[[["self_"]],["ident"]]],[11,"from","","",196,[[["capself"]],["ident"]]],[11,"from","","",196,[[["super"]],["ident"]]],[11,"from","","",196,[[["crate"]],["ident"]]],[11,"from","","",196,[[["extern"]],["ident"]]],[11,"from","","",196,[[["underscore"]],["ident"]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],["result",["vec"]]]],[11,"clone","","",63,[[["self"]],["attrstyle"]]],[11,"clone","","",64,[[["self"]],["meta"]]],[11,"from","","",64,[[["ident"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"from","","",64,[[["metalist"]],["meta"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"from","","",64,[[["metanamevalue"]],["meta"]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",64,[[["self"]],["ident"]]],[11,"clone","","",65,[[["self"]],["nestedmeta"]]],[11,"from","","",65,[[["meta"]],["nestedmeta"]]],[11,"from","","",65,[[["lit"]],["nestedmeta"]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse","","",67,[[["parsestream"]],["result"]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",66,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"from","","",66,[[["fieldsnamed"]],["fields"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"from","","",66,[[["fieldsunnamed"]],["fields"]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["iter",["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",66,[[["self"]],["itermut",["field"]]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",67,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"from","","",67,[[["vispublic"]],["visibility"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"from","","",67,[[["viscrate"]],["visibility"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"from","","",67,[[["visrestricted"]],["visibility"]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"parse","","",68,[[["parsestream"]],["result"]]],[11,"parse","","",17,[[["parsestream"]],["result"]]],[11,"parse","","",69,[[["parsestream"]],["result"]]],[11,"parse","","",20,[[["parsestream"]],["result"]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"clone","","",68,[[["self"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprbox"]]],[11,"from","","",68,[[["exprbox"]],["expr"]]],[11,"clone","","",198,[[["self"]],["exprinplace"]]],[11,"from","","",68,[[["exprinplace"]],["expr"]]],[11,"clone","","",199,[[["self"]],["exprarray"]]],[11,"from","","",68,[[["exprarray"]],["expr"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"from","","",68,[[["exprcall"]],["expr"]]],[11,"clone","","",200,[[["self"]],["exprmethodcall"]]],[11,"from","","",68,[[["exprmethodcall"]],["expr"]]],[11,"clone","","",201,[[["self"]],["exprtuple"]]],[11,"from","","",68,[[["exprtuple"]],["expr"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"from","","",68,[[["exprbinary"]],["expr"]]],[11,"clone","","",18,[[["self"]],["exprunary"]]],[11,"from","","",68,[[["exprunary"]],["expr"]]],[11,"clone","","",15,[[["self"]],["exprlit"]]],[11,"from","","",68,[[["exprlit"]],["expr"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"from","","",68,[[["exprcast"]],["expr"]]],[11,"clone","","",202,[[["self"]],["exprtype"]]],[11,"from","","",68,[[["exprtype"]],["expr"]]],[11,"clone","","",203,[[["self"]],["exprlet"]]],[11,"from","","",68,[[["exprlet"]],["expr"]]],[11,"clone","","",204,[[["self"]],["exprif"]]],[11,"from","","",68,[[["exprif"]],["expr"]]],[11,"clone","","",205,[[["self"]],["exprwhile"]]],[11,"from","","",68,[[["exprwhile"]],["expr"]]],[11,"clone","","",206,[[["self"]],["exprforloop"]]],[11,"from","","",68,[[["exprforloop"]],["expr"]]],[11,"clone","","",207,[[["self"]],["exprloop"]]],[11,"from","","",68,[[["exprloop"]],["expr"]]],[11,"clone","","",208,[[["self"]],["exprmatch"]]],[11,"from","","",68,[[["exprmatch"]],["expr"]]],[11,"clone","","",209,[[["self"]],["exprclosure"]]],[11,"from","","",68,[[["exprclosure"]],["expr"]]],[11,"clone","","",210,[[["self"]],["exprunsafe"]]],[11,"from","","",68,[[["exprunsafe"]],["expr"]]],[11,"clone","","",211,[[["self"]],["exprblock"]]],[11,"from","","",68,[[["exprblock"]],["expr"]]],[11,"clone","","",212,[[["self"]],["exprassign"]]],[11,"from","","",68,[[["exprassign"]],["expr"]]],[11,"clone","","",213,[[["self"]],["exprassignop"]]],[11,"from","","",68,[[["exprassignop"]],["expr"]]],[11,"clone","","",13,[[["self"]],["exprfield"]]],[11,"from","","",68,[[["exprfield"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprindex"]]],[11,"from","","",68,[[["exprindex"]],["expr"]]],[11,"clone","","",214,[[["self"]],["exprrange"]]],[11,"from","","",68,[[["exprrange"]],["expr"]]],[11,"clone","","",17,[[["self"]],["exprpath"]]],[11,"from","","",68,[[["exprpath"]],["expr"]]],[11,"clone","","",215,[[["self"]],["exprreference"]]],[11,"from","","",68,[[["exprreference"]],["expr"]]],[11,"clone","","",216,[[["self"]],["exprbreak"]]],[11,"from","","",68,[[["exprbreak"]],["expr"]]],[11,"clone","","",217,[[["self"]],["exprcontinue"]]],[11,"from","","",68,[[["exprcontinue"]],["expr"]]],[11,"clone","","",218,[[["self"]],["exprreturn"]]],[11,"from","","",68,[[["exprreturn"]],["expr"]]],[11,"clone","","",219,[[["self"]],["exprmacro"]]],[11,"from","","",68,[[["exprmacro"]],["expr"]]],[11,"clone","","",220,[[["self"]],["exprstruct"]]],[11,"from","","",68,[[["exprstruct"]],["expr"]]],[11,"clone","","",221,[[["self"]],["exprrepeat"]]],[11,"from","","",68,[[["exprrepeat"]],["expr"]]],[11,"clone","","",16,[[["self"]],["exprparen"]]],[11,"from","","",68,[[["exprparen"]],["expr"]]],[11,"clone","","",222,[[["self"]],["exprgroup"]]],[11,"from","","",68,[[["exprgroup"]],["expr"]]],[11,"clone","","",223,[[["self"]],["exprtry"]]],[11,"from","","",68,[[["exprtry"]],["expr"]]],[11,"clone","","",224,[[["self"]],["exprasync"]]],[11,"from","","",68,[[["exprasync"]],["expr"]]],[11,"clone","","",225,[[["self"]],["exprtryblock"]]],[11,"from","","",68,[[["exprtryblock"]],["expr"]]],[11,"clone","","",226,[[["self"]],["expryield"]]],[11,"from","","",68,[[["expryield"]],["expr"]]],[11,"clone","","",19,[[["self"]],["exprverbatim"]]],[11,"from","","",68,[[["exprverbatim"]],["expr"]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"clone","","",69,[[["self"]],["member"]]],[11,"clone","","",20,[[["self"]],["index"]]],[11,"from","","",20,[[["usize"]],["index"]]],[11,"parse","","",23,[[["parsestream"]],["result"]]],[11,"parse","","",70,[[["parsestream"]],["result"]]],[11,"parse","","",24,[[["parsestream"]],["result"]]],[11,"parse","","",21,[[["parsestream"]],["result"]]],[11,"parse","","",29,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",28,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",22,[[["parsestream"]],["result"]]],[11,"parse","","",30,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"default","","",23,[[],["generics"]]],[11,"clone","","",23,[[["self"]],["generics"]]],[11,"clone","","",70,[[["self"]],["genericparam"]]],[11,"clone","","",29,[[["self"]],["typeparam"]]],[11,"from","","",70,[[["typeparam"]],["genericparam"]]],[11,"clone","","",24,[[["self"]],["lifetimedef"]]],[11,"from","","",70,[[["lifetimedef"]],["genericparam"]]],[11,"clone","","",22,[[["self"]],["constparam"]]],[11,"from","","",70,[[["constparam"]],["genericparam"]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",23,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",23,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",23,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",23,[[["self"]],["whereclause"]]],[11,"clone","","",227,[[["self"]],["implgenerics"]]],[11,"clone","","",228,[[["self"]],["typegenerics"]]],[11,"clone","","",229,[[["self"]],["turbofish"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",23,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",228,[[["self"]],["turbofish"]]],[11,"default","","",21,[[],["boundlifetimes"]]],[11,"clone","","",21,[[["self"]],["boundlifetimes"]]],[11,"new","","",24,[[["lifetime"]],["self"]]],[11,"from","","",29,[[["ident"]],["self"]]],[11,"clone","","",72,[[["self"]],["typeparambound"]]],[11,"from","","",72,[[["traitbound"]],["typeparambound"]]],[11,"from","","",72,[[["lifetime"]],["typeparambound"]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"clone","","",28,[[["self"]],["traitbound"]]],[11,"clone","","",71,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",30,[[["self"]],["whereclause"]]],[11,"clone","","",73,[[["self"]],["wherepredicate"]]],[11,"clone","","",27,[[["self"]],["predicatetype"]]],[11,"from","","",73,[[["predicatetype"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatelifetime"]]],[11,"from","","",73,[[["predicatelifetime"]],["wherepredicate"]]],[11,"clone","","",25,[[["self"]],["predicateeq"]]],[11,"from","","",73,[[["predicateeq"]],["wherepredicate"]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"parse","","",31,[[["parsestream"]],["result"]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"new","","Panics",31,[[["str"],["span"]],["self"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"parse","","",76,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",191,[[["parsestream"]],["result"]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",32,[[["parsestream"]],["result"]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",76,[[["literal"]],["self"]]],[11,"clone","","",76,[[["self"]],["lit"]]],[11,"clone","","",190,[[["self"]],["litstr"]]],[11,"from","","",76,[[["litstr"]],["lit"]]],[11,"clone","","",191,[[["self"]],["litbytestr"]]],[11,"from","","",76,[[["litbytestr"]],["lit"]]],[11,"clone","","",192,[[["self"]],["litbyte"]]],[11,"from","","",76,[[["litbyte"]],["lit"]]],[11,"clone","","",193,[[["self"]],["litchar"]]],[11,"from","","",76,[[["litchar"]],["lit"]]],[11,"clone","","",194,[[["self"]],["litint"]]],[11,"from","","",76,[[["litint"]],["lit"]]],[11,"clone","","",195,[[["self"]],["litfloat"]]],[11,"from","","",76,[[["litfloat"]],["lit"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"from","","",76,[[["litbool"]],["lit"]]],[11,"clone","","",33,[[["self"]],["litverbatim"]]],[11,"from","","",76,[[["litverbatim"]],["lit"]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"new","","",190,[[["str"],["span"]],["self"]]],[11,"value","","",190,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",190,[[["self"]],["result",["error"]]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"set_span","","",190,[[["self"],["span"]]]],[11,"new","","",191,N],[11,"value","","",191,[[["self"]],["vec",["u8"]]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"set_span","","",191,[[["self"],["span"]]]],[11,"new","","",192,[[["u8"],["span"]],["self"]]],[11,"value","","",192,[[["self"]],["u8"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"set_span","","",192,[[["self"],["span"]]]],[11,"new","","",193,[[["char"],["span"]],["self"]]],[11,"value","","",193,[[["self"]],["char"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"set_span","","",193,[[["self"],["span"]]]],[11,"new","","",194,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",194,[[["self"]],["u64"]]],[11,"suffix","","",194,[[["self"]],["intsuffix"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"set_span","","",194,[[["self"],["span"]]]],[11,"new","","",195,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",195,[[["self"]],["f64"]]],[11,"suffix","","",195,[[["self"]],["floatsuffix"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"set_span","","",195,[[["self"],["span"]]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"set_span","","",33,[[["self"],["span"]]]],[11,"clone","","",77,[[["self"]],["strstyle"]]],[11,"clone","","",75,[[["self"]],["intsuffix"]]],[11,"clone","","",74,[[["self"]],["floatsuffix"]]],[11,"parse","","",34,[[["parsestream"]],["result"]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"clone","","",34,[[["self"]],["macro"]]],[11,"clone","","",78,[[["self"]],["macrodelimiter"]]],[11,"parse","","",38,[[["parsestream"]],["result"]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"clone","","",38,[[["self"]],["deriveinput"]]],[11,"clone","","",79,[[["self"]],["data"]]],[11,"clone","","",36,[[["self"]],["datastruct"]]],[11,"from","","",79,[[["datastruct"]],["data"]]],[11,"clone","","",35,[[["self"]],["dataenum"]]],[11,"from","","",79,[[["dataenum"]],["data"]]],[11,"clone","","",37,[[["self"]],["dataunion"]]],[11,"from","","",79,[[["dataunion"]],["data"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",81,[[["parsestream"]],["result"]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"clone","","",80,[[["self"]],["binop"]]],[11,"clone","","",81,[[["self"]],["unop"]]],[11,"parse","","",84,[[["parsestream"]],["result"]]],[11,"without_plus","","In some positions, types may not contain the `+` character, to disambiguate them. For example in the expression `1 as T`, T may not contain a `+` character.",84,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",41,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result"]]],[11,"parse","","",42,[[["parsestream"]],["result"]]],[11,"parse","","",47,[[["parsestream"]],["result"]]],[11,"parse","","",45,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",46,[[["parsestream"]],["result"]]],[11,"parse","","",49,[[["parsestream"]],["result"]]],[11,"without_plus","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",83,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",53,[[["parsestream"]],["result"]]],[11,"without_plus","","",53,[[["parsestream"]],["result"]]],[11,"parse","","",53,[[["parsestream"],["bool"]],["result"]]],[11,"parse","","",44,[[["parsestream"]],["result"]]],[11,"parse","","",43,[[["parsestream"]],["result"]]],[11,"parse","","",48,[[["parsestream"]],["result"]]],[11,"parse","","",40,[[["parsestream"]],["result"]]],[11,"parse","","",82,[[["parsestream"]],["result"]]],[11,"parse","","",39,[[["parsestream"]],["result"]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"clone","","",84,[[["self"]],["type"]]],[11,"clone","","",52,[[["self"]],["typeslice"]]],[11,"from","","",84,[[["typeslice"]],["type"]]],[11,"clone","","",41,[[["self"]],["typearray"]]],[11,"from","","",84,[[["typearray"]],["type"]]],[11,"clone","","",50,[[["self"]],["typeptr"]]],[11,"from","","",84,[[["typeptr"]],["type"]]],[11,"clone","","",51,[[["self"]],["typereference"]]],[11,"from","","",84,[[["typereference"]],["type"]]],[11,"clone","","",42,[[["self"]],["typebarefn"]]],[11,"from","","",84,[[["typebarefn"]],["type"]]],[11,"clone","","",47,[[["self"]],["typenever"]]],[11,"from","","",84,[[["typenever"]],["type"]]],[11,"clone","","",54,[[["self"]],["typetuple"]]],[11,"from","","",84,[[["typetuple"]],["type"]]],[11,"clone","","",49,[[["self"]],["typepath"]]],[11,"from","","",84,[[["typepath"]],["type"]]],[11,"clone","","",53,[[["self"]],["typetraitobject"]]],[11,"from","","",84,[[["typetraitobject"]],["type"]]],[11,"clone","","",44,[[["self"]],["typeimpltrait"]]],[11,"from","","",84,[[["typeimpltrait"]],["type"]]],[11,"clone","","",48,[[["self"]],["typeparen"]]],[11,"from","","",84,[[["typeparen"]],["type"]]],[11,"clone","","",43,[[["self"]],["typegroup"]]],[11,"from","","",84,[[["typegroup"]],["type"]]],[11,"clone","","",45,[[["self"]],["typeinfer"]]],[11,"from","","",84,[[["typeinfer"]],["type"]]],[11,"clone","","",46,[[["self"]],["typemacro"]]],[11,"from","","",84,[[["typemacro"]],["type"]]],[11,"clone","","",55,[[["self"]],["typeverbatim"]]],[11,"from","","",84,[[["typeverbatim"]],["type"]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"clone","","",39,[[["self"]],["abi"]]],[11,"clone","","",40,[[["self"]],["barefnarg"]]],[11,"clone","","",82,[[["self"]],["barefnargname"]]],[11,"clone","","",83,[[["self"]],["returntype"]]],[11,"parse","","",60,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",56,[[["parsestream"]],["result"]]],[11,"parse","","",59,[[["parsestream"]],["result"]]],[11,"parse","","",61,[[["parsestream"]],["result"]]],[11,"parse","","",57,[[["parsestream"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its segments.",60,[[["parsestream"]],["result"]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"clone","","",60,[[["self"]],["path"]]],[11,"from","","",60,[[["t"]],["self"]]],[11,"clone","","",61,[[["self"]],["pathsegment"]]],[11,"from","","",61,[[["t"]],["self"]]],[11,"clone","","",86,[[["self"]],["patharguments"]]],[11,"default","","",86,[[],["self"]]],[11,"is_empty","","",86,[[["self"]],["bool"]]],[11,"clone","","",85,[[["self"]],["genericargument"]]],[11,"clone","","",56,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",57,[[["self"]],["binding"]]],[11,"clone","","",58,[[["self"]],["constraint"]]],[11,"clone","","",59,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",62,[[["self"]],["qself"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",230,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",230,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",230,[[["self"]],["cursor"]]],[11,"clone","","",231,[[["self"]],["cursor"]]],[11,"eq","","",231,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",231,[[["self"],["cursor"]],["bool"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",231,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",231,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",231,[[["self"],["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",231,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",231,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",231,[[["self"]],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign types.",N,N],[8,"IdentExt","syn::ext","Additional parsing methods for `Ident`.",N,N],[10,"parse_any","","Parses any identifier including keywords.",232,[[["parsestream"]],["result"]]],[11,"parse_any","syn","",196,[[["parsestream"]],["result"]]],[0,"punctuated","","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",233,N],[13,"End","","",233,N],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"clone","","",234,[[["self"]],["punctuated"]]],[11,"new","","Creates an empty punctuated sequence.",234,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",234,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",234,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",234,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",234,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",234,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",234,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",234,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",234,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",234,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",234,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",234,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",234,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",234,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",234,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",234,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",234,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, with optional trailing punctuation.",234,N],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by punctuation of type `P`, not accepting trailing punctuation.",234,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given parse function, separated by punctuation of type `P`, not accepting trailing punctuation.",234,N],[11,"from_iter","","",234,[[["i"]],["self"]]],[11,"extend","","",234,[[["self"],["i"]]]],[11,"from_iter","","",234,[[["i"]],["self"]]],[11,"extend","","",234,[[["self"],["i"]]]],[11,"into_iter","","",234,N],[11,"default","","",234,[[],["self"]]],[11,"next","","",235,[[["self"]],["option"]]],[11,"len","","",235,[[["self"]],["usize"]]],[11,"next","","",236,[[["self"]],["option"]]],[11,"len","","",236,[[["self"]],["usize"]]],[11,"next","","",237,[[["self"]],["option"]]],[11,"len","","",237,[[["self"]],["usize"]]],[11,"next","","",238,[[["self"]],["option"]]],[11,"len","","",238,[[["self"]],["usize"]]],[11,"next","","",239,[[["self"]],["option"]]],[11,"len","","",239,[[["self"]],["usize"]]],[11,"next","","",240,[[["self"]],["option"]]],[11,"len","","",240,[[["self"]],["usize"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",233,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",233,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",233,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",233,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",233,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",233,N],[11,"index","","",234,N],[11,"index_mut","","",234,N],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",241,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[5,"visit_abi","syn::visit","",N,[[["v"],["abi"]]]],[5,"visit_angle_bracketed_generic_arguments","","",N,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_attr_style","","",N,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",N,[[["v"],["attribute"]]]],[5,"visit_bare_fn_arg","","",N,[[["v"],["barefnarg"]]]],[5,"visit_bare_fn_arg_name","","",N,[[["v"],["barefnargname"]]]],[5,"visit_bin_op","","",N,[[["v"],["binop"]]]],[5,"visit_binding","","",N,[[["v"],["binding"]]]],[5,"visit_bound_lifetimes","","",N,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",N,[[["v"],["constparam"]]]],[5,"visit_constraint","","",N,[[["v"],["constraint"]]]],[5,"visit_data","","",N,[[["v"],["data"]]]],[5,"visit_data_enum","","",N,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",N,[[["v"],["datastruct"]]]],[5,"visit_data_union","","",N,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",N,[[["v"],["expr"]]]],[5,"visit_expr_binary","","",N,[[["v"],["exprbinary"]]]],[5,"visit_expr_call","","",N,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",N,[[["v"],["exprcast"]]]],[5,"visit_expr_field","","",N,[[["v"],["exprfield"]]]],[5,"visit_expr_index","","",N,[[["v"],["exprindex"]]]],[5,"visit_expr_lit","","",N,[[["v"],["exprlit"]]]],[5,"visit_expr_paren","","",N,[[["v"],["exprparen"]]]],[5,"visit_expr_path","","",N,[[["v"],["exprpath"]]]],[5,"visit_expr_unary","","",N,[[["v"],["exprunary"]]]],[5,"visit_expr_verbatim","","",N,[[["v"],["exprverbatim"]]]],[5,"visit_field","","",N,[[["v"],["field"]]]],[5,"visit_fields","","",N,[[["v"],["fields"]]]],[5,"visit_fields_named","","",N,[[["v"],["fieldsnamed"]]]],[5,"visit_fields_unnamed","","",N,[[["v"],["fieldsunnamed"]]]],[5,"visit_generic_argument","","",N,[[["v"],["genericargument"]]]],[5,"visit_generic_param","","",N,[[["v"],["genericparam"]]]],[5,"visit_generics","","",N,[[["v"],["generics"]]]],[5,"visit_ident","","",N,[[["v"],["ident"]]]],[5,"visit_index","","",N,[[["v"],["index"]]]],[5,"visit_lifetime","","",N,[[["v"],["lifetime"]]]],[5,"visit_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",N,[[["v"],["lit"]]]],[5,"visit_lit_bool","","",N,[[["v"],["litbool"]]]],[5,"visit_lit_byte","","",N,[[["v"],["litbyte"]]]],[5,"visit_lit_byte_str","","",N,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",N,[[["v"],["litchar"]]]],[5,"visit_lit_float","","",N,[[["v"],["litfloat"]]]],[5,"visit_lit_int","","",N,[[["v"],["litint"]]]],[5,"visit_lit_str","","",N,[[["v"],["litstr"]]]],[5,"visit_lit_verbatim","","",N,[[["v"],["litverbatim"]]]],[5,"visit_macro","","",N,[[["v"],["macro"]]]],[5,"visit_macro_delimiter","","",N,[[["v"],["macrodelimiter"]]]],[5,"visit_member","","",N,[[["v"],["member"]]]],[5,"visit_meta","","",N,[[["v"],["meta"]]]],[5,"visit_meta_list","","",N,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",N,[[["v"],["metanamevalue"]]]],[5,"visit_nested_meta","","",N,[[["v"],["nestedmeta"]]]],[5,"visit_parenthesized_generic_arguments","","",N,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_path","","",N,[[["v"],["path"]]]],[5,"visit_path_arguments","","",N,[[["v"],["patharguments"]]]],[5,"visit_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"visit_predicate_eq","","",N,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",N,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",N,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",N,[[["v"],["qself"]]]],[5,"visit_return_type","","",N,[[["v"],["returntype"]]]],[5,"visit_span","","",N,[[["v"],["span"]]]],[5,"visit_trait_bound","","",N,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",N,[[["v"],["traitboundmodifier"]]]],[5,"visit_type","","",N,[[["v"],["type"]]]],[5,"visit_type_array","","",N,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",N,[[["v"],["typebarefn"]]]],[5,"visit_type_group","","",N,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",N,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",N,[[["v"],["typeinfer"]]]],[5,"visit_type_macro","","",N,[[["v"],["typemacro"]]]],[5,"visit_type_never","","",N,[[["v"],["typenever"]]]],[5,"visit_type_param","","",N,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",N,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",N,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",N,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",N,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",N,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",N,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",N,[[["v"],["typetraitobject"]]]],[5,"visit_type_tuple","","",N,[[["v"],["typetuple"]]]],[5,"visit_type_verbatim","","",N,[[["v"],["typeverbatim"]]]],[5,"visit_un_op","","",N,[[["v"],["unop"]]]],[5,"visit_variant","","",N,[[["v"],["variant"]]]],[5,"visit_vis_crate","","",N,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",N,[[["v"],["vispublic"]]]],[5,"visit_vis_restricted","","",N,[[["v"],["visrestricted"]]]],[5,"visit_visibility","","",N,[[["v"],["visibility"]]]],[5,"visit_where_clause","","",N,[[["v"],["whereclause"]]]],[5,"visit_where_predicate","","",N,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",N,N],[11,"visit_abi","","",242,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",242,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",242,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",242,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",242,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",242,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",242,[[["self"],["binop"]]]],[11,"visit_binding","","",242,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",242,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",242,[[["self"],["constparam"]]]],[11,"visit_constraint","","",242,[[["self"],["constraint"]]]],[11,"visit_data","","",242,[[["self"],["data"]]]],[11,"visit_data_enum","","",242,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",242,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",242,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",242,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",242,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",242,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",242,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",242,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",242,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",242,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",242,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",242,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",242,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",242,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",242,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",242,[[["self"],["field"]]]],[11,"visit_fields","","",242,[[["self"],["fields"]]]],[11,"visit_fields_named","","",242,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",242,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",242,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",242,[[["self"],["genericparam"]]]],[11,"visit_generics","","",242,[[["self"],["generics"]]]],[11,"visit_ident","","",242,[[["self"],["ident"]]]],[11,"visit_index","","",242,[[["self"],["index"]]]],[11,"visit_lifetime","","",242,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",242,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",242,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",242,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",242,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",242,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",242,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",242,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",242,[[["self"],["litint"]]]],[11,"visit_lit_str","","",242,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",242,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",242,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",242,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",242,[[["self"],["member"]]]],[11,"visit_meta","","",242,[[["self"],["meta"]]]],[11,"visit_meta_list","","",242,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",242,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",242,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",242,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",242,[[["self"],["path"]]]],[11,"visit_path_arguments","","",242,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",242,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",242,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",242,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",242,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",242,[[["self"],["qself"]]]],[11,"visit_return_type","","",242,[[["self"],["returntype"]]]],[11,"visit_span","","",242,[[["self"],["span"]]]],[11,"visit_trait_bound","","",242,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",242,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",242,[[["self"],["type"]]]],[11,"visit_type_array","","",242,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",242,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",242,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",242,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",242,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",242,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",242,[[["self"],["typenever"]]]],[11,"visit_type_param","","",242,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",242,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",242,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",242,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",242,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",242,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",242,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",242,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",242,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",242,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",242,[[["self"],["unop"]]]],[11,"visit_variant","","",242,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",242,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",242,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",242,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",242,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",242,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",242,[[["self"],["wherepredicate"]]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input tokens.",N,N],[3,"Lookahead1","","Support for checking the next token in a stream to decide how to parse.",N,N],[3,"ParseBuffer","","Cursor position within a buffered token stream.",N,N],[3,"StepCursor","","Cursor state associated with speculative parsing.",N,N],[6,"Result","","The result of a Syn parser.",N,N],[6,"ParseStream","","Input to a Syn parser function.",N,N],[8,"Peek","","Types that can be parsed by looking at just one token.",N,N],[8,"Parse","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",243,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",244,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",244,[[["self"],["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",244,[[["self"],["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",244,[[["self"],["str"]],["result"]]],[11,"drop","","",245,[[["self"]]]],[11,"clone","","",246,[[["self"]],["stepcursor"]]],[11,"deref","","",246,N],[11,"error","","Triggers an error at the current position of the parse stream.",246,[[["self"],["t"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the position of our parse stream past it.",245,[[["self"]],["result"]]],[11,"call","","Calls the given parser function to parse a syntax tree node of type `T` from this stream.",245,N],[11,"peek","","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",245,[[["self"],["t"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",245,[[["self"],["t"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",245,[[["self"],["t"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by punctuation of type `P`, with optional trailing punctuation.",245,N],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",245,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this stream and building an error message if it is not one of a set of expected tokens.",245,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either the original or the fork does not advance the position of the other.",245,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse stream.",245,[[["self"],["t"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream, advancing the position of this stream only if parsing succeeds.",245,[[["self"],["f"]],["result"]]],[11,"cursor","","Provides low-level access to the token representation underlying this parse stream.",245,[[["self"]],["cursor"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"clone","","",247,[[["self"]],["error"]]],[11,"new","","Usually the [`ParseStream::error`] method will be used instead, which automatically uses the correct span from the current position of the parse stream.",247,[[["span"],["t"]],["self"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",247,[[["self"]],["tokenstream"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"description","","",247,[[["self"]],["str"]]],[11,"from","","",247,[[["lexerror"]],["self"]]],[14,"parenthesized","syn","Parse a set of parentheses and expose their content to subsequent parsers.",N,N],[14,"braced","","Parse a set of curly braces and expose their content to subsequent parsers.",N,N],[14,"bracketed","","Parse a set of square brackets and expose their content to subsequent parsers.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[14,"custom_keyword","","Define a type that supports parsing and printing a given identifier as if it were a keyword.",N,N],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a compile error if the tokens fail to parse.",N,N],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",196,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",196,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",196,N],[11,"clone","","",196,[[["self"]],["ident"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",196,[[["self"],["ident"]],["option",["ordering"]]]],[11,"cmp","","",196,[[["self"],["ident"]],["ordering"]]],[11,"hash","","",196,N],[11,"fmt","","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",196,[[["self"],["t"]],["bool"]]],[11,"eq","","",196,[[["self"],["ident"]],["bool"]]],[11,"to_tokens","","",196,N],[11,"visit_abi","syn::visit","",242,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",242,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_attr_style","","",242,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",242,[[["self"],["attribute"]]]],[11,"visit_bare_fn_arg","","",242,[[["self"],["barefnarg"]]]],[11,"visit_bare_fn_arg_name","","",242,[[["self"],["barefnargname"]]]],[11,"visit_bin_op","","",242,[[["self"],["binop"]]]],[11,"visit_binding","","",242,[[["self"],["binding"]]]],[11,"visit_bound_lifetimes","","",242,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",242,[[["self"],["constparam"]]]],[11,"visit_constraint","","",242,[[["self"],["constraint"]]]],[11,"visit_data","","",242,[[["self"],["data"]]]],[11,"visit_data_enum","","",242,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",242,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",242,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",242,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",242,[[["self"],["expr"]]]],[11,"visit_expr_binary","","",242,[[["self"],["exprbinary"]]]],[11,"visit_expr_call","","",242,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",242,[[["self"],["exprcast"]]]],[11,"visit_expr_field","","",242,[[["self"],["exprfield"]]]],[11,"visit_expr_index","","",242,[[["self"],["exprindex"]]]],[11,"visit_expr_lit","","",242,[[["self"],["exprlit"]]]],[11,"visit_expr_paren","","",242,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",242,[[["self"],["exprpath"]]]],[11,"visit_expr_unary","","",242,[[["self"],["exprunary"]]]],[11,"visit_expr_verbatim","","",242,[[["self"],["exprverbatim"]]]],[11,"visit_field","","",242,[[["self"],["field"]]]],[11,"visit_fields","","",242,[[["self"],["fields"]]]],[11,"visit_fields_named","","",242,[[["self"],["fieldsnamed"]]]],[11,"visit_fields_unnamed","","",242,[[["self"],["fieldsunnamed"]]]],[11,"visit_generic_argument","","",242,[[["self"],["genericargument"]]]],[11,"visit_generic_param","","",242,[[["self"],["genericparam"]]]],[11,"visit_generics","","",242,[[["self"],["generics"]]]],[11,"visit_ident","","",242,[[["self"],["ident"]]]],[11,"visit_index","","",242,[[["self"],["index"]]]],[11,"visit_lifetime","","",242,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",242,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",242,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",242,[[["self"],["litbool"]]]],[11,"visit_lit_byte","","",242,[[["self"],["litbyte"]]]],[11,"visit_lit_byte_str","","",242,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",242,[[["self"],["litchar"]]]],[11,"visit_lit_float","","",242,[[["self"],["litfloat"]]]],[11,"visit_lit_int","","",242,[[["self"],["litint"]]]],[11,"visit_lit_str","","",242,[[["self"],["litstr"]]]],[11,"visit_lit_verbatim","","",242,[[["self"],["litverbatim"]]]],[11,"visit_macro","","",242,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",242,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",242,[[["self"],["member"]]]],[11,"visit_meta","","",242,[[["self"],["meta"]]]],[11,"visit_meta_list","","",242,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",242,[[["self"],["metanamevalue"]]]],[11,"visit_nested_meta","","",242,[[["self"],["nestedmeta"]]]],[11,"visit_parenthesized_generic_arguments","","",242,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_path","","",242,[[["self"],["path"]]]],[11,"visit_path_arguments","","",242,[[["self"],["patharguments"]]]],[11,"visit_path_segment","","",242,[[["self"],["pathsegment"]]]],[11,"visit_predicate_eq","","",242,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",242,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",242,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",242,[[["self"],["qself"]]]],[11,"visit_return_type","","",242,[[["self"],["returntype"]]]],[11,"visit_span","","",242,[[["self"],["span"]]]],[11,"visit_trait_bound","","",242,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",242,[[["self"],["traitboundmodifier"]]]],[11,"visit_type","","",242,[[["self"],["type"]]]],[11,"visit_type_array","","",242,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",242,[[["self"],["typebarefn"]]]],[11,"visit_type_group","","",242,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",242,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",242,[[["self"],["typeinfer"]]]],[11,"visit_type_macro","","",242,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",242,[[["self"],["typenever"]]]],[11,"visit_type_param","","",242,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",242,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",242,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",242,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",242,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",242,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",242,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",242,[[["self"],["typetraitobject"]]]],[11,"visit_type_tuple","","",242,[[["self"],["typetuple"]]]],[11,"visit_type_verbatim","","",242,[[["self"],["typeverbatim"]]]],[11,"visit_un_op","","",242,[[["self"],["unop"]]]],[11,"visit_variant","","",242,[[["self"],["variant"]]]],[11,"visit_vis_crate","","",242,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",242,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",242,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",242,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",242,[[["self"],["whereclause"]]]],[11,"visit_where_predicate","","",242,[[["self"],["wherepredicate"]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine whether it matches the requested type of token.",248,[[["self"],["t"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse stream.",248,[[["self"]],["error"]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprLet"],[3,"ExprIf"],[3,"ExprWhile"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprAsync"],[3,"ExprTryBlock"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[8,"Visit"],[8,"Parse"],[8,"Parser"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"]]};
searchIndex["synstructure"]={"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",N,N],[12,"binding","","The name which this BindingInfo will bind to.",0,N],[12,"style","","The type of binding which this BindingInfo will create.",0,N],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn::Variant`, however this type may also be used as the sole variant for a struct.",N,N],[12,"attrs","","",1,N],[12,"ident","","",1,N],[12,"fields","","",1,N],[12,"discriminant","","",1,N],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",N,N],[12,"prefix","","",2,N],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides utilities for creating custom derive trait implementations.",N,N],[4,"BindStyle","","The type of binding to use when generating a pattern.",N,N],[13,"Move","","`x`",3,N],[13,"MoveMut","","`mut x`",3,N],[13,"Ref","","`ref x`",3,N],[13,"RefMut","","`ref mut x`",3,N],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type which implements `Display`.",N,[[["t"]],["string"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["bindstyle"]]],[11,"eq","","",3,[[["self"],["bindstyle"]],["bool"]]],[11,"hash","","",3,N],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["bindinginfo"]]],[11,"eq","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"hash","","",0,N],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,[[["self"]],["field"]]],[11,"pat","","Generates the pattern fragment for this field binding.",0,[[["self"]],["tokenstream"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,[[["self"]],["vec",["ident"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["variantast"]]],[11,"eq","","",1,[[["self"],["variantast"]],["bool"]]],[11,"ne","","",1,[[["self"],["variantast"]],["bool"]]],[11,"hash","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["variantinfo"]]],[11,"eq","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"ne","","",2,[[["self"],["variantinfo"]],["bool"]]],[11,"hash","","",2,N],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,N],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,N],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,[[["self"]],["variantast"]]],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,[[["self"]],["bool"]]],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,[[["self"]],["tokenstream"]]],[11,"construct","","Generates the token stream required to construct the current variant.",2,[[["self"],["f"]],["tokenstream"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,[[["self"],["f"]],["self"]]],[11,"remove_binding","","Remove the binding at the given index.",2,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,[[["self"]],["vec",["ident"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["structure"]]],[11,"eq","","",4,[[["self"],["structure"]],["bool"]]],[11,"ne","","",4,[[["self"],["structure"]],["bool"]]],[11,"hash","","",4,N],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,[[["deriveinput"]],["self"]]],[11,"variants","","Returns a slice of the variants in this Structure.",4,N],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,N],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,[[["self"]],["deriveinput"]]],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,[[["self"]],["bool"]]],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,[[["self"],["i"],["f"]],["tokenstream"]]],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,[[["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,[[["self"],["f"]],["self"]]],[11,"remove_variant","","Remove the variant at the given index.",4,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,[[["self"]],["vec",["ident"]]]],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when the trait to be derived needs some extra generic parameters.",4,[[["self"],["genericparam"]],["self"]]],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,[[["self"],["traitbound"],["option"]]]],[11,"bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by `Structure::gen_impl`.",4,[[["self"],["p"],["b"]],["tokenstream"]]],[11,"gen_impl","","Generate an impl block for the given struct. This impl block will automatically use hygiene tricks to avoid polluting the caller's namespace, and will automatically add trait bounds for generic type parameters.",4,[[["self"],["tokenstream"]],["tokenstream"]]],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming `TokenStream` into a `synstructure::Structure` object, and pass it into the inner function.",N,N],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",N,N]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["sysfs_gpio"]={"doc":"GPIO access under Linux using the GPIO sysfs interface","items":[[3,"Pin","sysfs_gpio","",N,N],[3,"PinPoller","","",N,N],[4,"Error","","",N,N],[13,"Io","","Simple IO error",0,N],[13,"Unexpected","","Read unusual data from sysfs file.",0,N],[13,"InvalidPath","","Invalid Path",0,N],[13,"Unsupported","","Operation not supported on target os",0,N],[4,"Direction","","",N,N],[13,"In","","",1,N],[13,"Out","","",1,N],[13,"High","","",1,N],[13,"Low","","",1,N],[4,"Edge","","",N,N],[13,"NoInterrupt","","",2,N],[13,"RisingEdge","","",2,N],[13,"FallingEdge","","",2,N],[13,"BothEdges","","",2,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[6,"Result","","",N,N],[11,"clone","","",3,[[["self"]],["pin"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["pin"]],["bool"]]],[11,"ne","","",3,[[["self"],["pin"]],["bool"]]],[11,"clone","","",1,[[["self"]],["direction"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["direction"]],["bool"]]],[11,"clone","","",2,[[["self"]],["edge"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["edge"]],["bool"]]],[11,"new","","Create a new Pin with the provided `pin_num`",3,[[["u64"]],["pin"]]],[11,"from_path","","Create a new Pin with the provided path",3,[[["t"]],["result",["pin"]]]],[11,"get_pin_num","","Get the pin number",3,[[["self"]],["u64"]]],[11,"with_exported","","Run a closure with the GPIO exported",3,[[["self"],["f"]],["result"]]],[11,"is_exported","","Determines whether the GPIO is exported",3,[[["self"]],["bool"]]],[11,"export","","Export the GPIO",3,[[["self"]],["result"]]],[11,"unexport","","Unexport the GPIO",3,[[["self"]],["result"]]],[11,"get_pin","","Get the pin number for the Pin",3,[[["self"]],["u64"]]],[11,"get_direction","","Get the direction of the Pin",3,[[["self"]],["result",["direction"]]]],[11,"set_direction","","Set this GPIO as either an input or an output",3,[[["self"],["direction"]],["result"]]],[11,"get_value","","Get the value of the Pin (0 or 1)",3,[[["self"]],["result",["u8"]]]],[11,"set_value","","Set the value of the Pin",3,[[["self"],["u8"]],["result"]]],[11,"get_edge","","Get the currently configured edge for this pin",3,[[["self"]],["result",["edge"]]]],[11,"set_edge","","Set the edge on which this GPIO will trigger when polled",3,[[["self"],["edge"]],["result"]]],[11,"get_active_low","","Get polarity of the Pin (`true` is active low)",3,[[["self"]],["result",["bool"]]]],[11,"set_active_low","","Set the polarity of the Pin (`true` is active low)",3,[[["self"],["bool"]],["result"]]],[11,"get_poller","","Get a PinPoller object for this pin",3,[[["self"]],["result",["pinpoller"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"get_pin","","Get the pin associated with this PinPoller",4,[[["self"]],["pin"]]],[11,"new","","Create a new PinPoller for the provided pin number",4,[[["u64"]],["result",["pinpoller"]]]],[11,"poll","","Block until an interrupt occurs",4,[[["self"],["isize"]],["result",["option"]]]],[11,"drop","","",4,[[["self"]]]],[14,"try_unexport","","",N,N]],"paths":[[4,"Error"],[4,"Direction"],[4,"Edge"],[3,"Pin"],[3,"PinPoller"]]};
searchIndex["time"]={"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",N,N],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",N,N],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",N,N],[12,"sec","","",0,N],[12,"nsec","","",0,N],[3,"PreciseTime","","An opaque structure representing a moment in time.",N,N],[3,"SteadyTime","","A structure representing a moment in time.",N,N],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",N,N],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,N],[12,"tm_min","","Minutes after the hour - [0, 59]",1,N],[12,"tm_hour","","Hours after midnight - [0, 23]",1,N],[12,"tm_mday","","Day of the month - [1, 31]",1,N],[12,"tm_mon","","Months since January - [0, 11]",1,N],[12,"tm_year","","Years since 1900",1,N],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,N],[12,"tm_yday","","Days since January 1 - [0, 365]",1,N],[12,"tm_isdst","","Daylight Saving Time flag.",1,N],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,N],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,N],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",N,N],[4,"ParseError","","",N,N],[13,"InvalidSecond","","",2,N],[13,"InvalidMinute","","",2,N],[13,"InvalidHour","","",2,N],[13,"InvalidDay","","",2,N],[13,"InvalidMonth","","",2,N],[13,"InvalidYear","","",2,N],[13,"InvalidDayOfWeek","","",2,N],[13,"InvalidDayOfMonth","","",2,N],[13,"InvalidDayOfYear","","",2,N],[13,"InvalidZoneOffset","","",2,N],[13,"InvalidTime","","",2,N],[13,"InvalidSecondsSinceEpoch","","",2,N],[13,"MissingFormatConverter","","",2,N],[13,"InvalidFormatSpecifier","","",2,N],[13,"UnexpectedCharacter","","",2,N],[5,"strptime","","Parses the time from the string according to the format string.",N,[[["str"],["str"]],["result",["tm","parseerror"]]]],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",N,[[],["timespec"]]],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",N,[[],["u64"]]],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",N,[[],["f64"]]],[5,"tzset","","",N,[[]]],[5,"empty_tm","","",N,[[],["tm"]]],[5,"at_utc","","Returns the specified time in UTC",N,[[["timespec"]],["tm"]]],[5,"now_utc","","Returns the current time in UTC",N,[[],["tm"]]],[5,"at","","Returns the specified time in the local timezone",N,[[["timespec"]],["tm"]]],[5,"now","","Returns the current time in the local timezone",N,[[],["tm"]]],[5,"strftime","","Formats the time according to the format string.",N,[[["str"],["tm"]],["result",["string","parseerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["duration"]]],[11,"eq","","",4,[[["self"],["duration"]],["bool"]]],[11,"ne","","",4,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["duration"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["duration"]],["bool"]]],[11,"le","","",4,[[["self"],["duration"]],["bool"]]],[11,"gt","","",4,[[["self"],["duration"]],["bool"]]],[11,"ge","","",4,[[["self"],["duration"]],["bool"]]],[11,"cmp","","",4,[[["self"],["duration"]],["ordering"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,[[["i64"]],["duration"]]],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,[[["i64"]],["duration"]]],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,[[["i64"]],["duration"]]],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,[[["i64"]],["duration"]]],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,[[["i64"]],["duration"]]],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,[[["f"]],["duration"]]],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,[[["self"]],["i64"]]],[11,"num_days","","Returns the total number of whole days in the duration.",4,[[["self"]],["i64"]]],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,[[["self"]],["i64"]]],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,[[["self"]],["i64"]]],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,[[["self"]],["i64"]]],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,[[["self"]],["i64"]]],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,[[["self"]],["option",["i64"]]]],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,[[["self"],["duration"]],["option",["duration"]]]],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,[[],["duration"]]],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,[[],["duration"]]],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,[[],["duration"]]],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,[[["self"]],["bool"]]],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,[[["stdduration"]],["result",["duration","outofrangeerror"]]]],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,[[["self"]],["result",["stdduration","outofrangeerror"]]]],[11,"neg","","",4,[[["self"]],["duration"]]],[11,"add","","",4,[[["self"],["duration"]],["duration"]]],[11,"sub","","",4,[[["self"],["duration"]],["duration"]]],[11,"mul","","",4,[[["self"],["i32"]],["duration"]]],[11,"div","","",4,[[["self"],["i32"]],["duration"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["outofrangeerror"]]],[11,"eq","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["outofrangeerror"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["timespec"]]],[11,"eq","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ne","","",0,[[["self"],["timespec"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["timespec"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"le","","",0,[[["self"],["timespec"]],["bool"]]],[11,"gt","","",0,[[["self"],["timespec"]],["bool"]]],[11,"ge","","",0,[[["self"],["timespec"]],["bool"]]],[11,"cmp","","",0,[[["self"],["timespec"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"new","","",0,[[["i64"],["i32"]],["timespec"]]],[11,"add","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["duration"]],["timespec"]]],[11,"sub","","",0,[[["self"],["timespec"]],["duration"]]],[11,"clone","","",6,[[["self"]],["precisetime"]]],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,[[],["precisetime"]]],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,[[["self"],["precisetime"]],["duration"]]],[11,"clone","","",7,[[["self"]],["steadytime"]]],[11,"partial_cmp","","",7,[[["self"],["steadytime"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"le","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"gt","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ge","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"cmp","","",7,[[["self"],["steadytime"]],["ordering"]]],[11,"eq","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"ne","","",7,[[["self"],["steadytime"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,[[],["steadytime"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"sub","","",7,[[["self"],["steadytime"]],["duration"]]],[11,"sub","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"add","","",7,[[["self"],["duration"]],["steadytime"]]],[11,"clone","","",1,[[["self"]],["tm"]]],[11,"eq","","",1,[[["self"],["tm"]],["bool"]]],[11,"ne","","",1,[[["self"],["tm"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"add","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","The resulting Tm is in UTC.",1,[[["self"],["duration"]],["tm"]]],[11,"sub","","",1,[[["self"],["tm"]],["duration"]]],[11,"partial_cmp","","",1,[[["self"],["tm"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["tm"]],["ordering"]]],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,[[["self"]],["timespec"]]],[11,"to_local","","Convert time to the local timezone",1,[[["self"]],["tm"]]],[11,"to_utc","","Convert time to the UTC",1,[[["self"]],["tm"]]],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,[[["self"]],["tmfmt"]]],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,[[["self"]],["tmfmt"]]],[11,"strftime","","Formats the time according to the format string.",1,[[["self"],["str"]],["result",["tmfmt","parseerror"]]]],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,[[["self"]],["tmfmt"]]],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,[[["self"]],["tmfmt"]]],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,[[["self"]],["tmfmt"]]],[11,"eq","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"ne","","",2,[[["self"],["parseerror"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["parseerror"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio_executor"]={"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",N,[[["t"]]]],[5,"with_default","","Set the default executor for the duration of the closure",N,[[["t"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,[[["self"],["f"]]]],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,[[["self"]]]],[11,"block_on","","Blocks the thread on the specified future, returning the value with which that future completes.",1,[[["self"],["f"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["defaultexecutor"]]],[11,"current","","Returns a handle to the default executor for the current context.",2,[[],["defaultexecutor"]]],[11,"spawn","","",2,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",2,[[["self"]],["result",["spawnerror"]]]],[11,"execute","","",2,[[["self"],["t"]],["result",["executeerror"]]]],[0,"park","","Abstraction over blocking and unblocking the current thread.",N,N],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",N,N],[8,"Park","","Block the current thread.",N,N],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,N],[16,"Error","","Error returned by `park`",3,N],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,N],[10,"park","","Block the current thread unless or until the token is available.",3,[[["self"]],["result"]]],[10,"park_timeout","","Park the current thread for at most `duration`.",3,[[["self"],["duration"]],["result"]]],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",N,N],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unparkthread"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,[[],["parkthread"]]],[11,"unpark","","",5,N],[11,"park","","",5,[[["self"]],["result"]]],[11,"park_timeout","","",5,[[["self"],["duration"]],["result"]]],[11,"unpark","","",7,[[["self"]]]],[8,"Executor","tokio_executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,[[],["self"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,[[],["self"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,[[["self"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_io"]={"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",N,N],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["allowstdio"]]],[11,"eq","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",8,[[["self"],["allowstdio"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"hash","","",8,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",8,[[["self"]],["t"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"write_all","","",8,N],[11,"write_fmt","","",8,[[["self"],["arguments"]],["result"]]],[11,"shutdown","","",8,[[["self"]],["poll",["error"]]]],[11,"read","","",8,N],[11,"read_to_end","","",8,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",8,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",8,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Returns the underlying I/O object.",9,[[["self"]],["a"]]],[11,"poll","","",9,[[["self"]],["poll",["option","error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"read","","",10,N],[11,"read_buf","","",10,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"write","","",11,N],[11,"flush","","",11,[[["self"]],["result"]]],[11,"shutdown","","",11,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",11,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",N,N],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"]={"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",N,N],[3,"Shutdown","","Future that resolves when the reactor thread has shutdown.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",N,N],[5,"with_default","","Set the default reactor for the duration of the closure",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"handle","","Returns a reference to the reactor handle.",0,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",0,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",0,[[["self"]]]],[11,"drop","","",0,[[["self"]]]],[11,"poll","","",1,[[["self"]],["poll"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",2,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",2,[[["e"],["handle"]],["result"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",2,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",2,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",2,[[["self"]],["result"]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",2,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",2,[[["self"],["ready"]],["result"]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",2,[[["self"]],["poll",["ready","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",2,[[["self"]],["result"]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"shutdown","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Registration`.",3,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",3,[[["self"],["t"]],["result",["bool"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",3,[[["self"],["t"]],["result"]]],[11,"register_with","","Register the I/O resource with the specified reactor.",3,[[["self"],["t"],["handle"]],["result",["bool"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",3,[[["self"]],["poll",["ready","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",3,[[["self"]],["result",["option"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",3,[[["self"]],["poll",["ready","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",3,[[["self"]],["result",["option"]]]],[11,"clone","","",4,[[["self"]],["handle"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["setfallbackerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",7,[[],["result",["reactor"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",7,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",7,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",7,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",7,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",7,[[["self"]],["result",["background"]]]],[11,"unpark","","",7,N],[11,"park","","",7,[[["self"]],["result"]]],[11,"park_timeout","","",7,[[["self"],["duration"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"current","","Returns a handle to the current reactor.",4,[[],["handle"]]],[11,"unpark","","",4,[[["self"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",4,[[],["handle"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]]],"paths":[[3,"Background"],[3,"Shutdown"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_serial"]={"doc":"Bindings for serial port I/O and futures","items":[[4,"DataBits","tokio_serial","Number of bits per character.",N,N],[13,"Five","","5 bits per character",0,N],[13,"Six","","6 bits per character",0,N],[13,"Seven","","7 bits per character",0,N],[13,"Eight","","8 bits per character",0,N],[3,"Error","","An error type for serial port operations.",N,N],[12,"kind","","The kind of error this is",1,N],[12,"description","","A description of the error suitable for end-users",1,N],[4,"ErrorKind","","Categories of errors that can occur when interacting with serial ports.",N,N],[13,"NoDevice","","The device is not available.",2,N],[13,"InvalidInput","","A parameter was incorrect.",2,N],[13,"Unknown","","An unknown error occurred.",2,N],[13,"Io","","An I/O error occurred.",2,N],[4,"FlowControl","","Flow control modes.",N,N],[13,"None","","No flow control.",3,N],[13,"Software","","Flow control using XON/XOFF bytes.",3,N],[13,"Hardware","","Flow control using RTS/CTS signals.",3,N],[4,"Parity","","Parity checking modes.",N,N],[13,"None","","No parity bit.",4,N],[13,"Odd","","Parity bit sets odd number of 1 bits.",4,N],[13,"Even","","Parity bit sets even number of 1 bits.",4,N],[8,"SerialPort","","A trait for serial port devices",N,N],[10,"name","","Returns the name of this port if it exists.",5,[[["self"]],["option",["string"]]]],[10,"settings","","Returns a struct with the current port settings",5,[[["self"]],["serialportsettings"]]],[10,"baud_rate","","Returns the current baud rate.",5,[[["self"]],["result",["u32","error"]]]],[10,"data_bits","","Returns the character size.",5,[[["self"]],["result",["databits","error"]]]],[10,"flow_control","","Returns the flow control mode.",5,[[["self"]],["result",["flowcontrol","error"]]]],[10,"parity","","Returns the parity-checking mode.",5,[[["self"]],["result",["parity","error"]]]],[10,"stop_bits","","Returns the number of stop bits.",5,[[["self"]],["result",["stopbits","error"]]]],[10,"timeout","","Returns the current timeout.",5,[[["self"]],["duration"]]],[10,"set_all","","Applies all settings for a struct. This isn't guaranteed to involve only a single call into the driver, though that may be done on some platforms.",5,[[["self"],["serialportsettings"]],["result",["error"]]]],[10,"set_baud_rate","","Sets the baud rate.",5,[[["self"],["u32"]],["result",["error"]]]],[10,"set_data_bits","","Sets the character size.",5,[[["self"],["databits"]],["result",["error"]]]],[10,"set_flow_control","","Sets the flow control mode.",5,[[["self"],["flowcontrol"]],["result",["error"]]]],[10,"set_parity","","Sets the parity-checking mode.",5,[[["self"],["parity"]],["result",["error"]]]],[10,"set_stop_bits","","Sets the number of stop bits.",5,[[["self"],["stopbits"]],["result",["error"]]]],[10,"set_timeout","","Sets the timeout for future I/O operations.",5,[[["self"],["duration"]],["result",["error"]]]],[10,"write_request_to_send","","Sets the state of the RTS (Request To Send) control signal.",5,[[["self"],["bool"]],["result",["error"]]]],[10,"write_data_terminal_ready","","Writes to the Data Terminal Ready pin",5,[[["self"],["bool"]],["result",["error"]]]],[10,"read_clear_to_send","","Reads the state of the CTS (Clear To Send) control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"read_data_set_ready","","Reads the state of the Data Set Ready control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"read_ring_indicator","","Reads the state of the Ring Indicator control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"read_carrier_detect","","Reads the state of the Carrier Detect control signal.",5,[[["self"]],["result",["bool","error"]]]],[10,"try_clone","","Attempts to clone the `SerialPort`. This allow you to write and read simultaneously from the same serial connection. Please note that if you want a real asynchronous serial port you should look at mio-serial or tokio-serial.",5,[[["self"]],["result",["box","error"]]]],[3,"SerialPortSettings","","A struct containing all serial port settings",N,N],[12,"baud_rate","","The baud rate in symbols-per-second",6,N],[12,"data_bits","","Number of bits used to represent a character sent on the line",6,N],[12,"flow_control","","The type of signalling to use for controlling data transfer",6,N],[12,"parity","","The type of parity to use for error checking",6,N],[12,"stop_bits","","Number of bits to use to signal the end of a character",6,N],[12,"timeout","","Amount of time to wait to receive data before timing out",6,N],[4,"StopBits","","Number of stop bits.",N,N],[13,"One","","One stop bit.",7,N],[13,"Two","","Two stop bits.",7,N],[3,"Serial","","Serial port I/O struct.",N,N],[6,"Result","","A type for results generated by interacting with serial ports.",N,N],[11,"from_path","","Open serial port from a provided path, using the default reactor.",8,[[["p"],["serialportsettings"]],["result",["serial"]]]],[11,"from_path_with_handle","","Open serial port from a provided path, using the specified reactor.",8,[[["p"],["serialportsettings"],["handle"]],["result",["serial"]]]],[11,"pair","","Create a pair of pseudo serial terminals using the default reactor",8,[[],["result"]]],[11,"pair_with_handle","","Create a pair of pseudo serial terminals using the specified reactor.",8,[[["handle"]],["result"]]],[11,"set_exclusive","","Sets the exclusivity of the port",8,[[["self"],["bool"]],["result"]]],[11,"exclusive","","Returns the exclusivity of the port",8,[[["self"]],["bool"]]],[11,"settings","","",8,[[["self"]],["serialportsettings"]]],[11,"name","","",8,[[["self"]],["option",["string"]]]],[11,"baud_rate","","",8,[[["self"]],["result",["u32"]]]],[11,"data_bits","","",8,[[["self"]],["result",["databits"]]]],[11,"flow_control","","",8,[[["self"]],["result",["flowcontrol"]]]],[11,"parity","","",8,[[["self"]],["result",["parity"]]]],[11,"stop_bits","","",8,[[["self"]],["result",["stopbits"]]]],[11,"timeout","","",8,[[["self"]],["duration"]]],[11,"set_all","","",8,[[["self"],["serialportsettings"]],["result"]]],[11,"set_baud_rate","","",8,[[["self"],["u32"]],["result"]]],[11,"set_data_bits","","",8,[[["self"],["databits"]],["result"]]],[11,"set_flow_control","","",8,[[["self"],["flowcontrol"]],["result"]]],[11,"set_parity","","",8,[[["self"],["parity"]],["result"]]],[11,"set_stop_bits","","",8,[[["self"],["stopbits"]],["result"]]],[11,"set_timeout","","",8,[[["self"],["duration"]],["result"]]],[11,"write_request_to_send","","",8,[[["self"],["bool"]],["result"]]],[11,"write_data_terminal_ready","","",8,[[["self"],["bool"]],["result"]]],[11,"read_clear_to_send","","",8,[[["self"]],["result",["bool"]]]],[11,"read_data_set_ready","","",8,[[["self"]],["result",["bool"]]]],[11,"read_ring_indicator","","",8,[[["self"]],["result",["bool"]]]],[11,"read_carrier_detect","","",8,[[["self"]],["result",["bool"]]]],[11,"try_clone","","",8,[[["self"]],["result",["box"]]]],[11,"read","","",8,N],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"poll_read","","",8,N],[11,"poll_write","","",8,N],[11,"shutdown","","",8,[[["self"]],["poll",["error"]]]],[11,"clone","","",7,[[["self"]],["stopbits"]]],[11,"clone","","",6,[[["self"]],["serialportsettings"]]],[11,"clone","","",4,[[["self"]],["parity"]]],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"clone","","",3,[[["self"]],["flowcontrol"]]],[11,"clone","","",0,[[["self"]],["databits"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"default","","",6,[[],["serialportsettings"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",7,[[["self"],["stopbits"]],["bool"]]],[11,"eq","","",6,[[["self"],["serialportsettings"]],["bool"]]],[11,"ne","","",6,[[["self"],["serialportsettings"]],["bool"]]],[11,"eq","","",3,[[["self"],["flowcontrol"]],["bool"]]],[11,"eq","","",4,[[["self"],["parity"]],["bool"]]],[11,"eq","","",0,[[["self"],["databits"]],["bool"]]],[11,"new","","Instantiates a new error",1,[[["errorkind"],["t"]],["error"]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",1,[[["self"]],["errorkind"]]]],"paths":[[4,"DataBits"],[3,"Error"],[4,"ErrorKind"],[4,"FlowControl"],[4,"Parity"],[8,"SerialPort"],[3,"SerialPortSettings"],[4,"StopBits"],[3,"Serial"]]};
searchIndex["toml"]={"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",N,N],[3,"Datetime","toml::value","A parsed TOML datetime value",N,N],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",0,N],[13,"Integer","","Represents a TOML integer",0,N],[13,"Float","","Represents a TOML float",0,N],[13,"Boolean","","Represents a TOML boolean",0,N],[13,"Datetime","","Represents a TOML datetime",0,N],[13,"Array","","Represents a TOML array",0,N],[13,"Table","","Represents a TOML table",0,N],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[8,"Index","","Types that can be used to index a `toml::Value`",N,N],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",0,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",0,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",0,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",0,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",0,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",0,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",0,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",0,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"is_table","","Tests whether this value is a table.",0,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",0,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,[[["self"]],["str"]]],[11,"index","","",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",0,[[["self"],["i"]],["value"]]],[11,"from","","",0,[[["str"]],["value"]]],[11,"from","","",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["btreemap"]],["value"]]],[11,"from","","",0,[[["hashmap"]],["value"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["datetime"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["value"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"into_deserializer","","",0,[[["self"]],["self"]]],[11,"eq","","",1,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",1,[[["self"],["datetime"]],["bool"]]],[11,"clone","","",1,[[["self"]],["datetime"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["datetimeparseerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["datetime"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,"Serializer","toml::ser","Serialization implementation for TOML.",N,N],[4,"Error","","Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,N],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,N],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,N],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,N],[13,"DateInvalid","","A serialized date was invalid.",3,N],[13,"NumberInvalid","","A serialized number was invalid.",3,N],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,N],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,N],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",N,[[["i"],["s"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",4,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"custom","","",3,[[["t"]],["error"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error","toml::de","Errors that can occur when deserializing a type.",N,N],[3,"Deserializer","","Deserialization implementation for TOML.",N,N],[5,"from_slice","","Deserializes a byte slice into a type.",N,N],[5,"from_str","","Deserializes a string into a type.",N,[[["str"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["error"]]],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,[[["self"]],["result",["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,[[["self"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"custom","","",5,[[["t"]],["error"]]],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",N,N]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["traitobject"]={"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",N,N],[5,"data_mut","","Get the data pointer from this trait object, mutably.",N,N],[8,"Trait","","A trait implemented for all trait objects.",N,N]],"paths":[]};
searchIndex["typemap"]={"doc":"A type-based key value store where one value type is allowed for each key.","items":[[3,"TypeMap","typemap","A map keyed by types.",N,N],[3,"OccupiedEntry","","A view onto an occupied entry in a TypeMap.",N,N],[3,"VacantEntry","","A view onto an unoccupied entry in a TypeMap.",N,N],[4,"Entry","","A view onto an entry in a TypeMap.",N,N],[13,"Occupied","","A view onto an occupied entry in a TypeMap.",0,N],[13,"Vacant","","A view onto an unoccupied entry in a TypeMap.",0,N],[6,"SendMap","","A version of `TypeMap` containing only `Send` types.",N,N],[6,"SyncMap","","A version of `TypeMap` containing only `Sync` types.",N,N],[6,"ShareMap","","A version of `TypeMap` containing only `Send + Sync` types.",N,N],[6,"CloneMap","","A version of `TypeMap` containing only `Clone` types.",N,N],[6,"ShareCloneMap","","A version of `TypeMap` containing only `Clone + Send + Sync` types.",N,N],[6,"DebugMap","","A version of `TypeMap` containing only `Debug` types.",N,N],[6,"ShareDebugMap","","A version of `TypeMap` containing only `Debug + Send + Sync` types.",N,N],[8,"CloneAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",N,N],[8,"DebugAny","","A marker trait meant for use as the `A` parameter in `TypeMap`.",N,N],[8,"Key","","This trait defines the relationship between keys and values in a TypeMap.",N,N],[16,"Value","","The value type associated with this key type.",1,N],[11,"default","","",2,[[],["typemap"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["typemap"]]],[11,"new","","Create a new, empty TypeMap.",2,[[],["typemap"]]],[11,"custom","","Create a new, empty TypeMap.",2,[[],["typemap"]]],[11,"insert","","Insert a value into the map with a specified key type.",2,N],[11,"get","","Find a value in the map and get a reference to it.",2,[[["self"]],["option"]]],[11,"get_mut","","Find a value in the map and get a mutable reference to it.",2,[[["self"]],["option"]]],[11,"contains","","Check if a key has an associated value stored in the map.",2,[[["self"]],["bool"]]],[11,"remove","","Remove a value from the map.",2,[[["self"]],["option"]]],[11,"entry","","Get the given key's corresponding entry in the map for in-place manipulation.",2,[[["self"]],["entry"]]],[11,"data","","Read the underlying HashMap",2,[[["self"]],["hashmap"]]],[11,"data_mut","","Get a mutable reference to the underlying HashMap",2,[[["self"]],["hashmap"]]],[11,"len","","Get the number of values stored in the map.",2,[[["self"]],["usize"]]],[11,"is_empty","","Return true if the map contains no values.",2,[[["self"]],["bool"]]],[11,"clear","","Remove all entries from the map.",2,[[["self"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,N],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,N],[11,"get","","Get a reference to the entry's value.",3,N],[11,"get_mut","","Get a mutable reference to the entry's value.",3,N],[11,"into_mut","","Transform the entry into a mutable reference with the same lifetime as the map.",3,N],[11,"insert","","Set the entry's value and return the previous value.",3,N],[11,"remove","","Move the entry's value out of the map, consuming the entry.",3,N],[11,"insert","","Set the entry's value and return a mutable reference to it.",4,N]],"paths":[[4,"Entry"],[8,"Key"],[3,"TypeMap"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["unsafe_any"]={"doc":"Traits for unsafe downcasting from trait objects to & or &mut references of concrete types. These should only be used if you are absolutely certain of the type of the data in said trait object - there be dragons etc.","items":[[8,"UnsafeAny","unsafe_any","A trait providing unchecked downcasting to its contents when stored in a trait object.",N,N],[8,"UnsafeAnyExt","","An extension trait for unchecked downcasting of trait objects.",N,N],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",0,[[["self"]],["t"]]],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",0,[[["self"]],["t"]]],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",0,[[["box"]],["box"]]],[11,"downcast_ref_unchecked","","Returns a reference to the contained value, assuming that it is of type `T`.",1,[[["self"]],["t"]]],[11,"downcast_mut_unchecked","","Returns a mutable reference to the contained value, assuming that it is of type `T`.",1,[[["self"]],["t"]]],[11,"downcast_unchecked","","Returns a the contained value, assuming that it is of type `T`.",1,[[["box",["unsafeany"]]],["box"]]]],"paths":[[8,"UnsafeAnyExt"],[8,"UnsafeAny"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
